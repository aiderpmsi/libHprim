parser grammar HprimsParser;

options {

    // Default language but name it anyway
    //
    language  = Java;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the 
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = HprimsLexer;
    
    superClass = AbstractHprimsParser;
    
}

@header {
import com.github.aiderpmsi.libhprim.parser.AbstractHprimsParser;
}

line_h
@init{System.out.println("Start");}
@after{System.out.println("End");} :
   a=HCONTENT {System.out.println($a.text);}
   HDELIMITER1 HDELIMITER2 HREPETITER HESC HDELIMITER3 DELIMITER1 g=content {System.out.println($g.contentText);} DELIMITER1 EOF;

// Champs répétés


// Types de base pour les contenus
content returns [String contentText]:
  g=baseContent ((CR+ NONPRINTABLE* content_a DELIMITER1 h=content {$contentText = $g.text + $h.contentText;}) | {$contentText = $g.text;});

// Débuts de ligne
content_a :
  {tryToken("A")}? baseContent;

baseContent :
  CONTENT?;