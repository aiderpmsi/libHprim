// $ANTLR 3.4 C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g 2013-04-09 23:40:40

package com.github.aiderpmsi.hprim.parser.antlr;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.LinkedList;

import com.github.aiderpmsi.hprim.parser.MatchRegexTokenException;
import com.github.aiderpmsi.hprim.parser.ContentHandlerException;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.AttributesImpl;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class HPRIMSParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARA", "CHARB", "CHARC", "CHARD", "CHARE", "CHARF", "CHARG", "CHARH", "CHARI", "CHARK", "CHARL", "CHARM", "CHARN", "CHARO", "CHARP", "CHARR", "CHARS", "CHART", "CHARU", "CHARV", "CHARW", "CHARX", "CHAR_SYMBOL_INF", "CHAR_SYMBOL_SUP", "CHARl", "CHARu", "CHIFFRE0", "CHIFFRE1", "CHIFFRE2", "CHIFFRE3", "CHIFFRE4", "CHIFFRE5", "CHIFFRE6", "CHIFFRE7", "CHIFFRE8", "CHIFFRE9", "CR", "DELIMITER1", "DELIMITER2", "DELIMITER3", "DELIMITERS", "LETTRE", "MOINS", "PLUS", "POINT", "REPETITEUR", "TOKENMISMATCH"
    };

    public static final int EOF=-1;
    public static final int CHARA=4;
    public static final int CHARB=5;
    public static final int CHARC=6;
    public static final int CHARD=7;
    public static final int CHARE=8;
    public static final int CHARF=9;
    public static final int CHARG=10;
    public static final int CHARH=11;
    public static final int CHARI=12;
    public static final int CHARK=13;
    public static final int CHARL=14;
    public static final int CHARM=15;
    public static final int CHARN=16;
    public static final int CHARO=17;
    public static final int CHARP=18;
    public static final int CHARR=19;
    public static final int CHARS=20;
    public static final int CHART=21;
    public static final int CHARU=22;
    public static final int CHARV=23;
    public static final int CHARW=24;
    public static final int CHARX=25;
    public static final int CHAR_SYMBOL_INF=26;
    public static final int CHAR_SYMBOL_SUP=27;
    public static final int CHARl=28;
    public static final int CHARu=29;
    public static final int CHIFFRE0=30;
    public static final int CHIFFRE1=31;
    public static final int CHIFFRE2=32;
    public static final int CHIFFRE3=33;
    public static final int CHIFFRE4=34;
    public static final int CHIFFRE5=35;
    public static final int CHIFFRE6=36;
    public static final int CHIFFRE7=37;
    public static final int CHIFFRE8=38;
    public static final int CHIFFRE9=39;
    public static final int CR=40;
    public static final int DELIMITER1=41;
    public static final int DELIMITER2=42;
    public static final int DELIMITER3=43;
    public static final int DELIMITERS=44;
    public static final int LETTRE=45;
    public static final int MOINS=46;
    public static final int PLUS=47;
    public static final int POINT=48;
    public static final int REPETITEUR=49;
    public static final int TOKENMISMATCH=50;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public HPRIMSParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public HPRIMSParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return HPRIMSParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g"; }



      /**
       * Collecteur utilisé dans cette classe
       */
      public ContentHandler contentHandler;

      /**
       * Logger de la classe
       */
      private static final Logger logger = Logger.getLogger(HPRIMSParser.class.getCanonicalName());
      
      /**
       * Type utilisé pour se souvenir du dernier élément
       */
      private class XmlElement {
          public String uri;
          public String localName;
          public String qName;
      }
      
      /**
       * Liste des éléments parcourus
       */
      private LinkedList<XmlElement> xmlElements = new LinkedList<XmlElement>(); 

      /**
       * Constructeur
       * @param lexer
       * @param my_col
       */
      public HPRIMSParser(TokenStream input, ContentHandler contentHandler) {
        this(input);
        this.contentHandler = contentHandler;
      }
      
      /**
       * Formate une erreur sous forme de chaine de caractères
       * @param err
       * @return
       */
      public String formatError(RecognitionException err) {
        return getErrorHeader(err) + " / " + getErrorMessage(err, this.getTokenNames());
      }

      /**
       * Encadre l'appel du contentHandler
       */
      public void startElement(String nameElement) throws ContentHandlerException {
          try {
              // Enregistrement de cet élément
              XmlElement xmlElement = new XmlElement();
              xmlElement.uri = "";
              xmlElement.localName = nameElement;
              xmlElement.qName = nameElement;
              xmlElements.add(xmlElement);
              // Ajout de ce élément
              contentHandler.startElement("", nameElement, nameElement, new AttributesImpl());
           } catch (SAXException e) {
              ContentHandlerException exc = new ContentHandlerException(e.getMessage());
              exc.setIntStream(input);
              exc.setStartToken(input.LT(1));
              throw exc;
           }
        }
       
      /**
       * Encadre l'appel du contentHandler
       */
      public void endElement() throws ContentHandlerException {
        try {
            XmlElement xmlElement = xmlElements.pollLast();
            contentHandler.endElement(xmlElement.uri,
                xmlElement.localName, xmlElement.qName);
         } catch (SAXException e) {
            ContentHandlerException exc = new ContentHandlerException(e.getMessage());
            exc.setIntStream(input);
            exc.setStartToken(input.LT(1));
            throw exc;
         }
      }

      /**
       * Début de document hprim
       */
      public void startDocument() throws ContentHandlerException {
        try {
            contentHandler.startDocument();
         } catch (SAXException e) {
            ContentHandlerException exc = new ContentHandlerException(e.getMessage());
            exc.setIntStream(input);
            exc.setStartToken(input.LT(1));
            throw exc;
         }
      }

      /**
       * Fin de document hprim
       */
      public void endDocument() throws ContentHandlerException {
        try {
            contentHandler.endDocument();
         } catch (SAXException e) {
            ContentHandlerException exc = new ContentHandlerException(e.getMessage());
            exc.setIntStream(input);
            exc.setStartToken(input.LT(1));
            throw exc;
         }
      }

      /**
       * Encadre l'appel du contentHandler
       */
      public void content(String content) throws ContentHandlerException {
        try {
            contentHandler.characters(content.toCharArray(),
                0, content.length());
         } catch (SAXException e) {
             ContentHandlerException exc = new ContentHandlerException(e.getMessage());
             exc.setIntStream(input);
             exc.setStartToken(input.LT(1));
             throw exc;
         }
      }

      /**
       * Méthode pour permettre d'envoyer un message d'erreur correct lors d'une erreur de type
       * MatchRegexTokenException
       * @param e
       * @param tokenNames
       */
      public String getErrorMessage(RecognitionException e, String[] tokenNames) {
        if (e instanceof MatchRegexTokenException) {
          MatchRegexTokenException mrte = (MatchRegexTokenException) e;
          return "Malformed message : " + mrte.getText() +
            " does not match " + mrte.getRegex();
        } else if (e instanceof ContentHandlerException) {
          ContentHandlerException che = (ContentHandlerException) e;
          return "Content handling error : " + che.getText();
        } else {
           return super.getErrorMessage(e, tokenNames);
        }
      }
      
      /**
       * La reconnaissance d'une erreur dans le parser 
       * lance une erreur et arrête l'ensemble du parsing immédiatement
       * @param tokenNames
       * @param e
       */
       public void emitErrorMessage(String msg) {
          throw new IllegalArgumentException(msg);
       }
        
        /**
         * Réalise un regexp
         * @param text
         * @param regex
         * @param input
         * @throws RecognitionException
         */
        public void matchRegex(String text, String regex, Token startToken) throws RecognitionException {
          Pattern my_p = Pattern.compile(regex, Pattern.DOTALL);
          Matcher my_m = my_p.matcher(text);
          if (!my_m.matches())
            throw new MatchRegexTokenException(input, startToken, text, regex);
        }




    // $ANTLR start "hprim"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:205:1: hprim : ( hprim_oru_2_2 | hprim_oru_2_1 | hprim_oru_2_0 | hprim_orm_2_2 | hprim_orm_2_1 | hprim_orm_2_0 | hprim_ora_2_2 | hprim_ora_2_1 | hprim_ora_2_0 | hprim_adm_2_2 | hprim_adm_2_1 | hprim_adm_2_0 | hprim_fac_2_2 | hprim_fac_2_1 | hprim_fac_2_0 | hprim_reg_2_2 | hprim_reg_2_1 | hprim_reg_2_0 );
    public final void hprim() throws RecognitionException {
        startDocument();
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:207:23: ( hprim_oru_2_2 | hprim_oru_2_1 | hprim_oru_2_0 | hprim_orm_2_2 | hprim_orm_2_1 | hprim_orm_2_0 | hprim_ora_2_2 | hprim_ora_2_1 | hprim_ora_2_0 | hprim_adm_2_2 | hprim_adm_2_1 | hprim_adm_2_0 | hprim_fac_2_2 | hprim_fac_2_1 | hprim_fac_2_0 | hprim_reg_2_2 | hprim_reg_2_1 | hprim_reg_2_0 )
            int alt1=18;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:208:3: hprim_oru_2_2
                    {
                    pushFollow(FOLLOW_hprim_oru_2_2_in_hprim68);
                    hprim_oru_2_2();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:208:19: hprim_oru_2_1
                    {
                    pushFollow(FOLLOW_hprim_oru_2_1_in_hprim72);
                    hprim_oru_2_1();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:208:35: hprim_oru_2_0
                    {
                    pushFollow(FOLLOW_hprim_oru_2_0_in_hprim76);
                    hprim_oru_2_0();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:209:3: hprim_orm_2_2
                    {
                    pushFollow(FOLLOW_hprim_orm_2_2_in_hprim82);
                    hprim_orm_2_2();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:209:19: hprim_orm_2_1
                    {
                    pushFollow(FOLLOW_hprim_orm_2_1_in_hprim86);
                    hprim_orm_2_1();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:209:35: hprim_orm_2_0
                    {
                    pushFollow(FOLLOW_hprim_orm_2_0_in_hprim90);
                    hprim_orm_2_0();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:210:3: hprim_ora_2_2
                    {
                    pushFollow(FOLLOW_hprim_ora_2_2_in_hprim96);
                    hprim_ora_2_2();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:210:19: hprim_ora_2_1
                    {
                    pushFollow(FOLLOW_hprim_ora_2_1_in_hprim100);
                    hprim_ora_2_1();

                    state._fsp--;


                    }
                    break;
                case 9 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:210:35: hprim_ora_2_0
                    {
                    pushFollow(FOLLOW_hprim_ora_2_0_in_hprim104);
                    hprim_ora_2_0();

                    state._fsp--;


                    }
                    break;
                case 10 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:211:3: hprim_adm_2_2
                    {
                    pushFollow(FOLLOW_hprim_adm_2_2_in_hprim110);
                    hprim_adm_2_2();

                    state._fsp--;


                    }
                    break;
                case 11 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:211:19: hprim_adm_2_1
                    {
                    pushFollow(FOLLOW_hprim_adm_2_1_in_hprim114);
                    hprim_adm_2_1();

                    state._fsp--;


                    }
                    break;
                case 12 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:211:35: hprim_adm_2_0
                    {
                    pushFollow(FOLLOW_hprim_adm_2_0_in_hprim118);
                    hprim_adm_2_0();

                    state._fsp--;


                    }
                    break;
                case 13 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:212:3: hprim_fac_2_2
                    {
                    pushFollow(FOLLOW_hprim_fac_2_2_in_hprim123);
                    hprim_fac_2_2();

                    state._fsp--;


                    }
                    break;
                case 14 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:212:19: hprim_fac_2_1
                    {
                    pushFollow(FOLLOW_hprim_fac_2_1_in_hprim127);
                    hprim_fac_2_1();

                    state._fsp--;


                    }
                    break;
                case 15 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:212:35: hprim_fac_2_0
                    {
                    pushFollow(FOLLOW_hprim_fac_2_0_in_hprim131);
                    hprim_fac_2_0();

                    state._fsp--;


                    }
                    break;
                case 16 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:213:3: hprim_reg_2_2
                    {
                    pushFollow(FOLLOW_hprim_reg_2_2_in_hprim136);
                    hprim_reg_2_2();

                    state._fsp--;


                    }
                    break;
                case 17 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:213:19: hprim_reg_2_1
                    {
                    pushFollow(FOLLOW_hprim_reg_2_1_in_hprim140);
                    hprim_reg_2_1();

                    state._fsp--;


                    }
                    break;
                case 18 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:213:35: hprim_reg_2_0
                    {
                    pushFollow(FOLLOW_hprim_reg_2_0_in_hprim144);
                    hprim_reg_2_0();

                    state._fsp--;


                    }
                    break;

            }
            endDocument();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim"



    // $ANTLR start "hprim_oru_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:216:1: hprim_oru_2_2 : line_h2_2_oru ( body_p_oru )+ line_l ( CR )? EOF ;
    public final void hprim_oru_2_2() throws RecognitionException {
        startElement("HPRIM.ORU.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:218:22: ( line_h2_2_oru ( body_p_oru )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:219:3: line_h2_2_oru ( body_p_oru )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_oru_in_hprim_oru_2_2162);
            line_h2_2_oru();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:220:3: ( body_p_oru )+
            int cnt2=0;
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==CR) ) {
                    int LA2_1 = input.LA(2);

                    if ( (LA2_1==CHARP) ) {
                        alt2=1;
                    }


                }


                switch (alt2) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:220:3: body_p_oru
            	    {
            	    pushFollow(FOLLOW_body_p_oru_in_hprim_oru_2_2166);
            	    body_p_oru();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_oru_2_2171);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:222:3: ( CR )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==CR) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:222:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_oru_2_2175); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_oru_2_2180); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_oru_2_2"



    // $ANTLR start "hprim_oru_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:225:1: hprim_oru_2_1 : line_h2_1_oru ( body_p_oru )+ line_l ( CR )? EOF ;
    public final void hprim_oru_2_1() throws RecognitionException {
        startElement("HPRIM.ORU.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:227:22: ( line_h2_1_oru ( body_p_oru )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:228:3: line_h2_1_oru ( body_p_oru )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_oru_in_hprim_oru_2_1197);
            line_h2_1_oru();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:229:3: ( body_p_oru )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==CR) ) {
                    int LA4_1 = input.LA(2);

                    if ( (LA4_1==CHARP) ) {
                        alt4=1;
                    }


                }


                switch (alt4) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:229:3: body_p_oru
            	    {
            	    pushFollow(FOLLOW_body_p_oru_in_hprim_oru_2_1201);
            	    body_p_oru();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_oru_2_1206);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:231:3: ( CR )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==CR) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:231:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_oru_2_1210); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_oru_2_1215); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_oru_2_1"



    // $ANTLR start "hprim_oru_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:234:1: hprim_oru_2_0 : line_h2_0_oru ( body_p_oru )+ line_l ( CR )? EOF ;
    public final void hprim_oru_2_0() throws RecognitionException {
        startElement("HPRIM.ORU.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:236:22: ( line_h2_0_oru ( body_p_oru )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:237:3: line_h2_0_oru ( body_p_oru )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_oru_in_hprim_oru_2_0232);
            line_h2_0_oru();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:238:3: ( body_p_oru )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==CR) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==CHARP) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:238:3: body_p_oru
            	    {
            	    pushFollow(FOLLOW_body_p_oru_in_hprim_oru_2_0236);
            	    body_p_oru();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_oru_2_0241);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:240:3: ( CR )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==CR) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:240:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_oru_2_0245); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_oru_2_0250); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_oru_2_0"



    // $ANTLR start "hprim_ora_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:244:1: hprim_ora_2_2 : line_h2_2_ora ( body_p_ora )+ line_l ( CR )? EOF ;
    public final void hprim_ora_2_2() throws RecognitionException {
        startElement("HPRIM.ORA.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:246:22: ( line_h2_2_ora ( body_p_ora )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:247:3: line_h2_2_ora ( body_p_ora )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_ora_in_hprim_ora_2_2268);
            line_h2_2_ora();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:248:3: ( body_p_ora )+
            int cnt8=0;
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==CR) ) {
                    int LA8_1 = input.LA(2);

                    if ( (LA8_1==CHARP) ) {
                        alt8=1;
                    }


                }


                switch (alt8) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:248:3: body_p_ora
            	    {
            	    pushFollow(FOLLOW_body_p_ora_in_hprim_ora_2_2272);
            	    body_p_ora();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        throw eee;
                }
                cnt8++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_ora_2_2277);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:250:3: ( CR )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==CR) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:250:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_ora_2_2281); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_ora_2_2286); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_ora_2_2"



    // $ANTLR start "hprim_ora_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:253:1: hprim_ora_2_1 : line_h2_1_ora ( body_p_ora )+ line_l ( CR )? EOF ;
    public final void hprim_ora_2_1() throws RecognitionException {
        startElement("HPRIM.ORA.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:255:22: ( line_h2_1_ora ( body_p_ora )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:256:3: line_h2_1_ora ( body_p_ora )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_ora_in_hprim_ora_2_1303);
            line_h2_1_ora();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:257:3: ( body_p_ora )+
            int cnt10=0;
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==CR) ) {
                    int LA10_1 = input.LA(2);

                    if ( (LA10_1==CHARP) ) {
                        alt10=1;
                    }


                }


                switch (alt10) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:257:3: body_p_ora
            	    {
            	    pushFollow(FOLLOW_body_p_ora_in_hprim_ora_2_1307);
            	    body_p_ora();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_ora_2_1312);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:259:3: ( CR )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==CR) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:259:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_ora_2_1316); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_ora_2_1321); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_ora_2_1"



    // $ANTLR start "hprim_ora_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:262:1: hprim_ora_2_0 : line_h2_0_ora ( body_p_ora )+ line_l ( CR )? EOF ;
    public final void hprim_ora_2_0() throws RecognitionException {
        startElement("HPRIM.ORA.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:264:22: ( line_h2_0_ora ( body_p_ora )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:265:3: line_h2_0_ora ( body_p_ora )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_ora_in_hprim_ora_2_0338);
            line_h2_0_ora();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:266:3: ( body_p_ora )+
            int cnt12=0;
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==CR) ) {
                    int LA12_1 = input.LA(2);

                    if ( (LA12_1==CHARP) ) {
                        alt12=1;
                    }


                }


                switch (alt12) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:266:3: body_p_ora
            	    {
            	    pushFollow(FOLLOW_body_p_ora_in_hprim_ora_2_0342);
            	    body_p_ora();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_ora_2_0347);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:268:3: ( CR )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==CR) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:268:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_ora_2_0351); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_ora_2_0356); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_ora_2_0"



    // $ANTLR start "hprim_orm_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:272:1: hprim_orm_2_2 : line_h2_2_orm ( body_p_orm )+ line_l ( CR )? EOF ;
    public final void hprim_orm_2_2() throws RecognitionException {
        startElement("HPRIM.ORM.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:274:22: ( line_h2_2_orm ( body_p_orm )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:275:3: line_h2_2_orm ( body_p_orm )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_orm_in_hprim_orm_2_2374);
            line_h2_2_orm();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:276:3: ( body_p_orm )+
            int cnt14=0;
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==CR) ) {
                    int LA14_1 = input.LA(2);

                    if ( (LA14_1==CHARP) ) {
                        alt14=1;
                    }


                }


                switch (alt14) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:276:3: body_p_orm
            	    {
            	    pushFollow(FOLLOW_body_p_orm_in_hprim_orm_2_2378);
            	    body_p_orm();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt14 >= 1 ) break loop14;
                        EarlyExitException eee =
                            new EarlyExitException(14, input);
                        throw eee;
                }
                cnt14++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_orm_2_2383);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:278:3: ( CR )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==CR) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:278:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_orm_2_2387); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_orm_2_2392); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_orm_2_2"



    // $ANTLR start "hprim_orm_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:281:1: hprim_orm_2_1 : line_h2_1_orm ( body_p_orm )+ line_l ( CR )? EOF ;
    public final void hprim_orm_2_1() throws RecognitionException {
        startElement("HPRIM.ORM.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:283:22: ( line_h2_1_orm ( body_p_orm )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:284:3: line_h2_1_orm ( body_p_orm )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_orm_in_hprim_orm_2_1409);
            line_h2_1_orm();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:285:3: ( body_p_orm )+
            int cnt16=0;
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==CR) ) {
                    int LA16_1 = input.LA(2);

                    if ( (LA16_1==CHARP) ) {
                        alt16=1;
                    }


                }


                switch (alt16) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:285:3: body_p_orm
            	    {
            	    pushFollow(FOLLOW_body_p_orm_in_hprim_orm_2_1413);
            	    body_p_orm();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt16 >= 1 ) break loop16;
                        EarlyExitException eee =
                            new EarlyExitException(16, input);
                        throw eee;
                }
                cnt16++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_orm_2_1418);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:287:3: ( CR )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==CR) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:287:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_orm_2_1422); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_orm_2_1427); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_orm_2_1"



    // $ANTLR start "hprim_orm_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:290:1: hprim_orm_2_0 : line_h2_0_orm ( body_p_orm )+ line_l ( CR )? EOF ;
    public final void hprim_orm_2_0() throws RecognitionException {
        startElement("HPRIM.ORM.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:292:22: ( line_h2_0_orm ( body_p_orm )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:293:3: line_h2_0_orm ( body_p_orm )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_orm_in_hprim_orm_2_0444);
            line_h2_0_orm();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:294:3: ( body_p_orm )+
            int cnt18=0;
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==CR) ) {
                    int LA18_1 = input.LA(2);

                    if ( (LA18_1==CHARP) ) {
                        alt18=1;
                    }


                }


                switch (alt18) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:294:3: body_p_orm
            	    {
            	    pushFollow(FOLLOW_body_p_orm_in_hprim_orm_2_0448);
            	    body_p_orm();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt18 >= 1 ) break loop18;
                        EarlyExitException eee =
                            new EarlyExitException(18, input);
                        throw eee;
                }
                cnt18++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_orm_2_0453);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:296:3: ( CR )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==CR) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:296:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_orm_2_0457); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_orm_2_0462); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_orm_2_0"



    // $ANTLR start "hprim_adm_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:300:1: hprim_adm_2_2 : line_h2_2_adm ( body_p_adm )+ line_l ( CR )? EOF ;
    public final void hprim_adm_2_2() throws RecognitionException {
        startElement("HPRIM.ADM.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:302:22: ( line_h2_2_adm ( body_p_adm )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:303:3: line_h2_2_adm ( body_p_adm )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_adm_in_hprim_adm_2_2480);
            line_h2_2_adm();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:304:3: ( body_p_adm )+
            int cnt20=0;
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==CR) ) {
                    int LA20_1 = input.LA(2);

                    if ( (LA20_1==CHARP) ) {
                        alt20=1;
                    }


                }


                switch (alt20) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:304:3: body_p_adm
            	    {
            	    pushFollow(FOLLOW_body_p_adm_in_hprim_adm_2_2484);
            	    body_p_adm();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt20 >= 1 ) break loop20;
                        EarlyExitException eee =
                            new EarlyExitException(20, input);
                        throw eee;
                }
                cnt20++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_adm_2_2489);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:306:3: ( CR )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==CR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:306:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_adm_2_2493); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_adm_2_2498); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_adm_2_2"



    // $ANTLR start "hprim_adm_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:309:1: hprim_adm_2_1 : line_h2_1_adm ( body_p_adm )+ line_l ( CR )? EOF ;
    public final void hprim_adm_2_1() throws RecognitionException {
        startElement("HPRIM.ADM.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:311:22: ( line_h2_1_adm ( body_p_adm )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:312:3: line_h2_1_adm ( body_p_adm )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_adm_in_hprim_adm_2_1515);
            line_h2_1_adm();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:313:3: ( body_p_adm )+
            int cnt22=0;
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==CR) ) {
                    int LA22_1 = input.LA(2);

                    if ( (LA22_1==CHARP) ) {
                        alt22=1;
                    }


                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:313:3: body_p_adm
            	    {
            	    pushFollow(FOLLOW_body_p_adm_in_hprim_adm_2_1519);
            	    body_p_adm();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt22 >= 1 ) break loop22;
                        EarlyExitException eee =
                            new EarlyExitException(22, input);
                        throw eee;
                }
                cnt22++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_adm_2_1524);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:315:3: ( CR )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==CR) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:315:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_adm_2_1528); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_adm_2_1533); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_adm_2_1"



    // $ANTLR start "hprim_adm_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:318:1: hprim_adm_2_0 : line_h2_0_adm ( body_p_adm )+ line_l ( CR )? EOF ;
    public final void hprim_adm_2_0() throws RecognitionException {
        startElement("HPRIM.ADM.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:320:22: ( line_h2_0_adm ( body_p_adm )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:321:3: line_h2_0_adm ( body_p_adm )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_adm_in_hprim_adm_2_0550);
            line_h2_0_adm();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:322:3: ( body_p_adm )+
            int cnt24=0;
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==CR) ) {
                    int LA24_1 = input.LA(2);

                    if ( (LA24_1==CHARP) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:322:3: body_p_adm
            	    {
            	    pushFollow(FOLLOW_body_p_adm_in_hprim_adm_2_0554);
            	    body_p_adm();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt24 >= 1 ) break loop24;
                        EarlyExitException eee =
                            new EarlyExitException(24, input);
                        throw eee;
                }
                cnt24++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_adm_2_0559);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:324:3: ( CR )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==CR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:324:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_adm_2_0563); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_adm_2_0568); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_adm_2_0"



    // $ANTLR start "hprim_fac_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:328:1: hprim_fac_2_2 : line_h2_2_fac ( body_p_fac )+ line_l ( CR )? EOF ;
    public final void hprim_fac_2_2() throws RecognitionException {
        startElement("HPRIM.FAC.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:330:22: ( line_h2_2_fac ( body_p_fac )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:331:3: line_h2_2_fac ( body_p_fac )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_fac_in_hprim_fac_2_2586);
            line_h2_2_fac();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:332:3: ( body_p_fac )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==CR) ) {
                    int LA26_1 = input.LA(2);

                    if ( (LA26_1==CHARP) ) {
                        alt26=1;
                    }


                }


                switch (alt26) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:332:3: body_p_fac
            	    {
            	    pushFollow(FOLLOW_body_p_fac_in_hprim_fac_2_2590);
            	    body_p_fac();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_fac_2_2595);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:334:3: ( CR )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==CR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:334:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_fac_2_2599); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_fac_2_2604); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_fac_2_2"



    // $ANTLR start "hprim_fac_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:337:1: hprim_fac_2_1 : line_h2_1_fac ( body_p_fac )+ line_l ( CR )? EOF ;
    public final void hprim_fac_2_1() throws RecognitionException {
        startElement("HPRIM.FAC.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:339:22: ( line_h2_1_fac ( body_p_fac )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:340:3: line_h2_1_fac ( body_p_fac )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_fac_in_hprim_fac_2_1621);
            line_h2_1_fac();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:341:3: ( body_p_fac )+
            int cnt28=0;
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==CR) ) {
                    int LA28_1 = input.LA(2);

                    if ( (LA28_1==CHARP) ) {
                        alt28=1;
                    }


                }


                switch (alt28) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:341:3: body_p_fac
            	    {
            	    pushFollow(FOLLOW_body_p_fac_in_hprim_fac_2_1625);
            	    body_p_fac();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt28 >= 1 ) break loop28;
                        EarlyExitException eee =
                            new EarlyExitException(28, input);
                        throw eee;
                }
                cnt28++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_fac_2_1630);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:343:3: ( CR )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==CR) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:343:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_fac_2_1634); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_fac_2_1639); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_fac_2_1"



    // $ANTLR start "hprim_fac_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:346:1: hprim_fac_2_0 : line_h2_0_fac ( body_p_fac )+ line_l ( CR )? EOF ;
    public final void hprim_fac_2_0() throws RecognitionException {
        startElement("HPRIM.FAC.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:348:22: ( line_h2_0_fac ( body_p_fac )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:349:3: line_h2_0_fac ( body_p_fac )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_fac_in_hprim_fac_2_0656);
            line_h2_0_fac();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:350:3: ( body_p_fac )+
            int cnt30=0;
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==CR) ) {
                    int LA30_1 = input.LA(2);

                    if ( (LA30_1==CHARP) ) {
                        alt30=1;
                    }


                }


                switch (alt30) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:350:3: body_p_fac
            	    {
            	    pushFollow(FOLLOW_body_p_fac_in_hprim_fac_2_0660);
            	    body_p_fac();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        throw eee;
                }
                cnt30++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_fac_2_0665);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:352:3: ( CR )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==CR) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:352:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_fac_2_0669); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_fac_2_0674); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_fac_2_0"



    // $ANTLR start "hprim_reg_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:356:1: hprim_reg_2_2 : line_h2_2_reg ( body_p_reg )+ line_l ( CR )? EOF ;
    public final void hprim_reg_2_2() throws RecognitionException {
        startElement("HPRIM.REG.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:358:22: ( line_h2_2_reg ( body_p_reg )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:359:3: line_h2_2_reg ( body_p_reg )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_reg_in_hprim_reg_2_2692);
            line_h2_2_reg();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:360:3: ( body_p_reg )+
            int cnt32=0;
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==CR) ) {
                    int LA32_1 = input.LA(2);

                    if ( (LA32_1==CHARP) ) {
                        alt32=1;
                    }


                }


                switch (alt32) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:360:3: body_p_reg
            	    {
            	    pushFollow(FOLLOW_body_p_reg_in_hprim_reg_2_2696);
            	    body_p_reg();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt32 >= 1 ) break loop32;
                        EarlyExitException eee =
                            new EarlyExitException(32, input);
                        throw eee;
                }
                cnt32++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_reg_2_2701);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:362:3: ( CR )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==CR) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:362:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_reg_2_2705); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_reg_2_2710); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_reg_2_2"



    // $ANTLR start "hprim_reg_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:365:1: hprim_reg_2_1 : line_h2_1_reg ( body_p_reg )+ line_l ( CR )? EOF ;
    public final void hprim_reg_2_1() throws RecognitionException {
        startElement("HPRIM.REG.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:367:22: ( line_h2_1_reg ( body_p_reg )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:368:3: line_h2_1_reg ( body_p_reg )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_reg_in_hprim_reg_2_1727);
            line_h2_1_reg();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:369:3: ( body_p_reg )+
            int cnt34=0;
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==CR) ) {
                    int LA34_1 = input.LA(2);

                    if ( (LA34_1==CHARP) ) {
                        alt34=1;
                    }


                }


                switch (alt34) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:369:3: body_p_reg
            	    {
            	    pushFollow(FOLLOW_body_p_reg_in_hprim_reg_2_1731);
            	    body_p_reg();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt34 >= 1 ) break loop34;
                        EarlyExitException eee =
                            new EarlyExitException(34, input);
                        throw eee;
                }
                cnt34++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_reg_2_1736);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:371:3: ( CR )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==CR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:371:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_reg_2_1740); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_reg_2_1745); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_reg_2_1"



    // $ANTLR start "hprim_reg_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:374:1: hprim_reg_2_0 : line_h2_0_reg ( body_p_reg )+ line_l ( CR )? EOF ;
    public final void hprim_reg_2_0() throws RecognitionException {
        startElement("HPRIM.REG.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:376:22: ( line_h2_0_reg ( body_p_reg )+ line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:377:3: line_h2_0_reg ( body_p_reg )+ line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_reg_in_hprim_reg_2_0762);
            line_h2_0_reg();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:378:3: ( body_p_reg )+
            int cnt36=0;
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==CR) ) {
                    int LA36_1 = input.LA(2);

                    if ( (LA36_1==CHARP) ) {
                        alt36=1;
                    }


                }


                switch (alt36) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:378:3: body_p_reg
            	    {
            	    pushFollow(FOLLOW_body_p_reg_in_hprim_reg_2_0766);
            	    body_p_reg();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        throw eee;
                }
                cnt36++;
            } while (true);


            pushFollow(FOLLOW_line_l_in_hprim_reg_2_0771);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:380:3: ( CR )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==CR) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:380:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_reg_2_0775); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_reg_2_0780); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_reg_2_0"



    // $ANTLR start "hprim_ns_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:384:1: hprim_ns_2_2 : line_h2_2_ns line_l ( CR )? EOF ;
    public final void hprim_ns_2_2() throws RecognitionException {
        startElement("HPRIM.NS.2.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:386:22: ( line_h2_2_ns line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:387:3: line_h2_2_ns line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_2_ns_in_hprim_ns_2_2798);
            line_h2_2_ns();

            state._fsp--;


            pushFollow(FOLLOW_line_l_in_hprim_ns_2_2802);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:389:3: ( CR )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==CR) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:389:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_ns_2_2806); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_ns_2_2811); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_ns_2_2"



    // $ANTLR start "hprim_ns_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:392:1: hprim_ns_2_1 : line_h2_1_ns line_l ( CR )? EOF ;
    public final void hprim_ns_2_1() throws RecognitionException {
        startElement("HPRIM.NS.2.1");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:394:22: ( line_h2_1_ns line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:395:3: line_h2_1_ns line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_1_ns_in_hprim_ns_2_1828);
            line_h2_1_ns();

            state._fsp--;


            pushFollow(FOLLOW_line_l_in_hprim_ns_2_1832);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:397:3: ( CR )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==CR) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:397:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_ns_2_1836); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_ns_2_1841); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_ns_2_1"



    // $ANTLR start "hprim_ns_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:400:1: hprim_ns_2_0 : line_h2_0_ns line_l ( CR )? EOF ;
    public final void hprim_ns_2_0() throws RecognitionException {
        startElement("HPRIM.NS.2.0");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:402:22: ( line_h2_0_ns line_l ( CR )? EOF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:403:3: line_h2_0_ns line_l ( CR )? EOF
            {
            pushFollow(FOLLOW_line_h2_0_ns_in_hprim_ns_2_0858);
            line_h2_0_ns();

            state._fsp--;


            pushFollow(FOLLOW_line_l_in_hprim_ns_2_0862);
            line_l();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:405:3: ( CR )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==CR) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:405:3: CR
                    {
                    match(input,CR,FOLLOW_CR_in_hprim_ns_2_0866); 

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_hprim_ns_2_0871); 

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hprim_ns_2_0"



    // $ANTLR start "body_p_orm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:409:1: body_p_orm : line_p ( line_c )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+ ;
    public final void body_p_orm() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:409:12: ( line_p ( line_c )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:410:3: line_p ( line_c )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+
            {
            pushFollow(FOLLOW_line_p_in_body_p_orm882);
            line_p();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:410:10: ( line_c )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==CR) ) {
                    int LA41_1 = input.LA(2);

                    if ( (LA41_1==CHARC) ) {
                        alt41=1;
                    }


                }


                switch (alt41) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:410:11: line_c
            	    {
            	    pushFollow(FOLLOW_line_c_in_body_p_orm885);
            	    line_c();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:411:3: ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==CR) ) {
                    int LA45_1 = input.LA(2);

                    if ( (LA45_1==CHARO) ) {
                        alt45=1;
                    }


                }


                switch (alt45) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:411:4: line_obr ( line_c )* ( line_obx ( line_c )* )*
            	    {
            	    pushFollow(FOLLOW_line_obr_in_body_p_orm892);
            	    line_obr();

            	    state._fsp--;


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:411:13: ( line_c )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        int LA42_0 = input.LA(1);

            	        if ( (LA42_0==CR) ) {
            	            int LA42_1 = input.LA(2);

            	            if ( (LA42_1==CHARC) ) {
            	                alt42=1;
            	            }


            	        }


            	        switch (alt42) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:411:14: line_c
            	    	    {
            	    	    pushFollow(FOLLOW_line_c_in_body_p_orm895);
            	    	    line_c();

            	    	    state._fsp--;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:412:4: ( line_obx ( line_c )* )*
            	    loop44:
            	    do {
            	        int alt44=2;
            	        int LA44_0 = input.LA(1);

            	        if ( (LA44_0==CR) ) {
            	            int LA44_1 = input.LA(2);

            	            if ( (LA44_1==CHARO) ) {
            	                int LA44_3 = input.LA(3);

            	                if ( (LA44_3==CHARB) ) {
            	                    int LA44_4 = input.LA(4);

            	                    if ( (LA44_4==CHARX) ) {
            	                        alt44=1;
            	                    }


            	                }


            	            }


            	        }


            	        switch (alt44) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:412:5: line_obx ( line_c )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_obx_in_body_p_orm903);
            	    	    line_obx();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:412:14: ( line_c )*
            	    	    loop43:
            	    	    do {
            	    	        int alt43=2;
            	    	        int LA43_0 = input.LA(1);

            	    	        if ( (LA43_0==CR) ) {
            	    	            int LA43_1 = input.LA(2);

            	    	            if ( (LA43_1==CHARC) ) {
            	    	                alt43=1;
            	    	            }


            	    	        }


            	    	        switch (alt43) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:412:15: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_orm906);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop43;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop44;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body_p_orm"



    // $ANTLR start "body_p_ora"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:416:1: body_p_ora : line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+ )+ ;
    public final void body_p_ora() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:416:12: ( line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+ )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:417:3: line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+ )+
            {
            pushFollow(FOLLOW_line_p_in_body_p_ora926);
            line_p();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:417:10: ( line_c )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==CR) ) {
                    int LA46_1 = input.LA(2);

                    if ( (LA46_1==CHARC) ) {
                        alt46=1;
                    }


                }


                switch (alt46) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:417:11: line_c
            	    {
            	    pushFollow(FOLLOW_line_c_in_body_p_ora929);
            	    line_c();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:418:3: ( line_ap ( line_c )* ( line_ac ( line_c )* )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+ )+
            int cnt54=0;
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==CR) ) {
                    int LA54_1 = input.LA(2);

                    if ( (LA54_1==CHARA) ) {
                        alt54=1;
                    }


                }


                switch (alt54) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:418:4: line_ap ( line_c )* ( line_ac ( line_c )* )* ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+
            	    {
            	    pushFollow(FOLLOW_line_ap_in_body_p_ora936);
            	    line_ap();

            	    state._fsp--;


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:418:12: ( line_c )*
            	    loop47:
            	    do {
            	        int alt47=2;
            	        int LA47_0 = input.LA(1);

            	        if ( (LA47_0==CR) ) {
            	            int LA47_1 = input.LA(2);

            	            if ( (LA47_1==CHARC) ) {
            	                alt47=1;
            	            }


            	        }


            	        switch (alt47) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:418:13: line_c
            	    	    {
            	    	    pushFollow(FOLLOW_line_c_in_body_p_ora939);
            	    	    line_c();

            	    	    state._fsp--;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop47;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:419:4: ( line_ac ( line_c )* )*
            	    loop49:
            	    do {
            	        int alt49=2;
            	        int LA49_0 = input.LA(1);

            	        if ( (LA49_0==CR) ) {
            	            int LA49_1 = input.LA(2);

            	            if ( (LA49_1==CHARA) ) {
            	                alt49=1;
            	            }


            	        }


            	        switch (alt49) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:419:5: line_ac ( line_c )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_ac_in_body_p_ora947);
            	    	    line_ac();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:419:13: ( line_c )*
            	    	    loop48:
            	    	    do {
            	    	        int alt48=2;
            	    	        int LA48_0 = input.LA(1);

            	    	        if ( (LA48_0==CR) ) {
            	    	            int LA48_1 = input.LA(2);

            	    	            if ( (LA48_1==CHARC) ) {
            	    	                alt48=1;
            	    	            }


            	    	        }


            	    	        switch (alt48) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:419:14: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_ora950);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop48;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop49;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:420:4: ( line_obr ( line_c )* ( line_obx ( line_c )* )* )+
            	    int cnt53=0;
            	    loop53:
            	    do {
            	        int alt53=2;
            	        int LA53_0 = input.LA(1);

            	        if ( (LA53_0==CR) ) {
            	            int LA53_1 = input.LA(2);

            	            if ( (LA53_1==CHARO) ) {
            	                alt53=1;
            	            }


            	        }


            	        switch (alt53) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:420:5: line_obr ( line_c )* ( line_obx ( line_c )* )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_obr_in_body_p_ora960);
            	    	    line_obr();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:420:14: ( line_c )*
            	    	    loop50:
            	    	    do {
            	    	        int alt50=2;
            	    	        int LA50_0 = input.LA(1);

            	    	        if ( (LA50_0==CR) ) {
            	    	            int LA50_1 = input.LA(2);

            	    	            if ( (LA50_1==CHARC) ) {
            	    	                alt50=1;
            	    	            }


            	    	        }


            	    	        switch (alt50) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:420:15: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_ora963);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop50;
            	    	        }
            	    	    } while (true);


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:421:5: ( line_obx ( line_c )* )*
            	    	    loop52:
            	    	    do {
            	    	        int alt52=2;
            	    	        int LA52_0 = input.LA(1);

            	    	        if ( (LA52_0==CR) ) {
            	    	            int LA52_1 = input.LA(2);

            	    	            if ( (LA52_1==CHARO) ) {
            	    	                int LA52_3 = input.LA(3);

            	    	                if ( (LA52_3==CHARB) ) {
            	    	                    int LA52_4 = input.LA(4);

            	    	                    if ( (LA52_4==CHARX) ) {
            	    	                        alt52=1;
            	    	                    }


            	    	                }


            	    	            }


            	    	        }


            	    	        switch (alt52) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:421:6: line_obx ( line_c )*
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_obx_in_body_p_ora972);
            	    	    	    line_obx();

            	    	    	    state._fsp--;


            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:421:15: ( line_c )*
            	    	    	    loop51:
            	    	    	    do {
            	    	    	        int alt51=2;
            	    	    	        int LA51_0 = input.LA(1);

            	    	    	        if ( (LA51_0==CR) ) {
            	    	    	            int LA51_1 = input.LA(2);

            	    	    	            if ( (LA51_1==CHARC) ) {
            	    	    	                alt51=1;
            	    	    	            }


            	    	    	        }


            	    	    	        switch (alt51) {
            	    	    	    	case 1 :
            	    	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:421:16: line_c
            	    	    	    	    {
            	    	    	    	    pushFollow(FOLLOW_line_c_in_body_p_ora975);
            	    	    	    	    line_c();

            	    	    	    	    state._fsp--;


            	    	    	    	    }
            	    	    	    	    break;

            	    	    	    	default :
            	    	    	    	    break loop51;
            	    	    	        }
            	    	    	    } while (true);


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop52;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt53 >= 1 ) break loop53;
            	                EarlyExitException eee =
            	                    new EarlyExitException(53, input);
            	                throw eee;
            	        }
            	        cnt53++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt54 >= 1 ) break loop54;
                        EarlyExitException eee =
                            new EarlyExitException(54, input);
                        throw eee;
                }
                cnt54++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body_p_ora"



    // $ANTLR start "body_p_oru"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:426:1: body_p_oru : line_p ( line_c )* ( line_obr ( line_c )* ( line_obx ( line_c )* )+ )+ ;
    public final void body_p_oru() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:426:12: ( line_p ( line_c )* ( line_obr ( line_c )* ( line_obx ( line_c )* )+ )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:427:3: line_p ( line_c )* ( line_obr ( line_c )* ( line_obx ( line_c )* )+ )+
            {
            pushFollow(FOLLOW_line_p_in_body_p_oru1001);
            line_p();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:427:10: ( line_c )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==CR) ) {
                    int LA55_1 = input.LA(2);

                    if ( (LA55_1==CHARC) ) {
                        alt55=1;
                    }


                }


                switch (alt55) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:427:11: line_c
            	    {
            	    pushFollow(FOLLOW_line_c_in_body_p_oru1004);
            	    line_c();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:428:3: ( line_obr ( line_c )* ( line_obx ( line_c )* )+ )+
            int cnt59=0;
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==CR) ) {
                    int LA59_1 = input.LA(2);

                    if ( (LA59_1==CHARO) ) {
                        alt59=1;
                    }


                }


                switch (alt59) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:428:4: line_obr ( line_c )* ( line_obx ( line_c )* )+
            	    {
            	    pushFollow(FOLLOW_line_obr_in_body_p_oru1011);
            	    line_obr();

            	    state._fsp--;


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:428:13: ( line_c )*
            	    loop56:
            	    do {
            	        int alt56=2;
            	        int LA56_0 = input.LA(1);

            	        if ( (LA56_0==CR) ) {
            	            int LA56_1 = input.LA(2);

            	            if ( (LA56_1==CHARC) ) {
            	                alt56=1;
            	            }


            	        }


            	        switch (alt56) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:428:14: line_c
            	    	    {
            	    	    pushFollow(FOLLOW_line_c_in_body_p_oru1014);
            	    	    line_c();

            	    	    state._fsp--;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop56;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:429:4: ( line_obx ( line_c )* )+
            	    int cnt58=0;
            	    loop58:
            	    do {
            	        int alt58=2;
            	        int LA58_0 = input.LA(1);

            	        if ( (LA58_0==CR) ) {
            	            int LA58_1 = input.LA(2);

            	            if ( (LA58_1==CHARO) ) {
            	                int LA58_3 = input.LA(3);

            	                if ( (LA58_3==CHARB) ) {
            	                    int LA58_4 = input.LA(4);

            	                    if ( (LA58_4==CHARX) ) {
            	                        alt58=1;
            	                    }


            	                }


            	            }


            	        }


            	        switch (alt58) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:429:5: line_obx ( line_c )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_obx_in_body_p_oru1022);
            	    	    line_obx();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:429:14: ( line_c )*
            	    	    loop57:
            	    	    do {
            	    	        int alt57=2;
            	    	        int LA57_0 = input.LA(1);

            	    	        if ( (LA57_0==CR) ) {
            	    	            int LA57_1 = input.LA(2);

            	    	            if ( (LA57_1==CHARC) ) {
            	    	                alt57=1;
            	    	            }


            	    	        }


            	    	        switch (alt57) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:429:15: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_oru1025);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop57;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt58 >= 1 ) break loop58;
            	                EarlyExitException eee =
            	                    new EarlyExitException(58, input);
            	                throw eee;
            	        }
            	        cnt58++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt59 >= 1 ) break loop59;
                        EarlyExitException eee =
                            new EarlyExitException(59, input);
                        throw eee;
                }
                cnt59++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body_p_oru"



    // $ANTLR start "body_p_adm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:433:1: body_p_adm : line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* )* ;
    public final void body_p_adm() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:433:12: ( line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* )* )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:434:3: line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* )*
            {
            pushFollow(FOLLOW_line_p_in_body_p_adm1045);
            line_p();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:434:10: ( line_c )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==CR) ) {
                    int LA60_1 = input.LA(2);

                    if ( (LA60_1==CHARC) ) {
                        alt60=1;
                    }


                }


                switch (alt60) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:434:11: line_c
            	    {
            	    pushFollow(FOLLOW_line_c_in_body_p_adm1048);
            	    line_c();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:435:3: ( line_ap ( line_c )* ( line_ac ( line_c )* )* )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==CR) ) {
                    int LA64_1 = input.LA(2);

                    if ( (LA64_1==CHARA) ) {
                        alt64=1;
                    }


                }


                switch (alt64) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:435:4: line_ap ( line_c )* ( line_ac ( line_c )* )*
            	    {
            	    pushFollow(FOLLOW_line_ap_in_body_p_adm1055);
            	    line_ap();

            	    state._fsp--;


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:435:12: ( line_c )*
            	    loop61:
            	    do {
            	        int alt61=2;
            	        int LA61_0 = input.LA(1);

            	        if ( (LA61_0==CR) ) {
            	            int LA61_1 = input.LA(2);

            	            if ( (LA61_1==CHARC) ) {
            	                alt61=1;
            	            }


            	        }


            	        switch (alt61) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:435:13: line_c
            	    	    {
            	    	    pushFollow(FOLLOW_line_c_in_body_p_adm1058);
            	    	    line_c();

            	    	    state._fsp--;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop61;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:436:4: ( line_ac ( line_c )* )*
            	    loop63:
            	    do {
            	        int alt63=2;
            	        int LA63_0 = input.LA(1);

            	        if ( (LA63_0==CR) ) {
            	            int LA63_1 = input.LA(2);

            	            if ( (LA63_1==CHARA) ) {
            	                int LA63_3 = input.LA(3);

            	                if ( (LA63_3==CHARC) ) {
            	                    alt63=1;
            	                }


            	            }


            	        }


            	        switch (alt63) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:436:5: line_ac ( line_c )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_ac_in_body_p_adm1066);
            	    	    line_ac();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:436:13: ( line_c )*
            	    	    loop62:
            	    	    do {
            	    	        int alt62=2;
            	    	        int LA62_0 = input.LA(1);

            	    	        if ( (LA62_0==CR) ) {
            	    	            int LA62_1 = input.LA(2);

            	    	            if ( (LA62_1==CHARC) ) {
            	    	                alt62=1;
            	    	            }


            	    	        }


            	    	        switch (alt62) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:436:14: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_adm1069);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop62;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop63;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body_p_adm"



    // $ANTLR start "body_p_fac"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:440:1: body_p_fac : line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* )? ( line_fac ( line_c )* ( line_reg ( line_c )* )* ( line_act ( line_c )* )* )+ ;
    public final void body_p_fac() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:440:12: ( line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* )? ( line_fac ( line_c )* ( line_reg ( line_c )* )* ( line_act ( line_c )* )* )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:441:3: line_p ( line_c )* ( line_ap ( line_c )* ( line_ac ( line_c )* )* )? ( line_fac ( line_c )* ( line_reg ( line_c )* )* ( line_act ( line_c )* )* )+
            {
            pushFollow(FOLLOW_line_p_in_body_p_fac1089);
            line_p();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:441:10: ( line_c )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==CR) ) {
                    int LA65_1 = input.LA(2);

                    if ( (LA65_1==CHARC) ) {
                        alt65=1;
                    }


                }


                switch (alt65) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:441:11: line_c
            	    {
            	    pushFollow(FOLLOW_line_c_in_body_p_fac1092);
            	    line_c();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:442:3: ( line_ap ( line_c )* ( line_ac ( line_c )* )* )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==CR) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==CHARA) ) {
                    alt69=1;
                }
            }
            switch (alt69) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:442:4: line_ap ( line_c )* ( line_ac ( line_c )* )*
                    {
                    pushFollow(FOLLOW_line_ap_in_body_p_fac1099);
                    line_ap();

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:442:12: ( line_c )*
                    loop66:
                    do {
                        int alt66=2;
                        int LA66_0 = input.LA(1);

                        if ( (LA66_0==CR) ) {
                            int LA66_1 = input.LA(2);

                            if ( (LA66_1==CHARC) ) {
                                alt66=1;
                            }


                        }


                        switch (alt66) {
                    	case 1 :
                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:442:13: line_c
                    	    {
                    	    pushFollow(FOLLOW_line_c_in_body_p_fac1102);
                    	    line_c();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop66;
                        }
                    } while (true);


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:443:4: ( line_ac ( line_c )* )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==CR) ) {
                            int LA68_1 = input.LA(2);

                            if ( (LA68_1==CHARA) ) {
                                alt68=1;
                            }


                        }


                        switch (alt68) {
                    	case 1 :
                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:443:5: line_ac ( line_c )*
                    	    {
                    	    pushFollow(FOLLOW_line_ac_in_body_p_fac1110);
                    	    line_ac();

                    	    state._fsp--;


                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:443:13: ( line_c )*
                    	    loop67:
                    	    do {
                    	        int alt67=2;
                    	        int LA67_0 = input.LA(1);

                    	        if ( (LA67_0==CR) ) {
                    	            int LA67_1 = input.LA(2);

                    	            if ( (LA67_1==CHARC) ) {
                    	                alt67=1;
                    	            }


                    	        }


                    	        switch (alt67) {
                    	    	case 1 :
                    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:443:14: line_c
                    	    	    {
                    	    	    pushFollow(FOLLOW_line_c_in_body_p_fac1113);
                    	    	    line_c();

                    	    	    state._fsp--;


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop67;
                    	        }
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }
                    break;

            }


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:445:3: ( line_fac ( line_c )* ( line_reg ( line_c )* )* ( line_act ( line_c )* )* )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==CR) ) {
                    int LA75_1 = input.LA(2);

                    if ( (LA75_1==CHARF) ) {
                        alt75=1;
                    }


                }


                switch (alt75) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:445:4: line_fac ( line_c )* ( line_reg ( line_c )* )* ( line_act ( line_c )* )*
            	    {
            	    pushFollow(FOLLOW_line_fac_in_body_p_fac1127);
            	    line_fac();

            	    state._fsp--;


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:445:13: ( line_c )*
            	    loop70:
            	    do {
            	        int alt70=2;
            	        int LA70_0 = input.LA(1);

            	        if ( (LA70_0==CR) ) {
            	            int LA70_1 = input.LA(2);

            	            if ( (LA70_1==CHARC) ) {
            	                alt70=1;
            	            }


            	        }


            	        switch (alt70) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:445:14: line_c
            	    	    {
            	    	    pushFollow(FOLLOW_line_c_in_body_p_fac1130);
            	    	    line_c();

            	    	    state._fsp--;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop70;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:446:4: ( line_reg ( line_c )* )*
            	    loop72:
            	    do {
            	        int alt72=2;
            	        int LA72_0 = input.LA(1);

            	        if ( (LA72_0==CR) ) {
            	            int LA72_1 = input.LA(2);

            	            if ( (LA72_1==CHARR) ) {
            	                alt72=1;
            	            }


            	        }


            	        switch (alt72) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:446:5: line_reg ( line_c )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_reg_in_body_p_fac1138);
            	    	    line_reg();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:446:14: ( line_c )*
            	    	    loop71:
            	    	    do {
            	    	        int alt71=2;
            	    	        int LA71_0 = input.LA(1);

            	    	        if ( (LA71_0==CR) ) {
            	    	            int LA71_1 = input.LA(2);

            	    	            if ( (LA71_1==CHARC) ) {
            	    	                alt71=1;
            	    	            }


            	    	        }


            	    	        switch (alt71) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:446:15: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_fac1141);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop71;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop72;
            	        }
            	    } while (true);


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:447:4: ( line_act ( line_c )* )*
            	    loop74:
            	    do {
            	        int alt74=2;
            	        int LA74_0 = input.LA(1);

            	        if ( (LA74_0==CR) ) {
            	            int LA74_1 = input.LA(2);

            	            if ( (LA74_1==CHARA) ) {
            	                alt74=1;
            	            }


            	        }


            	        switch (alt74) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:447:5: line_act ( line_c )*
            	    	    {
            	    	    pushFollow(FOLLOW_line_act_in_body_p_fac1151);
            	    	    line_act();

            	    	    state._fsp--;


            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:447:14: ( line_c )*
            	    	    loop73:
            	    	    do {
            	    	        int alt73=2;
            	    	        int LA73_0 = input.LA(1);

            	    	        if ( (LA73_0==CR) ) {
            	    	            int LA73_1 = input.LA(2);

            	    	            if ( (LA73_1==CHARC) ) {
            	    	                alt73=1;
            	    	            }


            	    	        }


            	    	        switch (alt73) {
            	    	    	case 1 :
            	    	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:447:15: line_c
            	    	    	    {
            	    	    	    pushFollow(FOLLOW_line_c_in_body_p_fac1154);
            	    	    	    line_c();

            	    	    	    state._fsp--;


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    break loop73;
            	    	        }
            	    	    } while (true);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop74;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body_p_fac"



    // $ANTLR start "body_p_reg"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:451:1: body_p_reg : line_p ( line_c )* ( line_reg ( line_c )* )+ ;
    public final void body_p_reg() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:451:12: ( line_p ( line_c )* ( line_reg ( line_c )* )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:452:3: line_p ( line_c )* ( line_reg ( line_c )* )+
            {
            pushFollow(FOLLOW_line_p_in_body_p_reg1174);
            line_p();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:452:10: ( line_c )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==CR) ) {
                    int LA76_1 = input.LA(2);

                    if ( (LA76_1==CHARC) ) {
                        alt76=1;
                    }


                }


                switch (alt76) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:452:11: line_c
            	    {
            	    pushFollow(FOLLOW_line_c_in_body_p_reg1177);
            	    line_c();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:453:3: ( line_reg ( line_c )* )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==CR) ) {
                    int LA78_1 = input.LA(2);

                    if ( (LA78_1==CHARR) ) {
                        alt78=1;
                    }


                }


                switch (alt78) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:453:4: line_reg ( line_c )*
            	    {
            	    pushFollow(FOLLOW_line_reg_in_body_p_reg1184);
            	    line_reg();

            	    state._fsp--;


            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:453:13: ( line_c )*
            	    loop77:
            	    do {
            	        int alt77=2;
            	        int LA77_0 = input.LA(1);

            	        if ( (LA77_0==CR) ) {
            	            int LA77_1 = input.LA(2);

            	            if ( (LA77_1==CHARC) ) {
            	                alt77=1;
            	            }


            	        }


            	        switch (alt77) {
            	    	case 1 :
            	    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:453:14: line_c
            	    	    {
            	    	    pushFollow(FOLLOW_line_c_in_body_p_reg1187);
            	    	    line_c();

            	    	    state._fsp--;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop77;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body_p_reg"



    // $ANTLR start "start_line_h"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:458:1: start_line_h : delimiters DELIMITER1 st_sized_optionnal[\"H.3\", 12] DELIMITER1 st_sized_optionnal[\"H.4\", 12] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_2[\"H.5\", 40] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"H.6\", 100] ;
    public final void start_line_h() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:458:14: ( delimiters DELIMITER1 st_sized_optionnal[\"H.3\", 12] DELIMITER1 st_sized_optionnal[\"H.4\", 12] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_2[\"H.5\", 40] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"H.6\", 100] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:459:3: delimiters DELIMITER1 st_sized_optionnal[\"H.3\", 12] DELIMITER1 st_sized_optionnal[\"H.4\", 12] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_2[\"H.5\", 40] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"H.6\", 100]
            {
            startElement("H.1");content("H");endElement();

            pushFollow(FOLLOW_delimiters_in_start_line_h1206);
            delimiters();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_start_line_h1210); 

            pushFollow(FOLLOW_st_sized_optionnal_in_start_line_h1212);
            st_sized_optionnal("H.3", 12);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_start_line_h1217); 

            pushFollow(FOLLOW_st_sized_optionnal_in_start_line_h1219);
            st_sized_optionnal("H.4", 12);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_start_line_h1224); 

            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_mandatory_2_in_start_line_h1226);
            spec_sized_mult_lvl1_st_mandatory_2("H.5", 40);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_start_line_h1231); 

            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_start_line_h1233);
            spec_sized_mult_lvl1_st_optionnal_6("H.6", 100);

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "start_line_h"



    // $ANTLR start "midd_line_h"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:466:1: midd_line_h : DELIMITER1 spec_sized_tn[\"H.8\", 40] DELIMITER1 st_sized_optionnal[\"H.9\", 40] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_2[\"H.10\", 40] DELIMITER1 st_sized_optionnal[\"H.11\", 80] DELIMITER1 spec_const_7_12[\"H.12\"] ;
    public final void midd_line_h() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:466:13: ( DELIMITER1 spec_sized_tn[\"H.8\", 40] DELIMITER1 st_sized_optionnal[\"H.9\", 40] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_2[\"H.10\", 40] DELIMITER1 st_sized_optionnal[\"H.11\", 80] DELIMITER1 spec_const_7_12[\"H.12\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:467:3: DELIMITER1 spec_sized_tn[\"H.8\", 40] DELIMITER1 st_sized_optionnal[\"H.9\", 40] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_2[\"H.10\", 40] DELIMITER1 st_sized_optionnal[\"H.11\", 80] DELIMITER1 spec_const_7_12[\"H.12\"]
            {
            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_midd_line_h1245); 

            pushFollow(FOLLOW_spec_sized_tn_in_midd_line_h1247);
            spec_sized_tn("H.8", 40);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_midd_line_h1252); 

            pushFollow(FOLLOW_st_sized_optionnal_in_midd_line_h1254);
            st_sized_optionnal("H.9", 40);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_midd_line_h1259); 

            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_mandatory_2_in_midd_line_h1261);
            spec_sized_mult_lvl1_st_mandatory_2("H.10", 40);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_midd_line_h1266); 

            pushFollow(FOLLOW_st_sized_optionnal_in_midd_line_h1268);
            st_sized_optionnal("H.11", 80);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_midd_line_h1273); 

            pushFollow(FOLLOW_spec_const_7_12_in_midd_line_h1275);
            spec_const_7_12("H.12");

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "midd_line_h"



    // $ANTLR start "line_h2_2_oru"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:475:1: line_h2_2_oru : start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_oru() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:477:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:478:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_oru1296);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_oru1300); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORU_in_line_h2_2_oru1302);
            spec_const_7_7_contexte_ORU("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_oru1307);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_oru1311); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_oru1313);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_oru1318); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_oru1320);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:483:3: ( DELIMITER1 )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==DELIMITER1) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:483:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_oru1325); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_oru"



    // $ANTLR start "line_h2_1_oru"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:487:1: line_h2_1_oru : start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_oru() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:489:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:490:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_oru1346);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_oru1350); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORU_in_line_h2_1_oru1352);
            spec_const_7_7_contexte_ORU("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_oru1357);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_oru1361); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_oru1363);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_oru1368); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_oru1370);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:495:3: ( DELIMITER1 )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==DELIMITER1) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:495:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_oru1375); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_oru"



    // $ANTLR start "line_h2_0_oru"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:498:1: line_h2_0_oru : start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_oru() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:500:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:501:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORU[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_oru1395);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_oru1399); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORU_in_line_h2_0_oru1401);
            spec_const_7_7_contexte_ORU("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_oru1406);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_oru1410); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_oru1412);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_oru1417); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_oru1419);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:506:3: ( DELIMITER1 )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==DELIMITER1) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:506:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_oru1424); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_oru"



    // $ANTLR start "line_h2_2_orm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:509:1: line_h2_2_orm : start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_orm() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:511:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:512:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_orm1444);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_orm1448); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORM_in_line_h2_2_orm1450);
            spec_const_7_7_contexte_ORM("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_orm1455);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_orm1459); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_orm1461);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_orm1466); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_orm1468);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:517:3: ( DELIMITER1 )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==DELIMITER1) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:517:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_orm1473); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_orm"



    // $ANTLR start "line_h2_1_orm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:519:1: line_h2_1_orm : start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_orm() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:521:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:522:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_orm1492);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_orm1496); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORM_in_line_h2_1_orm1498);
            spec_const_7_7_contexte_ORM("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_orm1503);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_orm1507); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_orm1509);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_orm1514); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_orm1516);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:527:3: ( DELIMITER1 )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==DELIMITER1) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:527:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_orm1521); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_orm"



    // $ANTLR start "line_h2_0_orm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:529:1: line_h2_0_orm : start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_orm() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:531:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:532:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_orm1540);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_orm1544); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORM_in_line_h2_0_orm1546);
            spec_const_7_7_contexte_ORM("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_orm1551);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_orm1555); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_orm1557);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_orm1562); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_orm1564);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:537:3: ( DELIMITER1 )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DELIMITER1) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:537:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_orm1569); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_orm"



    // $ANTLR start "line_h2_2_ora"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:540:1: line_h2_2_ora : start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_ora() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:542:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:543:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_ora1589);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ora1593); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORA_in_line_h2_2_ora1595);
            spec_const_7_7_contexte_ORA("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_ora1600);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ora1604); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_ora1606);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ora1611); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_ora1613);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:548:3: ( DELIMITER1 )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DELIMITER1) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:548:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ora1618); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_ora"



    // $ANTLR start "line_h2_1_ora"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:550:1: line_h2_1_ora : start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_ora() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:552:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:553:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_ora1637);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ora1641); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORA_in_line_h2_1_ora1643);
            spec_const_7_7_contexte_ORA("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_ora1648);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ora1652); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_ora1654);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ora1659); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_ora1661);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:558:3: ( DELIMITER1 )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==DELIMITER1) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:558:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ora1666); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_ora"



    // $ANTLR start "line_h2_0_ora"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:560:1: line_h2_0_ora : start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_ora() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:562:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:563:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ORA[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_ora1685);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ora1689); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ORA_in_line_h2_0_ora1691);
            spec_const_7_7_contexte_ORA("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_ora1696);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ora1700); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_ora1702);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ora1707); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_ora1709);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:568:3: ( DELIMITER1 )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==DELIMITER1) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:568:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ora1714); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_ora"



    // $ANTLR start "line_h2_2_adm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:571:1: line_h2_2_adm : start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_adm() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:573:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:574:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_adm1734);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_adm1738); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ADM_in_line_h2_2_adm1740);
            spec_const_7_7_contexte_ADM("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_adm1745);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_adm1749); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_adm1751);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_adm1756); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_adm1758);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:579:3: ( DELIMITER1 )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==DELIMITER1) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:579:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_adm1763); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_adm"



    // $ANTLR start "line_h2_1_adm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:581:1: line_h2_1_adm : start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_adm() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:583:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:584:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_adm1782);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_adm1786); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ADM_in_line_h2_1_adm1788);
            spec_const_7_7_contexte_ADM("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_adm1793);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_adm1797); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_adm1799);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_adm1804); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_adm1806);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:589:3: ( DELIMITER1 )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==DELIMITER1) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:589:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_adm1811); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_adm"



    // $ANTLR start "line_h2_0_adm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:591:1: line_h2_0_adm : start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_adm() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:593:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:594:3: start_line_h DELIMITER1 spec_const_7_7_contexte_ADM[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_adm1830);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_adm1834); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_ADM_in_line_h2_0_adm1836);
            spec_const_7_7_contexte_ADM("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_adm1841);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_adm1845); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_adm1847);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_adm1852); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_adm1854);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:599:3: ( DELIMITER1 )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DELIMITER1) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:599:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_adm1859); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_adm"



    // $ANTLR start "line_h2_2_fac"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:602:1: line_h2_2_fac : start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_fac() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:604:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:605:3: start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_fac1879);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_fac1883); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_FAC_in_line_h2_2_fac1885);
            spec_const_7_7_contexte_FAC("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_fac1890);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_fac1894); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_fac1896);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_fac1901); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_fac1903);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:610:3: ( DELIMITER1 )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DELIMITER1) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:610:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_fac1908); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_fac"



    // $ANTLR start "line_h2_1_fac"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:612:1: line_h2_1_fac : start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_fac() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:614:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:615:3: start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_fac1927);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_fac1931); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_FAC_in_line_h2_1_fac1933);
            spec_const_7_7_contexte_FAC("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_fac1938);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_fac1942); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_fac1944);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_fac1949); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_fac1951);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:620:3: ( DELIMITER1 )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==DELIMITER1) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:620:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_fac1956); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_fac"



    // $ANTLR start "line_h2_0_fac"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:622:1: line_h2_0_fac : start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_fac() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:624:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:625:3: start_line_h DELIMITER1 spec_const_7_7_contexte_FAC[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_fac1975);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_fac1979); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_FAC_in_line_h2_0_fac1981);
            spec_const_7_7_contexte_FAC("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_fac1986);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_fac1990); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_fac1992);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_fac1997); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_fac1999);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:630:3: ( DELIMITER1 )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DELIMITER1) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:630:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_fac2004); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_fac"



    // $ANTLR start "line_h2_2_reg"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:633:1: line_h2_2_reg : start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_reg() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:635:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:636:3: start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_reg2024);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_reg2028); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_REG_in_line_h2_2_reg2030);
            spec_const_7_7_contexte_REG("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_reg2035);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_reg2039); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_reg2041);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_reg2046); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_reg2048);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:641:3: ( DELIMITER1 )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==DELIMITER1) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:641:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_reg2053); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_reg"



    // $ANTLR start "line_h2_1_reg"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:643:1: line_h2_1_reg : start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_reg() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:645:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:646:3: start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_reg2072);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_reg2076); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_REG_in_line_h2_1_reg2078);
            spec_const_7_7_contexte_REG("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_reg2083);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_reg2087); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_reg2089);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_reg2094); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_reg2096);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:651:3: ( DELIMITER1 )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==DELIMITER1) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:651:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_reg2101); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_reg"



    // $ANTLR start "line_h2_0_reg"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:653:1: line_h2_0_reg : start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_reg() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:655:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:656:3: start_line_h DELIMITER1 spec_const_7_7_contexte_REG[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_reg2120);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_reg2124); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_REG_in_line_h2_0_reg2126);
            spec_const_7_7_contexte_REG("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_reg2131);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_reg2135); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_reg2137);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_reg2142); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_reg2144);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:661:3: ( DELIMITER1 )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==DELIMITER1) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:661:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_reg2149); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_reg"



    // $ANTLR start "line_h2_2_ns"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:664:1: line_h2_2_ns : start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_2_ns() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:666:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:667:3: start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_2[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_2_ns2169);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ns2173); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_NS_in_line_h2_2_ns2175);
            spec_const_7_7_contexte_NS("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_2_ns2180);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ns2184); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_ns2186);
            spec_const_7_13_version_2_2("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ns2191); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_2_ns2193);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:672:3: ( DELIMITER1 )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==DELIMITER1) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:672:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_2_ns2198); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_2_ns"



    // $ANTLR start "line_h2_1_ns"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:674:1: line_h2_1_ns : start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_1_ns() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:676:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:677:3: start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_1[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_1_ns2217);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ns2221); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_NS_in_line_h2_1_ns2223);
            spec_const_7_7_contexte_NS("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_1_ns2228);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ns2232); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_ns2234);
            spec_const_7_13_version_2_1("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ns2239); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_1_ns2241);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:682:3: ( DELIMITER1 )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==DELIMITER1) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:682:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_1_ns2246); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_1_ns"



    // $ANTLR start "line_h2_0_ns"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:684:1: line_h2_0_ns : start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? ;
    public final void line_h2_0_ns() throws RecognitionException {
        startElement("H");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:686:23: ( start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:687:3: start_line_h DELIMITER1 spec_const_7_7_contexte_NS[\"H.7\"] midd_line_h DELIMITER1 spec_const_7_13_version_2_0[\"H.13\"] DELIMITER1 ts_sized_mandatory[\"H.14\", 26] ( DELIMITER1 )?
            {
            pushFollow(FOLLOW_start_line_h_in_line_h2_0_ns2265);
            start_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ns2269); 

            pushFollow(FOLLOW_spec_const_7_7_contexte_NS_in_line_h2_0_ns2271);
            spec_const_7_7_contexte_NS("H.7");

            state._fsp--;


            pushFollow(FOLLOW_midd_line_h_in_line_h2_0_ns2276);
            midd_line_h();

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ns2280); 

            pushFollow(FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_ns2282);
            spec_const_7_13_version_2_0("H.13");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ns2287); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_h2_0_ns2289);
            ts_sized_mandatory("H.14", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:692:3: ( DELIMITER1 )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==DELIMITER1) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:692:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_h2_0_ns2294); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_h2_0_ns"



    // $ANTLR start "line_ap"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:695:1: line_ap : ( CR CHARA CHARP ) DELIMITER1 nm_integer_sized_mandatory[\"AP.2\", 4] DELIMITER1 st_sized_mandatory[\"AP.3\", 2] DELIMITER1 ts_sized_optionnal[\"AP.4\", 8] DELIMITER1 ts_sized_optionnal[\"AP.5\", 8] DELIMITER1 nm_integer_sized_mandatory[\"AP.6\", 15] DELIMITER1 st_sized_mandatory[\"AP.7\", 3] DELIMITER1 nm_sized_mandatory[\"AP.8\", 2] DELIMITER1 nm_sized_mandatory[\"AP.9\", 2] DELIMITER1 nm_sized_mandatory[\"AP.10\", 3] DELIMITER1 nm_sized_mandatory[\"AP.11\", 4] DELIMITER1 nm_sized_mandatory[\"AP.11\", 4] DELIMITER1 st_sized_mandatory[\"AP.12\", 1] DELIMITER1 st_sized_mandatory[\"AP.13\", 2] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_6[\"AP.14\", 48] DELIMITER1 st_sized_optionnal[\"AP.15\", 24] DELIMITER1 nm_sized_mandatory[\"AP.16\", 6] ( DELIMITER1 nm_sized_optionnal[\"AP.17\", 9] ( DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )? )? )? ;
    public final void line_ap() throws RecognitionException {
        startElement("AP");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:697:23: ( ( CR CHARA CHARP ) DELIMITER1 nm_integer_sized_mandatory[\"AP.2\", 4] DELIMITER1 st_sized_mandatory[\"AP.3\", 2] DELIMITER1 ts_sized_optionnal[\"AP.4\", 8] DELIMITER1 ts_sized_optionnal[\"AP.5\", 8] DELIMITER1 nm_integer_sized_mandatory[\"AP.6\", 15] DELIMITER1 st_sized_mandatory[\"AP.7\", 3] DELIMITER1 nm_sized_mandatory[\"AP.8\", 2] DELIMITER1 nm_sized_mandatory[\"AP.9\", 2] DELIMITER1 nm_sized_mandatory[\"AP.10\", 3] DELIMITER1 nm_sized_mandatory[\"AP.11\", 4] DELIMITER1 nm_sized_mandatory[\"AP.11\", 4] DELIMITER1 st_sized_mandatory[\"AP.12\", 1] DELIMITER1 st_sized_mandatory[\"AP.13\", 2] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_6[\"AP.14\", 48] DELIMITER1 st_sized_optionnal[\"AP.15\", 24] DELIMITER1 nm_sized_mandatory[\"AP.16\", 6] ( DELIMITER1 nm_sized_optionnal[\"AP.17\", 9] ( DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:698:3: ( CR CHARA CHARP ) DELIMITER1 nm_integer_sized_mandatory[\"AP.2\", 4] DELIMITER1 st_sized_mandatory[\"AP.3\", 2] DELIMITER1 ts_sized_optionnal[\"AP.4\", 8] DELIMITER1 ts_sized_optionnal[\"AP.5\", 8] DELIMITER1 nm_integer_sized_mandatory[\"AP.6\", 15] DELIMITER1 st_sized_mandatory[\"AP.7\", 3] DELIMITER1 nm_sized_mandatory[\"AP.8\", 2] DELIMITER1 nm_sized_mandatory[\"AP.9\", 2] DELIMITER1 nm_sized_mandatory[\"AP.10\", 3] DELIMITER1 nm_sized_mandatory[\"AP.11\", 4] DELIMITER1 nm_sized_mandatory[\"AP.11\", 4] DELIMITER1 st_sized_mandatory[\"AP.12\", 1] DELIMITER1 st_sized_mandatory[\"AP.13\", 2] DELIMITER1 spec_sized_mult_lvl1_st_mandatory_6[\"AP.14\", 48] DELIMITER1 st_sized_optionnal[\"AP.15\", 24] DELIMITER1 nm_sized_mandatory[\"AP.16\", 6] ( DELIMITER1 nm_sized_optionnal[\"AP.17\", 9] ( DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )? )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:698:3: ( CR CHARA CHARP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:698:4: CR CHARA CHARP
            {
            match(input,CR,FOLLOW_CR_in_line_ap2315); 

            match(input,CHARA,FOLLOW_CHARA_in_line_ap2317); 

            match(input,CHARP,FOLLOW_CHARP_in_line_ap2319); 

            }


            startElement("AP.1");content("AP");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2326); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_ap2328);
            nm_integer_sized_mandatory("AP.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2333); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_ap2335);
            st_sized_mandatory("AP.3", 2);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2340); 

            pushFollow(FOLLOW_ts_sized_optionnal_in_line_ap2342);
            ts_sized_optionnal("AP.4", 8);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2347); 

            pushFollow(FOLLOW_ts_sized_optionnal_in_line_ap2349);
            ts_sized_optionnal("AP.5", 8);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2354); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_ap2356);
            nm_integer_sized_mandatory("AP.6", 15);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2361); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_ap2363);
            st_sized_mandatory("AP.7", 3);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2368); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_ap2370);
            nm_sized_mandatory("AP.8", 2);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2375); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_ap2377);
            nm_sized_mandatory("AP.9", 2);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2382); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_ap2384);
            nm_sized_mandatory("AP.10", 3);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2389); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_ap2391);
            nm_sized_mandatory("AP.11", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2396); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_ap2398);
            nm_sized_mandatory("AP.11", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2403); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_ap2405);
            st_sized_mandatory("AP.12", 1);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2410); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_ap2412);
            st_sized_mandatory("AP.13", 2);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2417); 

            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_mandatory_6_in_line_ap2419);
            spec_sized_mult_lvl1_st_mandatory_6("AP.14", 48);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2424); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_ap2426);
            st_sized_optionnal("AP.15", 24);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2431); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_ap2433);
            nm_sized_mandatory("AP.16", 6);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:715:3: ( DELIMITER1 nm_sized_optionnal[\"AP.17\", 9] ( DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )? )? )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==DELIMITER1) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:715:4: DELIMITER1 nm_sized_optionnal[\"AP.17\", 9] ( DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2439); 

                    pushFollow(FOLLOW_nm_sized_optionnal_in_line_ap2441);
                    nm_sized_optionnal("AP.17", 9);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:716:4: ( DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )? )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==DELIMITER1) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:716:5: DELIMITER1 spec_on_optionnal[\"AP.18\"] ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2448); 

                            pushFollow(FOLLOW_spec_on_optionnal_in_line_ap2450);
                            spec_on_optionnal("AP.18");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:717:5: ( DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )? )?
                            int alt105=2;
                            int LA105_0 = input.LA(1);

                            if ( (LA105_0==DELIMITER1) ) {
                                alt105=1;
                            }
                            switch (alt105) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:717:6: DELIMITER1 ts_sized_optionnal[\"AP.19\", 8] ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2458); 

                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_ap2460);
                                    ts_sized_optionnal("AP.19", 8);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:718:6: ( DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )? )?
                                    int alt104=2;
                                    int LA104_0 = input.LA(1);

                                    if ( (LA104_0==DELIMITER1) ) {
                                        alt104=1;
                                    }
                                    switch (alt104) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:718:7: DELIMITER1 ts_sized_optionnal[\"AP.20\", 8] ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2469); 

                                            pushFollow(FOLLOW_ts_sized_optionnal_in_line_ap2471);
                                            ts_sized_optionnal("AP.20", 8);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:719:7: ( DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )? )?
                                            int alt103=2;
                                            int LA103_0 = input.LA(1);

                                            if ( (LA103_0==DELIMITER1) ) {
                                                alt103=1;
                                            }
                                            switch (alt103) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:719:8: DELIMITER1 st_sized_optionnal[\"AP.21\", 30] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )?
                                                    {
                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2481); 

                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_ap2483);
                                                    st_sized_optionnal("AP.21", 30);

                                                    state._fsp--;


                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:720:8: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )? )?
                                                    int alt102=2;
                                                    int LA102_0 = input.LA(1);

                                                    if ( (LA102_0==DELIMITER1) ) {
                                                        alt102=1;
                                                    }
                                                    switch (alt102) {
                                                        case 1 :
                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:720:9: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AP.22\", 200] ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )?
                                                            {
                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2494); 

                                                            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_ap2496);
                                                            spec_sized_mult_lvl1_st_optionnal_6("AP.22", 200);

                                                            state._fsp--;


                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:721:9: ( DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )? )?
                                                            int alt101=2;
                                                            int LA101_0 = input.LA(1);

                                                            if ( (LA101_0==DELIMITER1) ) {
                                                                alt101=1;
                                                            }
                                                            switch (alt101) {
                                                                case 1 :
                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:721:10: DELIMITER1 ts_sized_optionnal[\"AP.23\", 15] ( DELIMITER1 )?
                                                                    {
                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2508); 

                                                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_ap2510);
                                                                    ts_sized_optionnal("AP.23", 15);

                                                                    state._fsp--;


                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:722:10: ( DELIMITER1 )?
                                                                    int alt100=2;
                                                                    int LA100_0 = input.LA(1);

                                                                    if ( (LA100_0==DELIMITER1) ) {
                                                                        alt100=1;
                                                                    }
                                                                    switch (alt100) {
                                                                        case 1 :
                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:722:10: DELIMITER1
                                                                            {
                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ap2522); 

                                                                            }
                                                                            break;

                                                                    }


                                                                    }
                                                                    break;

                                                            }


                                                            }
                                                            break;

                                                    }


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_ap"



    // $ANTLR start "line_ac"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:725:1: line_ac : ( CR CHARA CHARC ) DELIMITER1 nm_integer_sized_mandatory[\"AC.2\", 4] DELIMITER1 st_sized_mandatory[\"AC.3\", 9] DELIMITER1 st_sized_mandatory[\"AC.4\", 15] DELIMITER1 ts_sized_optionnal[\"AC.5\", 8] DELIMITER1 ts_sized_mandatory[\"AC.6\", 8] DELIMITER1 st_sized_optionnal[\"AC.7\", 28] DELIMITER1 spec_ac_8[\"AC.8\", 10] ( DELIMITER1 st_sized_optionnal[\"AC.9\", 40] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )? )? )? ;
    public final void line_ac() throws RecognitionException {
        startElement("AC");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:727:23: ( ( CR CHARA CHARC ) DELIMITER1 nm_integer_sized_mandatory[\"AC.2\", 4] DELIMITER1 st_sized_mandatory[\"AC.3\", 9] DELIMITER1 st_sized_mandatory[\"AC.4\", 15] DELIMITER1 ts_sized_optionnal[\"AC.5\", 8] DELIMITER1 ts_sized_mandatory[\"AC.6\", 8] DELIMITER1 st_sized_optionnal[\"AC.7\", 28] DELIMITER1 spec_ac_8[\"AC.8\", 10] ( DELIMITER1 st_sized_optionnal[\"AC.9\", 40] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:728:3: ( CR CHARA CHARC ) DELIMITER1 nm_integer_sized_mandatory[\"AC.2\", 4] DELIMITER1 st_sized_mandatory[\"AC.3\", 9] DELIMITER1 st_sized_mandatory[\"AC.4\", 15] DELIMITER1 ts_sized_optionnal[\"AC.5\", 8] DELIMITER1 ts_sized_mandatory[\"AC.6\", 8] DELIMITER1 st_sized_optionnal[\"AC.7\", 28] DELIMITER1 spec_ac_8[\"AC.8\", 10] ( DELIMITER1 st_sized_optionnal[\"AC.9\", 40] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )? )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:728:3: ( CR CHARA CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:728:4: CR CHARA CHARC
            {
            match(input,CR,FOLLOW_CR_in_line_ac2557); 

            match(input,CHARA,FOLLOW_CHARA_in_line_ac2559); 

            match(input,CHARC,FOLLOW_CHARC_in_line_ac2561); 

            }


            startElement("AC.1");content("AC");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2568); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_ac2570);
            nm_integer_sized_mandatory("AC.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2575); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_ac2577);
            st_sized_mandatory("AC.3", 9);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2582); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_ac2584);
            st_sized_mandatory("AC.4", 15);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2589); 

            pushFollow(FOLLOW_ts_sized_optionnal_in_line_ac2591);
            ts_sized_optionnal("AC.5", 8);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2596); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_ac2598);
            ts_sized_mandatory("AC.6", 8);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2603); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_ac2605);
            st_sized_optionnal("AC.7", 28);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2610); 

            pushFollow(FOLLOW_spec_ac_8_in_line_ac2612);
            spec_ac_8("AC.8", 10);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:736:3: ( DELIMITER1 st_sized_optionnal[\"AC.9\", 40] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )? )? )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==DELIMITER1) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:736:4: DELIMITER1 st_sized_optionnal[\"AC.9\", 40] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2618); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_line_ac2620);
                    st_sized_optionnal("AC.9", 40);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:737:4: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )? )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==DELIMITER1) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:737:5: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"AC.10\", 200] ( DELIMITER1 )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2627); 

                            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_ac2629);
                            spec_sized_mult_lvl1_st_optionnal_6("AC.10", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:738:5: ( DELIMITER1 )?
                            int alt108=2;
                            int LA108_0 = input.LA(1);

                            if ( (LA108_0==DELIMITER1) ) {
                                alt108=1;
                            }
                            switch (alt108) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:738:5: DELIMITER1
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_ac2636); 

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_ac"



    // $ANTLR start "line_act"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:741:1: line_act : ( CR CHARA CHARC CHART ) DELIMITER1 nm_integer_sized_mandatory[\"ACT.2\", 4] DELIMITER1 st_sized_mandatory[\"ACT.3\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.4\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.5\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.6\", 10] DELIMITER1 st_sized_optionnal[\"ACT.7\", 64000] DELIMITER1 st_sized_optionnal[\"ACT.8\", 3] DELIMITER1 spec_fac_6[\"ACT.9\", 60] DELIMITER1 spec_act_10[\"ACT.10\", 64000] DELIMITER1 spec_act_11[\"ACT.11\"] ( DELIMITER1 )? ;
    public final void line_act() throws RecognitionException {
        startElement("ACT");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:743:23: ( ( CR CHARA CHARC CHART ) DELIMITER1 nm_integer_sized_mandatory[\"ACT.2\", 4] DELIMITER1 st_sized_mandatory[\"ACT.3\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.4\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.5\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.6\", 10] DELIMITER1 st_sized_optionnal[\"ACT.7\", 64000] DELIMITER1 st_sized_optionnal[\"ACT.8\", 3] DELIMITER1 spec_fac_6[\"ACT.9\", 60] DELIMITER1 spec_act_10[\"ACT.10\", 64000] DELIMITER1 spec_act_11[\"ACT.11\"] ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:744:3: ( CR CHARA CHARC CHART ) DELIMITER1 nm_integer_sized_mandatory[\"ACT.2\", 4] DELIMITER1 st_sized_mandatory[\"ACT.3\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.4\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.5\", 10] DELIMITER1 nm_sized_mandatory[\"ACT.6\", 10] DELIMITER1 st_sized_optionnal[\"ACT.7\", 64000] DELIMITER1 st_sized_optionnal[\"ACT.8\", 3] DELIMITER1 spec_fac_6[\"ACT.9\", 60] DELIMITER1 spec_act_10[\"ACT.10\", 64000] DELIMITER1 spec_act_11[\"ACT.11\"] ( DELIMITER1 )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:744:3: ( CR CHARA CHARC CHART )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:744:4: CR CHARA CHARC CHART
            {
            match(input,CR,FOLLOW_CR_in_line_act2661); 

            match(input,CHARA,FOLLOW_CHARA_in_line_act2663); 

            match(input,CHARC,FOLLOW_CHARC_in_line_act2665); 

            match(input,CHART,FOLLOW_CHART_in_line_act2667); 

            }


            startElement("ACT.1");content("ACT");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2674); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_act2676);
            nm_integer_sized_mandatory("ACT.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2681); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_act2683);
            st_sized_mandatory("ACT.3", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2688); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_act2690);
            nm_sized_mandatory("ACT.4", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2695); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_act2697);
            nm_sized_mandatory("ACT.5", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2702); 

            pushFollow(FOLLOW_nm_sized_mandatory_in_line_act2704);
            nm_sized_mandatory("ACT.6", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2709); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_act2711);
            st_sized_optionnal("ACT.7", 64000);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2716); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_act2718);
            st_sized_optionnal("ACT.8", 3);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2723); 

            pushFollow(FOLLOW_spec_fac_6_in_line_act2725);
            spec_fac_6("ACT.9", 60);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2730); 

            pushFollow(FOLLOW_spec_act_10_in_line_act2732);
            spec_act_10("ACT.10", 64000);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2737); 

            pushFollow(FOLLOW_spec_act_11_in_line_act2739);
            spec_act_11("ACT.11");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:755:3: ( DELIMITER1 )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==DELIMITER1) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:755:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_act2744); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_act"



    // $ANTLR start "line_fac"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:758:1: line_fac : ( CR CHARF CHARA CHARC ) DELIMITER1 nm_integer_sized_mandatory[\"FAC.2\", 4] DELIMITER1 st_sized_mandatory[\"FAC.3\", 16] DELIMITER1 st_sized_mandatory[\"FAC.4\", 10] DELIMITER1 ts_sized_mandatory[\"FAC.5\", 26] ( DELIMITER1 spec_fac_6[\"FAC.6\", 60] ( DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )? )? )? ;
    public final void line_fac() throws RecognitionException {
        startElement("FAC");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:760:23: ( ( CR CHARF CHARA CHARC ) DELIMITER1 nm_integer_sized_mandatory[\"FAC.2\", 4] DELIMITER1 st_sized_mandatory[\"FAC.3\", 16] DELIMITER1 st_sized_mandatory[\"FAC.4\", 10] DELIMITER1 ts_sized_mandatory[\"FAC.5\", 26] ( DELIMITER1 spec_fac_6[\"FAC.6\", 60] ( DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:761:3: ( CR CHARF CHARA CHARC ) DELIMITER1 nm_integer_sized_mandatory[\"FAC.2\", 4] DELIMITER1 st_sized_mandatory[\"FAC.3\", 16] DELIMITER1 st_sized_mandatory[\"FAC.4\", 10] DELIMITER1 ts_sized_mandatory[\"FAC.5\", 26] ( DELIMITER1 spec_fac_6[\"FAC.6\", 60] ( DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )? )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:761:3: ( CR CHARF CHARA CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:761:4: CR CHARF CHARA CHARC
            {
            match(input,CR,FOLLOW_CR_in_line_fac2765); 

            match(input,CHARF,FOLLOW_CHARF_in_line_fac2767); 

            match(input,CHARA,FOLLOW_CHARA_in_line_fac2769); 

            match(input,CHARC,FOLLOW_CHARC_in_line_fac2771); 

            }


            startElement("FAC.1");content("FAC");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2778); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_fac2780);
            nm_integer_sized_mandatory("FAC.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2785); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_fac2787);
            st_sized_mandatory("FAC.3", 16);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2792); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_fac2794);
            st_sized_mandatory("FAC.4", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2799); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_fac2801);
            ts_sized_mandatory("FAC.5", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:766:3: ( DELIMITER1 spec_fac_6[\"FAC.6\", 60] ( DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )? )? )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==DELIMITER1) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:766:4: DELIMITER1 spec_fac_6[\"FAC.6\", 60] ( DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2807); 

                    pushFollow(FOLLOW_spec_fac_6_in_line_fac2809);
                    spec_fac_6("FAC.6", 60);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:767:4: ( DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )? )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==DELIMITER1) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:767:5: DELIMITER1 spec_fac_6[\"FAC.7\", 60] ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2816); 

                            pushFollow(FOLLOW_spec_fac_6_in_line_fac2818);
                            spec_fac_6("FAC.7", 60);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:768:5: ( DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )? )?
                            int alt113=2;
                            int LA113_0 = input.LA(1);

                            if ( (LA113_0==DELIMITER1) ) {
                                alt113=1;
                            }
                            switch (alt113) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:768:6: DELIMITER1 spec_on_optionnal[\"FAC.8\"] ( DELIMITER1 )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2826); 

                                    pushFollow(FOLLOW_spec_on_optionnal_in_line_fac2828);
                                    spec_on_optionnal("FAC.8");

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:769:6: ( DELIMITER1 )?
                                    int alt112=2;
                                    int LA112_0 = input.LA(1);

                                    if ( (LA112_0==DELIMITER1) ) {
                                        alt112=1;
                                    }
                                    switch (alt112) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:769:6: DELIMITER1
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_fac2836); 

                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_fac"



    // $ANTLR start "line_p"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:772:1: line_p : ( CR CHARP ) DELIMITER1 nm_integer_sized_mandatory[\"P.2\", 4] DELIMITER1 spec_sized_8_3[\"P.3\", 36] DELIMITER1 st_sized_optionnal[\"P.4\", 16] ( DELIMITER1 st_sized_optionnal[\"P.5\", 16] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? ;
    public final void line_p() throws RecognitionException {
        startElement("P");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:774:23: ( ( CR CHARP ) DELIMITER1 nm_integer_sized_mandatory[\"P.2\", 4] DELIMITER1 spec_sized_8_3[\"P.3\", 36] DELIMITER1 st_sized_optionnal[\"P.4\", 16] ( DELIMITER1 st_sized_optionnal[\"P.5\", 16] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:775:3: ( CR CHARP ) DELIMITER1 nm_integer_sized_mandatory[\"P.2\", 4] DELIMITER1 spec_sized_8_3[\"P.3\", 36] DELIMITER1 st_sized_optionnal[\"P.4\", 16] ( DELIMITER1 st_sized_optionnal[\"P.5\", 16] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:775:3: ( CR CHARP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:775:4: CR CHARP
            {
            match(input,CR,FOLLOW_CR_in_line_p2865); 

            match(input,CHARP,FOLLOW_CHARP_in_line_p2867); 

            }


            startElement("P.1");content("P");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2874); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_p2876);
            nm_integer_sized_mandatory("P.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2881); 

            pushFollow(FOLLOW_spec_sized_8_3_in_line_p2883);
            spec_sized_8_3("P.3", 36);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2888); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_p2890);
            st_sized_optionnal("P.4", 16);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:779:3: ( DELIMITER1 st_sized_optionnal[\"P.5\", 16] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==DELIMITER1) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:779:4: DELIMITER1 st_sized_optionnal[\"P.5\", 16] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2896); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p2898);
                    st_sized_optionnal("P.5", 16);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:780:4: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==DELIMITER1) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:780:5: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.6\", 48] ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2905); 

                            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p2907);
                            spec_sized_mult_lvl1_st_optionnal_6("P.6", 48);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:781:5: ( DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                            int alt148=2;
                            int LA148_0 = input.LA(1);

                            if ( (LA148_0==DELIMITER1) ) {
                                alt148=1;
                            }
                            switch (alt148) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:781:6: DELIMITER1 st_sized_optionnal[\"P.7\", 24] ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2915); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p2917);
                                    st_sized_optionnal("P.7", 24);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:782:6: ( DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                    int alt147=2;
                                    int LA147_0 = input.LA(1);

                                    if ( (LA147_0==DELIMITER1) ) {
                                        alt147=1;
                                    }
                                    switch (alt147) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:782:7: DELIMITER1 ts_sized_optionnal[\"P.8\", 26] ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2926); 

                                            pushFollow(FOLLOW_ts_sized_optionnal_in_line_p2928);
                                            ts_sized_optionnal("P.8", 26);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:783:7: ( DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                            int alt146=2;
                                            int LA146_0 = input.LA(1);

                                            if ( (LA146_0==DELIMITER1) ) {
                                                alt146=1;
                                            }
                                            switch (alt146) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:783:8: DELIMITER1 spec_const_sexe[\"P.9\"] ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                    {
                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2938); 

                                                    pushFollow(FOLLOW_spec_const_sexe_in_line_p2940);
                                                    spec_const_sexe("P.9");

                                                    state._fsp--;


                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:784:8: ( DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                    int alt145=2;
                                                    int LA145_0 = input.LA(1);

                                                    if ( (LA145_0==DELIMITER1) ) {
                                                        alt145=1;
                                                    }
                                                    switch (alt145) {
                                                        case 1 :
                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:784:9: DELIMITER1 spec_const_race[\"P.10\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                            {
                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2951); 

                                                            pushFollow(FOLLOW_spec_const_race_in_line_p2953);
                                                            spec_const_race("P.10");

                                                            state._fsp--;


                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:785:9: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                            int alt144=2;
                                                            int LA144_0 = input.LA(1);

                                                            if ( (LA144_0==DELIMITER1) ) {
                                                                alt144=1;
                                                            }
                                                            switch (alt144) {
                                                                case 1 :
                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:785:10: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.11\", 200] ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                    {
                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2965); 

                                                                    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p2967);
                                                                    spec_sized_mult_lvl1_st_optionnal_6("P.11", 200);

                                                                    state._fsp--;


                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:786:10: ( DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                    int alt143=2;
                                                                    int LA143_0 = input.LA(1);

                                                                    if ( (LA143_0==DELIMITER1) ) {
                                                                        alt143=1;
                                                                    }
                                                                    switch (alt143) {
                                                                        case 1 :
                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:786:11: DELIMITER1 st_sized_optionnal[\"P.12\", 120] ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                            {
                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2980); 

                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_p2982);
                                                                            st_sized_optionnal("P.12", 120);

                                                                            state._fsp--;


                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:787:11: ( DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                            int alt142=2;
                                                                            int LA142_0 = input.LA(1);

                                                                            if ( (LA142_0==DELIMITER1) ) {
                                                                                alt142=1;
                                                                            }
                                                                            switch (alt142) {
                                                                                case 1 :
                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:787:12: DELIMITER1 spec_sized_tn[\"P.13\", 40] ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                    {
                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p2996); 

                                                                                    pushFollow(FOLLOW_spec_sized_tn_in_line_p2998);
                                                                                    spec_sized_tn("P.13", 40);

                                                                                    state._fsp--;


                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:790:12: ( DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                    int alt141=2;
                                                                                    int LA141_0 = input.LA(1);

                                                                                    if ( (LA141_0==DELIMITER1) ) {
                                                                                        alt141=1;
                                                                                    }
                                                                                    switch (alt141) {
                                                                                        case 1 :
                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:790:13: DELIMITER1 spec_sized_cna[\"P.14\", 60] ( REPETITEUR spec_sized_cna[\"P.14\", 60] )* ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                            {
                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3037); 

                                                                                            pushFollow(FOLLOW_spec_sized_cna_in_line_p3039);
                                                                                            spec_sized_cna("P.14", 60);

                                                                                            state._fsp--;


                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:790:51: ( REPETITEUR spec_sized_cna[\"P.14\", 60] )*
                                                                                            loop116:
                                                                                            do {
                                                                                                int alt116=2;
                                                                                                int LA116_0 = input.LA(1);

                                                                                                if ( (LA116_0==REPETITEUR) ) {
                                                                                                    alt116=1;
                                                                                                }


                                                                                                switch (alt116) {
                                                                                            	case 1 :
                                                                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:790:52: REPETITEUR spec_sized_cna[\"P.14\", 60]
                                                                                            	    {
                                                                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_p3043); 

                                                                                            	    pushFollow(FOLLOW_spec_sized_cna_in_line_p3045);
                                                                                            	    spec_sized_cna("P.14", 60);

                                                                                            	    state._fsp--;


                                                                                            	    }
                                                                                            	    break;

                                                                                            	default :
                                                                                            	    break loop116;
                                                                                                }
                                                                                            } while (true);


                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:791:13: ( DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                            int alt140=2;
                                                                                            int LA140_0 = input.LA(1);

                                                                                            if ( (LA140_0==DELIMITER1) ) {
                                                                                                alt140=1;
                                                                                            }
                                                                                            switch (alt140) {
                                                                                                case 1 :
                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:791:14: DELIMITER1 st_sized_optionnal[\"P.15\", 60] ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                    {
                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3063); 

                                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3065);
                                                                                                    st_sized_optionnal("P.15", 60);

                                                                                                    state._fsp--;


                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:792:14: ( DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                    int alt139=2;
                                                                                                    int LA139_0 = input.LA(1);

                                                                                                    if ( (LA139_0==DELIMITER1) ) {
                                                                                                        alt139=1;
                                                                                                    }
                                                                                                    switch (alt139) {
                                                                                                        case 1 :
                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:792:15: DELIMITER1 st_sized_optionnal[\"P.16\", 60] ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                            {
                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3082); 

                                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_p3084);
                                                                                                            st_sized_optionnal("P.16", 60);

                                                                                                            state._fsp--;


                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:794:15: ( DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                            int alt138=2;
                                                                                                            int LA138_0 = input.LA(1);

                                                                                                            if ( (LA138_0==DELIMITER1) ) {
                                                                                                                alt138=1;
                                                                                                            }
                                                                                                            switch (alt138) {
                                                                                                                case 1 :
                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:794:16: DELIMITER1 nm_sized_optionnal[\"P.17\", 10] ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                    {
                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3117); 

                                                                                                                    pushFollow(FOLLOW_nm_sized_optionnal_in_line_p3119);
                                                                                                                    nm_sized_optionnal("P.17", 10);

                                                                                                                    state._fsp--;


                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:796:16: ( DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                    int alt137=2;
                                                                                                                    int LA137_0 = input.LA(1);

                                                                                                                    if ( (LA137_0==DELIMITER1) ) {
                                                                                                                        alt137=1;
                                                                                                                    }
                                                                                                                    switch (alt137) {
                                                                                                                        case 1 :
                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:796:17: DELIMITER1 nm_sized_optionnal[\"P.18\", 10] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                            {
                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3154); 

                                                                                                                            pushFollow(FOLLOW_nm_sized_optionnal_in_line_p3156);
                                                                                                                            nm_sized_optionnal("P.18", 10);

                                                                                                                            state._fsp--;


                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:797:17: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                            int alt136=2;
                                                                                                                            int LA136_0 = input.LA(1);

                                                                                                                            if ( (LA136_0==DELIMITER1) ) {
                                                                                                                                alt136=1;
                                                                                                                            }
                                                                                                                            switch (alt136) {
                                                                                                                                case 1 :
                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:797:18: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                    {
                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3176); 

                                                                                                                                    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p3178);
                                                                                                                                    spec_sized_mult_lvl1_st_optionnal_6("P.19", 200);

                                                                                                                                    state._fsp--;


                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:797:78: ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200] )*
                                                                                                                                    loop117:
                                                                                                                                    do {
                                                                                                                                        int alt117=2;
                                                                                                                                        int LA117_0 = input.LA(1);

                                                                                                                                        if ( (LA117_0==REPETITEUR) ) {
                                                                                                                                            alt117=1;
                                                                                                                                        }


                                                                                                                                        switch (alt117) {
                                                                                                                                    	case 1 :
                                                                                                                                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:797:79: REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"P.19\", 200]
                                                                                                                                    	    {
                                                                                                                                    	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_p3182); 

                                                                                                                                    	    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p3184);
                                                                                                                                    	    spec_sized_mult_lvl1_st_optionnal_6("P.19", 200);

                                                                                                                                    	    state._fsp--;


                                                                                                                                    	    }
                                                                                                                                    	    break;

                                                                                                                                    	default :
                                                                                                                                    	    break loop117;
                                                                                                                                        }
                                                                                                                                    } while (true);


                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:798:18: ( DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                    int alt135=2;
                                                                                                                                    int LA135_0 = input.LA(1);

                                                                                                                                    if ( (LA135_0==DELIMITER1) ) {
                                                                                                                                        alt135=1;
                                                                                                                                    }
                                                                                                                                    switch (alt135) {
                                                                                                                                        case 1 :
                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:798:19: DELIMITER1 st_sized_optionnal[\"P.20\", 200] ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )* ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                            {
                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3207); 

                                                                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_p3209);
                                                                                                                                            st_sized_optionnal("P.20", 200);

                                                                                                                                            state._fsp--;


                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:798:62: ( REPETITEUR st_sized_optionnal[\"P.20\", 200] )*
                                                                                                                                            loop118:
                                                                                                                                            do {
                                                                                                                                                int alt118=2;
                                                                                                                                                int LA118_0 = input.LA(1);

                                                                                                                                                if ( (LA118_0==REPETITEUR) ) {
                                                                                                                                                    alt118=1;
                                                                                                                                                }


                                                                                                                                                switch (alt118) {
                                                                                                                                            	case 1 :
                                                                                                                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:798:63: REPETITEUR st_sized_optionnal[\"P.20\", 200]
                                                                                                                                            	    {
                                                                                                                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_p3213); 

                                                                                                                                            	    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3215);
                                                                                                                                            	    st_sized_optionnal("P.20", 200);

                                                                                                                                            	    state._fsp--;


                                                                                                                                            	    }
                                                                                                                                            	    break;

                                                                                                                                            	default :
                                                                                                                                            	    break loop118;
                                                                                                                                                }
                                                                                                                                            } while (true);


                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:799:19: ( DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                            int alt134=2;
                                                                                                                                            int LA134_0 = input.LA(1);

                                                                                                                                            if ( (LA134_0==DELIMITER1) ) {
                                                                                                                                                alt134=1;
                                                                                                                                            }
                                                                                                                                            switch (alt134) {
                                                                                                                                                case 1 :
                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:799:20: DELIMITER1 st_sized_optionnal[\"P.21\", 200] ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                    {
                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3239); 

                                                                                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3241);
                                                                                                                                                    st_sized_optionnal("P.21", 200);

                                                                                                                                                    state._fsp--;


                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:800:20: ( DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                    int alt133=2;
                                                                                                                                                    int LA133_0 = input.LA(1);

                                                                                                                                                    if ( (LA133_0==DELIMITER1) ) {
                                                                                                                                                        alt133=1;
                                                                                                                                                    }
                                                                                                                                                    switch (alt133) {
                                                                                                                                                        case 1 :
                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:800:21: DELIMITER1 st_sized_optionnal[\"P.22\", 60] ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                            {
                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3264); 

                                                                                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_p3266);
                                                                                                                                                            st_sized_optionnal("P.22", 60);

                                                                                                                                                            state._fsp--;


                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:801:21: ( DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                            int alt132=2;
                                                                                                                                                            int LA132_0 = input.LA(1);

                                                                                                                                                            if ( (LA132_0==DELIMITER1) ) {
                                                                                                                                                                alt132=1;
                                                                                                                                                            }
                                                                                                                                                            switch (alt132) {
                                                                                                                                                                case 1 :
                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:801:22: DELIMITER1 st_sized_optionnal[\"P.23\", 60] ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                                    {
                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3290); 

                                                                                                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3292);
                                                                                                                                                                    st_sized_optionnal("P.23", 60);

                                                                                                                                                                    state._fsp--;


                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:802:22: ( DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                                    int alt131=2;
                                                                                                                                                                    int LA131_0 = input.LA(1);

                                                                                                                                                                    if ( (LA131_0==DELIMITER1) ) {
                                                                                                                                                                        alt131=1;
                                                                                                                                                                    }
                                                                                                                                                                    switch (alt131) {
                                                                                                                                                                        case 1 :
                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:802:23: DELIMITER1 ts_sized_optionnal[\"P.24\", 26] ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )? ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                                            {
                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3317); 

                                                                                                                                                                            pushFollow(FOLLOW_ts_sized_optionnal_in_line_p3319);
                                                                                                                                                                            ts_sized_optionnal("P.24", 26);

                                                                                                                                                                            state._fsp--;


                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:802:65: ( REPETITEUR ts_sized_optionnal[\"P.24\", 26] )?
                                                                                                                                                                            int alt119=2;
                                                                                                                                                                            int LA119_0 = input.LA(1);

                                                                                                                                                                            if ( (LA119_0==REPETITEUR) ) {
                                                                                                                                                                                alt119=1;
                                                                                                                                                                            }
                                                                                                                                                                            switch (alt119) {
                                                                                                                                                                                case 1 :
                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:802:66: REPETITEUR ts_sized_optionnal[\"P.24\", 26]
                                                                                                                                                                                    {
                                                                                                                                                                                    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_p3323); 

                                                                                                                                                                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_p3325);
                                                                                                                                                                                    ts_sized_optionnal("P.24", 26);

                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                    }
                                                                                                                                                                                    break;

                                                                                                                                                                            }


                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:803:23: ( DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                                            int alt130=2;
                                                                                                                                                                            int LA130_0 = input.LA(1);

                                                                                                                                                                            if ( (LA130_0==DELIMITER1) ) {
                                                                                                                                                                                alt130=1;
                                                                                                                                                                            }
                                                                                                                                                                            switch (alt130) {
                                                                                                                                                                                case 1 :
                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:803:24: DELIMITER1 spec_const_8_25[\"P.25\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                                                    {
                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3353); 

                                                                                                                                                                                    pushFollow(FOLLOW_spec_const_8_25_in_line_p3355);
                                                                                                                                                                                    spec_const_8_25("P.25");

                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:804:24: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )?
                                                                                                                                                                                    int alt129=2;
                                                                                                                                                                                    int LA129_0 = input.LA(1);

                                                                                                                                                                                    if ( (LA129_0==DELIMITER1) ) {
                                                                                                                                                                                        alt129=1;
                                                                                                                                                                                    }
                                                                                                                                                                                    switch (alt129) {
                                                                                                                                                                                        case 1 :
                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:804:25: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_8[\"P.26\", 100] ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )?
                                                                                                                                                                                            {
                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3382); 

                                                                                                                                                                                            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_8_in_line_p3384);
                                                                                                                                                                                            spec_sized_mult_lvl1_st_optionnal_8("P.26", 100);

                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:806:25: ( DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )?
                                                                                                                                                                                            int alt128=2;
                                                                                                                                                                                            int LA128_0 = input.LA(1);

                                                                                                                                                                                            if ( (LA128_0==DELIMITER1) ) {
                                                                                                                                                                                                alt128=1;
                                                                                                                                                                                            }
                                                                                                                                                                                            switch (alt128) {
                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:806:26: DELIMITER1 st_sized_optionnal[\"P.27\", 100] ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )?
                                                                                                                                                                                                    {
                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3437); 

                                                                                                                                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3439);
                                                                                                                                                                                                    st_sized_optionnal("P.27", 100);

                                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:807:26: ( DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )?
                                                                                                                                                                                                    int alt127=2;
                                                                                                                                                                                                    int LA127_0 = input.LA(1);

                                                                                                                                                                                                    if ( (LA127_0==DELIMITER1) ) {
                                                                                                                                                                                                        alt127=1;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    switch (alt127) {
                                                                                                                                                                                                        case 1 :
                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:807:27: DELIMITER1 spec_const_race[\"P.28\"] ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )?
                                                                                                                                                                                                            {
                                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3468); 

                                                                                                                                                                                                            pushFollow(FOLLOW_spec_const_race_in_line_p3470);
                                                                                                                                                                                                            spec_const_race("P.28");

                                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:809:27: ( DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )? )?
                                                                                                                                                                                                            int alt126=2;
                                                                                                                                                                                                            int LA126_0 = input.LA(1);

                                                                                                                                                                                                            if ( (LA126_0==DELIMITER1) ) {
                                                                                                                                                                                                                alt126=1;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            switch (alt126) {
                                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:809:28: DELIMITER1 st_sized_optionnal[\"P.29\", 2] ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )?
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3527); 

                                                                                                                                                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3529);
                                                                                                                                                                                                                    st_sized_optionnal("P.29", 2);

                                                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:811:28: ( DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )? )?
                                                                                                                                                                                                                    int alt125=2;
                                                                                                                                                                                                                    int LA125_0 = input.LA(1);

                                                                                                                                                                                                                    if ( (LA125_0==DELIMITER1) ) {
                                                                                                                                                                                                                        alt125=1;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    switch (alt125) {
                                                                                                                                                                                                                        case 1 :
                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:811:29: DELIMITER1 st_sized_optionnal[\"P.30\", 20] ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )?
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3588); 

                                                                                                                                                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_p3590);
                                                                                                                                                                                                                            st_sized_optionnal("P.30", 20);

                                                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:812:29: ( DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )? )?
                                                                                                                                                                                                                            int alt124=2;
                                                                                                                                                                                                                            int LA124_0 = input.LA(1);

                                                                                                                                                                                                                            if ( (LA124_0==DELIMITER1) ) {
                                                                                                                                                                                                                                alt124=1;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            switch (alt124) {
                                                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:812:30: DELIMITER1 st_sized_optionnal[\"P.31\", 20] ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )?
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3622); 

                                                                                                                                                                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_p3624);
                                                                                                                                                                                                                                    st_sized_optionnal("P.31", 20);

                                                                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:814:30: ( DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )? )?
                                                                                                                                                                                                                                    int alt123=2;
                                                                                                                                                                                                                                    int LA123_0 = input.LA(1);

                                                                                                                                                                                                                                    if ( (LA123_0==DELIMITER1) ) {
                                                                                                                                                                                                                                        alt123=1;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    switch (alt123) {
                                                                                                                                                                                                                                        case 1 :
                                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:814:31: DELIMITER1 st_sized_optionnal[\"P.32\", 20] ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )?
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3687); 

                                                                                                                                                                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_p3689);
                                                                                                                                                                                                                                            st_sized_optionnal("P.32", 20);

                                                                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:815:31: ( DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )? )?
                                                                                                                                                                                                                                            int alt122=2;
                                                                                                                                                                                                                                            int LA122_0 = input.LA(1);

                                                                                                                                                                                                                                            if ( (LA122_0==DELIMITER1) ) {
                                                                                                                                                                                                                                                alt122=1;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            switch (alt122) {
                                                                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:815:32: DELIMITER1 ts_sized_optionnal[\"P.33\", 26] ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )?
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3723); 

                                                                                                                                                                                                                                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_p3725);
                                                                                                                                                                                                                                                    ts_sized_optionnal("P.33", 26);

                                                                                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:816:32: ( DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )? )?
                                                                                                                                                                                                                                                    int alt121=2;
                                                                                                                                                                                                                                                    int LA121_0 = input.LA(1);

                                                                                                                                                                                                                                                    if ( (LA121_0==DELIMITER1) ) {
                                                                                                                                                                                                                                                        alt121=1;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    switch (alt121) {
                                                                                                                                                                                                                                                        case 1 :
                                                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:816:33: DELIMITER1 ts_sized_optionnal[\"P.34\", 26] ( DELIMITER1 )?
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3760); 

                                                                                                                                                                                                                                                            pushFollow(FOLLOW_ts_sized_optionnal_in_line_p3762);
                                                                                                                                                                                                                                                            ts_sized_optionnal("P.34", 26);

                                                                                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:817:33: ( DELIMITER1 )?
                                                                                                                                                                                                                                                            int alt120=2;
                                                                                                                                                                                                                                                            int LA120_0 = input.LA(1);

                                                                                                                                                                                                                                                            if ( (LA120_0==DELIMITER1) ) {
                                                                                                                                                                                                                                                                alt120=1;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            switch (alt120) {
                                                                                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:817:33: DELIMITER1
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_p3797); 

                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    break;

                                                                                                                                                                                                                                                            }


                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            break;

                                                                                                                                                                                                                                                    }


                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    break;

                                                                                                                                                                                                                                            }


                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            break;

                                                                                                                                                                                                                                    }


                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    break;

                                                                                                                                                                                                                            }


                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            break;

                                                                                                                                                                                                                    }


                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    break;

                                                                                                                                                                                                            }


                                                                                                                                                                                                            }
                                                                                                                                                                                                            break;

                                                                                                                                                                                                    }


                                                                                                                                                                                                    }
                                                                                                                                                                                                    break;

                                                                                                                                                                                            }


                                                                                                                                                                                            }
                                                                                                                                                                                            break;

                                                                                                                                                                                    }


                                                                                                                                                                                    }
                                                                                                                                                                                    break;

                                                                                                                                                                            }


                                                                                                                                                                            }
                                                                                                                                                                            break;

                                                                                                                                                                    }


                                                                                                                                                                    }
                                                                                                                                                                    break;

                                                                                                                                                            }


                                                                                                                                                            }
                                                                                                                                                            break;

                                                                                                                                                    }


                                                                                                                                                    }
                                                                                                                                                    break;

                                                                                                                                            }


                                                                                                                                            }
                                                                                                                                            break;

                                                                                                                                    }


                                                                                                                                    }
                                                                                                                                    break;

                                                                                                                            }


                                                                                                                            }
                                                                                                                            break;

                                                                                                                    }


                                                                                                                    }
                                                                                                                    break;

                                                                                                            }


                                                                                                            }
                                                                                                            break;

                                                                                                    }


                                                                                                    }
                                                                                                    break;

                                                                                            }


                                                                                            }
                                                                                            break;

                                                                                    }


                                                                                    }
                                                                                    break;

                                                                            }


                                                                            }
                                                                            break;

                                                                    }


                                                                    }
                                                                    break;

                                                            }


                                                            }
                                                            break;

                                                    }


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_p"



    // $ANTLR start "line_reg"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:820:1: line_reg : ( CR CHARR CHARE CHARG ) DELIMITER1 nm_integer_sized_mandatory[\"REG.2\", 4] DELIMITER1 st_sized_mandatory[\"REG.3\", 16] DELIMITER1 spec_reg_4[\"REG.4\", 11] DELIMITER1 spec_p_or_m[\"REG.5\"] DELIMITER1 ts_sized_mandatory[\"REG.6\", 26] ( DELIMITER1 st_sized_optionnal[\"REG.7\", 60] ( DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )? )? )? ;
    public final void line_reg() throws RecognitionException {
        startElement("REG");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:822:23: ( ( CR CHARR CHARE CHARG ) DELIMITER1 nm_integer_sized_mandatory[\"REG.2\", 4] DELIMITER1 st_sized_mandatory[\"REG.3\", 16] DELIMITER1 spec_reg_4[\"REG.4\", 11] DELIMITER1 spec_p_or_m[\"REG.5\"] DELIMITER1 ts_sized_mandatory[\"REG.6\", 26] ( DELIMITER1 st_sized_optionnal[\"REG.7\", 60] ( DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:823:3: ( CR CHARR CHARE CHARG ) DELIMITER1 nm_integer_sized_mandatory[\"REG.2\", 4] DELIMITER1 st_sized_mandatory[\"REG.3\", 16] DELIMITER1 spec_reg_4[\"REG.4\", 11] DELIMITER1 spec_p_or_m[\"REG.5\"] DELIMITER1 ts_sized_mandatory[\"REG.6\", 26] ( DELIMITER1 st_sized_optionnal[\"REG.7\", 60] ( DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )? )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:823:3: ( CR CHARR CHARE CHARG )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:823:4: CR CHARR CHARE CHARG
            {
            match(input,CR,FOLLOW_CR_in_line_reg3878); 

            match(input,CHARR,FOLLOW_CHARR_in_line_reg3880); 

            match(input,CHARE,FOLLOW_CHARE_in_line_reg3882); 

            match(input,CHARG,FOLLOW_CHARG_in_line_reg3884); 

            }


            startElement("REG.1");content("REG");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3891); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_reg3893);
            nm_integer_sized_mandatory("REG.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3898); 

            pushFollow(FOLLOW_st_sized_mandatory_in_line_reg3900);
            st_sized_mandatory("REG.3", 16);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3905); 

            pushFollow(FOLLOW_spec_reg_4_in_line_reg3907);
            spec_reg_4("REG.4", 11);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3912); 

            pushFollow(FOLLOW_spec_p_or_m_in_line_reg3914);
            spec_p_or_m("REG.5");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3919); 

            pushFollow(FOLLOW_ts_sized_mandatory_in_line_reg3921);
            ts_sized_mandatory("REG.6", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:830:3: ( DELIMITER1 st_sized_optionnal[\"REG.7\", 60] ( DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )? )? )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==DELIMITER1) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:830:4: DELIMITER1 st_sized_optionnal[\"REG.7\", 60] ( DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3930); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_line_reg3932);
                    st_sized_optionnal("REG.7", 60);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:831:4: ( DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )? )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==DELIMITER1) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:831:5: DELIMITER1 st_sized_optionnal[\"REG.8\", 10] ( DELIMITER1 )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3939); 

                            pushFollow(FOLLOW_st_sized_optionnal_in_line_reg3941);
                            st_sized_optionnal("REG.8", 10);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:832:5: ( DELIMITER1 )?
                            int alt151=2;
                            int LA151_0 = input.LA(1);

                            if ( (LA151_0==DELIMITER1) ) {
                                alt151=1;
                            }
                            switch (alt151) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:832:5: DELIMITER1
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_reg3948); 

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_reg"



    // $ANTLR start "line_obr"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:834:1: line_obr : ( CR CHARO CHARB CHARR ) DELIMITER1 nm_integer_sized_mandatory[\"OBR.2\", 4] DELIMITER1 spec_sized_9_3[\"OBR.3\", 23] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.4\", 23] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 640000] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 64000] )* DELIMITER1 st_sized_optionnal[\"OBR.6\", 2] ( REPETITEUR st_sized_optionnal[\"OBR.6\", 2] )* DELIMITER1 ts_sized_optionnal[\"OBR.7\", 26] DELIMITER1 spec_non_sized_9_8[\"OBR.8\"] DELIMITER1 ts_sized_optionnal[\"OBR.9\", 26] DELIMITER1 st_sized_optionnal[\"OBR.10\", 20] DELIMITER1 spec_sized_cna[\"OBR.11\", 60] DELIMITER1 st_sized_optionnal[\"OBR.12\", 1] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.13\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? ;
    public final void line_obr() throws RecognitionException {
        startElement("OBR");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:836:23: ( ( CR CHARO CHARB CHARR ) DELIMITER1 nm_integer_sized_mandatory[\"OBR.2\", 4] DELIMITER1 spec_sized_9_3[\"OBR.3\", 23] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.4\", 23] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 640000] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 64000] )* DELIMITER1 st_sized_optionnal[\"OBR.6\", 2] ( REPETITEUR st_sized_optionnal[\"OBR.6\", 2] )* DELIMITER1 ts_sized_optionnal[\"OBR.7\", 26] DELIMITER1 spec_non_sized_9_8[\"OBR.8\"] DELIMITER1 ts_sized_optionnal[\"OBR.9\", 26] DELIMITER1 st_sized_optionnal[\"OBR.10\", 20] DELIMITER1 spec_sized_cna[\"OBR.11\", 60] DELIMITER1 st_sized_optionnal[\"OBR.12\", 1] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.13\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:837:3: ( CR CHARO CHARB CHARR ) DELIMITER1 nm_integer_sized_mandatory[\"OBR.2\", 4] DELIMITER1 spec_sized_9_3[\"OBR.3\", 23] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.4\", 23] DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 640000] ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 64000] )* DELIMITER1 st_sized_optionnal[\"OBR.6\", 2] ( REPETITEUR st_sized_optionnal[\"OBR.6\", 2] )* DELIMITER1 ts_sized_optionnal[\"OBR.7\", 26] DELIMITER1 spec_non_sized_9_8[\"OBR.8\"] DELIMITER1 ts_sized_optionnal[\"OBR.9\", 26] DELIMITER1 st_sized_optionnal[\"OBR.10\", 20] DELIMITER1 spec_sized_cna[\"OBR.11\", 60] DELIMITER1 st_sized_optionnal[\"OBR.12\", 1] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.13\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:837:3: ( CR CHARO CHARB CHARR )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:837:4: CR CHARO CHARB CHARR
            {
            match(input,CR,FOLLOW_CR_in_line_obr3972); 

            match(input,CHARO,FOLLOW_CHARO_in_line_obr3974); 

            match(input,CHARB,FOLLOW_CHARB_in_line_obr3976); 

            match(input,CHARR,FOLLOW_CHARR_in_line_obr3978); 

            }


            startElement("OBR.1");content("OBR");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr3985); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_obr3987);
            nm_integer_sized_mandatory("OBR.2", 4);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr3992); 

            pushFollow(FOLLOW_spec_sized_9_3_in_line_obr3994);
            spec_sized_9_3("OBR.3", 23);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr3999); 

            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_2_in_line_obr4001);
            spec_sized_mult_lvl1_st_optionnal_2("OBR.4", 23);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4006); 

            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obr4008);
            spec_sized_mult_lvl1_st_optionnal_6("OBR.5", 640000);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:841:67: ( REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 64000] )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==REPETITEUR) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:841:68: REPETITEUR spec_sized_mult_lvl1_st_optionnal_6[\"OBR.5\", 64000]
            	    {
            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obr4012); 

            	    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obr4014);
            	    spec_sized_mult_lvl1_st_optionnal_6("OBR.5", 64000);

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4024); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4026);
            st_sized_optionnal("OBR.6", 2);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:843:45: ( REPETITEUR st_sized_optionnal[\"OBR.6\", 2] )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==REPETITEUR) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:843:46: REPETITEUR st_sized_optionnal[\"OBR.6\", 2]
            	    {
            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obr4030); 

            	    pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4032);
            	    st_sized_optionnal("OBR.6", 2);

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4039); 

            pushFollow(FOLLOW_ts_sized_optionnal_in_line_obr4041);
            ts_sized_optionnal("OBR.7", 26);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4046); 

            pushFollow(FOLLOW_spec_non_sized_9_8_in_line_obr4048);
            spec_non_sized_9_8("OBR.8");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4053); 

            pushFollow(FOLLOW_ts_sized_optionnal_in_line_obr4055);
            ts_sized_optionnal("OBR.9", 26);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4063); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4065);
            st_sized_optionnal("OBR.10", 20);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4070); 

            pushFollow(FOLLOW_spec_sized_cna_in_line_obr4072);
            spec_sized_cna("OBR.11", 60);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4080); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4082);
            st_sized_optionnal("OBR.12", 1);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:853:3: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.13\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==DELIMITER1) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:853:4: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.13\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4091); 

                    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_2_in_line_obr4093);
                    spec_sized_mult_lvl1_st_optionnal_2("OBR.13", 60);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:854:4: ( DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==DELIMITER1) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:854:5: DELIMITER1 st_sized_optionnal[\"OBR.14\", 300] ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4100); 

                            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4102);
                            st_sized_optionnal("OBR.14", 300);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:855:5: ( DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                            int alt181=2;
                            int LA181_0 = input.LA(1);

                            if ( (LA181_0==DELIMITER1) ) {
                                alt181=1;
                            }
                            switch (alt181) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:855:6: DELIMITER1 ts_sized_optionnal[\"OBR.15\", 26] ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4110); 

                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_obr4112);
                                    ts_sized_optionnal("OBR.15", 26);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:856:6: ( DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                    int alt180=2;
                                    int LA180_0 = input.LA(1);

                                    if ( (LA180_0==DELIMITER1) ) {
                                        alt180=1;
                                    }
                                    switch (alt180) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:856:7: DELIMITER1 spec_sized_9_16[\"OBR.16\", 300] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4121); 

                                            pushFollow(FOLLOW_spec_sized_9_16_in_line_obr4123);
                                            spec_sized_9_16("OBR.16", 300);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:857:7: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                            int alt179=2;
                                            int LA179_0 = input.LA(1);

                                            if ( (LA179_0==DELIMITER1) ) {
                                                alt179=1;
                                            }
                                            switch (alt179) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:857:8: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBR.17\", 60] ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                    {
                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4133); 

                                                    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obr4135);
                                                    spec_sized_mult_lvl1_st_optionnal_6("OBR.17", 60);

                                                    state._fsp--;


                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:858:8: ( DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                    int alt178=2;
                                                    int LA178_0 = input.LA(1);

                                                    if ( (LA178_0==DELIMITER1) ) {
                                                        alt178=1;
                                                    }
                                                    switch (alt178) {
                                                        case 1 :
                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:858:9: DELIMITER1 spec_sized_tn[\"OBR.18\", 40] ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                            {
                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4146); 

                                                            pushFollow(FOLLOW_spec_sized_tn_in_line_obr4148);
                                                            spec_sized_tn("OBR.18", 40);

                                                            state._fsp--;


                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:859:9: ( DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                            int alt177=2;
                                                            int LA177_0 = input.LA(1);

                                                            if ( (LA177_0==DELIMITER1) ) {
                                                                alt177=1;
                                                            }
                                                            switch (alt177) {
                                                                case 1 :
                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:859:10: DELIMITER1 st_sized_optionnal[\"OBR.19\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                    {
                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4160); 

                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4162);
                                                                    st_sized_optionnal("OBR.19", 60);

                                                                    state._fsp--;


                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:860:10: ( DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                    int alt176=2;
                                                                    int LA176_0 = input.LA(1);

                                                                    if ( (LA176_0==DELIMITER1) ) {
                                                                        alt176=1;
                                                                    }
                                                                    switch (alt176) {
                                                                        case 1 :
                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:860:11: DELIMITER1 st_sized_optionnal[\"OBR.20\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                            {
                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4175); 

                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4177);
                                                                            st_sized_optionnal("OBR.20", 60);

                                                                            state._fsp--;


                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:861:11: ( DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                            int alt175=2;
                                                                            int LA175_0 = input.LA(1);

                                                                            if ( (LA175_0==DELIMITER1) ) {
                                                                                alt175=1;
                                                                            }
                                                                            switch (alt175) {
                                                                                case 1 :
                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:861:12: DELIMITER1 st_sized_optionnal[\"OBR.21\", 60] ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                    {
                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4191); 

                                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4193);
                                                                                    st_sized_optionnal("OBR.21", 60);

                                                                                    state._fsp--;


                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:862:12: ( DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                    int alt174=2;
                                                                                    int LA174_0 = input.LA(1);

                                                                                    if ( (LA174_0==DELIMITER1) ) {
                                                                                        alt174=1;
                                                                                    }
                                                                                    switch (alt174) {
                                                                                        case 1 :
                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:862:13: DELIMITER1 st_sized_optionnal[\"OBR.22\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                            {
                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4208); 

                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4210);
                                                                                            st_sized_optionnal("OBR.22", 60);

                                                                                            state._fsp--;


                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:863:13: ( DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                            int alt173=2;
                                                                                            int LA173_0 = input.LA(1);

                                                                                            if ( (LA173_0==DELIMITER1) ) {
                                                                                                alt173=1;
                                                                                            }
                                                                                            switch (alt173) {
                                                                                                case 1 :
                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:863:14: DELIMITER1 ts_sized_optionnal[\"OBR.23\", 26] ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                    {
                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4226); 

                                                                                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_obr4228);
                                                                                                    ts_sized_optionnal("OBR.23", 26);

                                                                                                    state._fsp--;


                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:864:14: ( DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                    int alt172=2;
                                                                                                    int LA172_0 = input.LA(1);

                                                                                                    if ( (LA172_0==DELIMITER1) ) {
                                                                                                        alt172=1;
                                                                                                    }
                                                                                                    switch (alt172) {
                                                                                                        case 1 :
                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:864:15: DELIMITER1 spec_const_race[\"OBR.24\"] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                            {
                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4245); 

                                                                                                            pushFollow(FOLLOW_spec_const_race_in_line_obr4247);
                                                                                                            spec_const_race("OBR.24");

                                                                                                            state._fsp--;


                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:865:15: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                            int alt171=2;
                                                                                                            int LA171_0 = input.LA(1);

                                                                                                            if ( (LA171_0==DELIMITER1) ) {
                                                                                                                alt171=1;
                                                                                                            }
                                                                                                            switch (alt171) {
                                                                                                                case 1 :
                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:865:16: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_2[\"OBR.25\", 10] ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                    {
                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4265); 

                                                                                                                    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_2_in_line_obr4267);
                                                                                                                    spec_sized_mult_lvl1_st_optionnal_2("OBR.25", 10);

                                                                                                                    state._fsp--;


                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:866:16: ( DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                    int alt170=2;
                                                                                                                    int LA170_0 = input.LA(1);

                                                                                                                    if ( (LA170_0==DELIMITER1) ) {
                                                                                                                        alt170=1;
                                                                                                                    }
                                                                                                                    switch (alt170) {
                                                                                                                        case 1 :
                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:866:17: DELIMITER1 spec_const_9_26[\"OBR.26\"] ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                            {
                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4286); 

                                                                                                                            pushFollow(FOLLOW_spec_const_9_26_in_line_obr4288);
                                                                                                                            spec_const_9_26("OBR.26");

                                                                                                                            state._fsp--;


                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:867:17: ( DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                            int alt169=2;
                                                                                                                            int LA169_0 = input.LA(1);

                                                                                                                            if ( (LA169_0==DELIMITER1) ) {
                                                                                                                                alt169=1;
                                                                                                                            }
                                                                                                                            switch (alt169) {
                                                                                                                                case 1 :
                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:867:18: DELIMITER1 spec_const_race[\"OBR.27\"] ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                    {
                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4308); 

                                                                                                                                    pushFollow(FOLLOW_spec_const_race_in_line_obr4310);
                                                                                                                                    spec_const_race("OBR.27");

                                                                                                                                    state._fsp--;


                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:868:18: ( DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )?
                                                                                                                                    int alt168=2;
                                                                                                                                    int LA168_0 = input.LA(1);

                                                                                                                                    if ( (LA168_0==DELIMITER1) ) {
                                                                                                                                        alt168=1;
                                                                                                                                    }
                                                                                                                                    switch (alt168) {
                                                                                                                                        case 1 :
                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:868:19: DELIMITER1 spec_const_race[\"OBR.28\"] ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )?
                                                                                                                                            {
                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4331); 

                                                                                                                                            pushFollow(FOLLOW_spec_const_race_in_line_obr4333);
                                                                                                                                            spec_const_race("OBR.28");

                                                                                                                                            state._fsp--;


                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:869:19: ( DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )?
                                                                                                                                            int alt167=2;
                                                                                                                                            int LA167_0 = input.LA(1);

                                                                                                                                            if ( (LA167_0==DELIMITER1) ) {
                                                                                                                                                alt167=1;
                                                                                                                                            }
                                                                                                                                            switch (alt167) {
                                                                                                                                                case 1 :
                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:869:20: DELIMITER1 spec_sized_cna[\"OBR.29\", 150] ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )* ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )?
                                                                                                                                                    {
                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4355); 

                                                                                                                                                    pushFollow(FOLLOW_spec_sized_cna_in_line_obr4357);
                                                                                                                                                    spec_sized_cna("OBR.29", 150);

                                                                                                                                                    state._fsp--;


                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:869:61: ( REPETITEUR spec_sized_cna[\"OBR.29\", 150] )*
                                                                                                                                                    loop156:
                                                                                                                                                    do {
                                                                                                                                                        int alt156=2;
                                                                                                                                                        int LA156_0 = input.LA(1);

                                                                                                                                                        if ( (LA156_0==REPETITEUR) ) {
                                                                                                                                                            alt156=1;
                                                                                                                                                        }


                                                                                                                                                        switch (alt156) {
                                                                                                                                                    	case 1 :
                                                                                                                                                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:869:62: REPETITEUR spec_sized_cna[\"OBR.29\", 150]
                                                                                                                                                    	    {
                                                                                                                                                    	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obr4361); 

                                                                                                                                                    	    pushFollow(FOLLOW_spec_sized_cna_in_line_obr4363);
                                                                                                                                                    	    spec_sized_cna("OBR.29", 150);

                                                                                                                                                    	    state._fsp--;


                                                                                                                                                    	    }
                                                                                                                                                    	    break;

                                                                                                                                                    	default :
                                                                                                                                                    	    break loop156;
                                                                                                                                                        }
                                                                                                                                                    } while (true);


                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:870:20: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )? )?
                                                                                                                                                    int alt166=2;
                                                                                                                                                    int LA166_0 = input.LA(1);

                                                                                                                                                    if ( (LA166_0==DELIMITER1) ) {
                                                                                                                                                        alt166=1;
                                                                                                                                                    }
                                                                                                                                                    switch (alt166) {
                                                                                                                                                        case 1 :
                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:870:21: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_4[\"OBR.30\", 150] ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )?
                                                                                                                                                            {
                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4388); 

                                                                                                                                                            pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_4_in_line_obr4390);
                                                                                                                                                            spec_sized_mult_lvl1_st_optionnal_4("OBR.30", 150);

                                                                                                                                                            state._fsp--;


                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:871:21: ( DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )? )?
                                                                                                                                                            int alt165=2;
                                                                                                                                                            int LA165_0 = input.LA(1);

                                                                                                                                                            if ( (LA165_0==DELIMITER1) ) {
                                                                                                                                                                alt165=1;
                                                                                                                                                            }
                                                                                                                                                            switch (alt165) {
                                                                                                                                                                case 1 :
                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:871:22: DELIMITER1 spec_const_9_31[\"OBR.31\"] ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )?
                                                                                                                                                                    {
                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4414); 

                                                                                                                                                                    pushFollow(FOLLOW_spec_const_9_31_in_line_obr4416);
                                                                                                                                                                    spec_const_9_31("OBR.31");

                                                                                                                                                                    state._fsp--;


                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:873:22: ( DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )? )?
                                                                                                                                                                    int alt164=2;
                                                                                                                                                                    int LA164_0 = input.LA(1);

                                                                                                                                                                    if ( (LA164_0==DELIMITER1) ) {
                                                                                                                                                                        alt164=1;
                                                                                                                                                                    }
                                                                                                                                                                    switch (alt164) {
                                                                                                                                                                        case 1 :
                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:873:23: DELIMITER1 st_sized_optionnal[\"OBR.32\", 300] ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )* ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )?
                                                                                                                                                                            {
                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4463); 

                                                                                                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4465);
                                                                                                                                                                            st_sized_optionnal("OBR.32", 300);

                                                                                                                                                                            state._fsp--;


                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:873:68: ( REPETITEUR st_sized_optionnal[\"OBR.32\", 300] )*
                                                                                                                                                                            loop157:
                                                                                                                                                                            do {
                                                                                                                                                                                int alt157=2;
                                                                                                                                                                                int LA157_0 = input.LA(1);

                                                                                                                                                                                if ( (LA157_0==REPETITEUR) ) {
                                                                                                                                                                                    alt157=1;
                                                                                                                                                                                }


                                                                                                                                                                                switch (alt157) {
                                                                                                                                                                            	case 1 :
                                                                                                                                                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:873:69: REPETITEUR st_sized_optionnal[\"OBR.32\", 300]
                                                                                                                                                                            	    {
                                                                                                                                                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obr4469); 

                                                                                                                                                                            	    pushFollow(FOLLOW_st_sized_optionnal_in_line_obr4471);
                                                                                                                                                                            	    st_sized_optionnal("OBR.32", 300);

                                                                                                                                                                            	    state._fsp--;


                                                                                                                                                                            	    }
                                                                                                                                                                            	    break;

                                                                                                                                                                            	default :
                                                                                                                                                                            	    break loop157;
                                                                                                                                                                                }
                                                                                                                                                                            } while (true);


                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:874:23: ( DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )? )?
                                                                                                                                                                            int alt163=2;
                                                                                                                                                                            int LA163_0 = input.LA(1);

                                                                                                                                                                            if ( (LA163_0==DELIMITER1) ) {
                                                                                                                                                                                alt163=1;
                                                                                                                                                                            }
                                                                                                                                                                            switch (alt163) {
                                                                                                                                                                                case 1 :
                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:874:24: DELIMITER1 spec_sized_cna[\"OBR.33\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )?
                                                                                                                                                                                    {
                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4499); 

                                                                                                                                                                                    pushFollow(FOLLOW_spec_sized_cna_in_line_obr4501);
                                                                                                                                                                                    spec_sized_cna("OBR.33", 60);

                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:875:24: ( DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )? )?
                                                                                                                                                                                    int alt162=2;
                                                                                                                                                                                    int LA162_0 = input.LA(1);

                                                                                                                                                                                    if ( (LA162_0==DELIMITER1) ) {
                                                                                                                                                                                        alt162=1;
                                                                                                                                                                                    }
                                                                                                                                                                                    switch (alt162) {
                                                                                                                                                                                        case 1 :
                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:875:25: DELIMITER1 spec_sized_cna[\"OBR.34\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )?
                                                                                                                                                                                            {
                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4528); 

                                                                                                                                                                                            pushFollow(FOLLOW_spec_sized_cna_in_line_obr4530);
                                                                                                                                                                                            spec_sized_cna("OBR.34", 60);

                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:876:25: ( DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )? )?
                                                                                                                                                                                            int alt161=2;
                                                                                                                                                                                            int LA161_0 = input.LA(1);

                                                                                                                                                                                            if ( (LA161_0==DELIMITER1) ) {
                                                                                                                                                                                                alt161=1;
                                                                                                                                                                                            }
                                                                                                                                                                                            switch (alt161) {
                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:876:26: DELIMITER1 spec_sized_cna[\"OBR.35\", 60] ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )?
                                                                                                                                                                                                    {
                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4558); 

                                                                                                                                                                                                    pushFollow(FOLLOW_spec_sized_cna_in_line_obr4560);
                                                                                                                                                                                                    spec_sized_cna("OBR.35", 60);

                                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:877:26: ( DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )? )?
                                                                                                                                                                                                    int alt160=2;
                                                                                                                                                                                                    int LA160_0 = input.LA(1);

                                                                                                                                                                                                    if ( (LA160_0==DELIMITER1) ) {
                                                                                                                                                                                                        alt160=1;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    switch (alt160) {
                                                                                                                                                                                                        case 1 :
                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:877:27: DELIMITER1 spec_sized_cna[\"OBR.36\", 60] ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )?
                                                                                                                                                                                                            {
                                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4589); 

                                                                                                                                                                                                            pushFollow(FOLLOW_spec_sized_cna_in_line_obr4591);
                                                                                                                                                                                                            spec_sized_cna("OBR.36", 60);

                                                                                                                                                                                                            state._fsp--;


                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:878:27: ( DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )? )?
                                                                                                                                                                                                            int alt159=2;
                                                                                                                                                                                                            int LA159_0 = input.LA(1);

                                                                                                                                                                                                            if ( (LA159_0==DELIMITER1) ) {
                                                                                                                                                                                                                alt159=1;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            switch (alt159) {
                                                                                                                                                                                                                case 1 :
                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:878:28: DELIMITER1 ts_sized_optionnal[\"OBR.37\", 26] ( DELIMITER1 )?
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4621); 

                                                                                                                                                                                                                    pushFollow(FOLLOW_ts_sized_optionnal_in_line_obr4623);
                                                                                                                                                                                                                    ts_sized_optionnal("OBR.37", 26);

                                                                                                                                                                                                                    state._fsp--;


                                                                                                                                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:879:29: ( DELIMITER1 )?
                                                                                                                                                                                                                    int alt158=2;
                                                                                                                                                                                                                    int LA158_0 = input.LA(1);

                                                                                                                                                                                                                    if ( (LA158_0==DELIMITER1) ) {
                                                                                                                                                                                                                        alt158=1;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    switch (alt158) {
                                                                                                                                                                                                                        case 1 :
                                                                                                                                                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:879:29: DELIMITER1
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obr4654); 

                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            break;

                                                                                                                                                                                                                    }


                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    break;

                                                                                                                                                                                                            }


                                                                                                                                                                                                            }
                                                                                                                                                                                                            break;

                                                                                                                                                                                                    }


                                                                                                                                                                                                    }
                                                                                                                                                                                                    break;

                                                                                                                                                                                            }


                                                                                                                                                                                            }
                                                                                                                                                                                            break;

                                                                                                                                                                                    }


                                                                                                                                                                                    }
                                                                                                                                                                                    break;

                                                                                                                                                                            }


                                                                                                                                                                            }
                                                                                                                                                                            break;

                                                                                                                                                                    }


                                                                                                                                                                    }
                                                                                                                                                                    break;

                                                                                                                                                            }


                                                                                                                                                            }
                                                                                                                                                            break;

                                                                                                                                                    }


                                                                                                                                                    }
                                                                                                                                                    break;

                                                                                                                                            }


                                                                                                                                            }
                                                                                                                                            break;

                                                                                                                                    }


                                                                                                                                    }
                                                                                                                                    break;

                                                                                                                            }


                                                                                                                            }
                                                                                                                            break;

                                                                                                                    }


                                                                                                                    }
                                                                                                                    break;

                                                                                                            }


                                                                                                            }
                                                                                                            break;

                                                                                                    }


                                                                                                    }
                                                                                                    break;

                                                                                            }


                                                                                            }
                                                                                            break;

                                                                                    }


                                                                                    }
                                                                                    break;

                                                                            }


                                                                            }
                                                                            break;

                                                                    }


                                                                    }
                                                                    break;

                                                            }


                                                            }
                                                            break;

                                                    }


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_obr"



    // $ANTLR start "line_obx"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:881:1: line_obx : ( CR CHARO CHARB CHARX ) DELIMITER1 nm_integer_sized_mandatory[\"OBX.2\", 10] DELIMITER1 ( ( spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) ) ;
    public final void line_obx() throws RecognitionException {
        startElement("OBX");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:883:23: ( ( CR CHARO CHARB CHARX ) DELIMITER1 nm_integer_sized_mandatory[\"OBX.2\", 10] DELIMITER1 ( ( spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:884:3: ( CR CHARO CHARB CHARX ) DELIMITER1 nm_integer_sized_mandatory[\"OBX.2\", 10] DELIMITER1 ( ( spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:884:3: ( CR CHARO CHARB CHARX )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:884:4: CR CHARO CHARB CHARX
            {
            match(input,CR,FOLLOW_CR_in_line_obx4724); 

            match(input,CHARO,FOLLOW_CHARO_in_line_obx4726); 

            match(input,CHARB,FOLLOW_CHARB_in_line_obx4728); 

            match(input,CHARX,FOLLOW_CHARX_in_line_obx4730); 

            }


            startElement("OBX.1");content("OBX");endElement();

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4737); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_obx4739);
            nm_integer_sized_mandatory("OBX.2", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4744); 

            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:887:5: ( ( spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) | ( spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? ) )
            int alt219=7;
            switch ( input.LA(1) ) {
            case CHARN:
                {
                alt219=1;
                }
                break;
            case CHARC:
                {
                int LA219_2 = input.LA(2);

                if ( (LA219_2==CHARE) ) {
                    alt219=2;
                }
                else if ( (LA219_2==CHARK||LA219_2==CHARN) ) {
                    alt219=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 2, input);

                    throw nvae;

                }
                }
                break;
            case CHARF:
                {
                alt219=3;
                }
                break;
            case CHARS:
                {
                alt219=4;
                }
                break;
            case CHARG:
                {
                int LA219_5 = input.LA(2);

                if ( (LA219_5==CHARC) ) {
                    alt219=5;
                }
                else if ( (LA219_5==CHARB||LA219_5==CHARN) ) {
                    alt219=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 5, input);

                    throw nvae;

                }
                }
                break;
            case CHART:
                {
                int LA219_6 = input.LA(2);

                if ( (LA219_6==CHARX) ) {
                    alt219=6;
                }
                else if ( (LA219_6==CHARN) ) {
                    alt219=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 6, input);

                    throw nvae;

                }
                }
                break;
            case CHARA:
            case CHARD:
            case CHARP:
                {
                alt219=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }

            switch (alt219) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:887:6: ( spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:887:6: ( spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:887:7: spec_const_10_3_nm[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_nm_in_line_obx4752);
                    spec_const_10_3_nm("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:888:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==DELIMITER1) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:888:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4761); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx4763);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:889:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt187=2;
                            int LA187_0 = input.LA(1);

                            if ( (LA187_0==DELIMITER1) ) {
                                alt187=1;
                            }
                            switch (alt187) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:889:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4773); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx4775);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:890:8: ( DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt186=2;
                                    int LA186_0 = input.LA(1);

                                    if ( (LA186_0==DELIMITER1) ) {
                                        alt186=1;
                                    }
                                    switch (alt186) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:890:9: DELIMITER1 nm_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4786); 

                                            pushFollow(FOLLOW_nm_sized_optionnal_in_line_obx4788);
                                            nm_sized_optionnal("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:890:55: ( REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000] )*
                                            loop184:
                                            do {
                                                int alt184=2;
                                                int LA184_0 = input.LA(1);

                                                if ( (LA184_0==REPETITEUR) ) {
                                                    alt184=1;
                                                }


                                                switch (alt184) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:890:56: REPETITEUR nm_sized_optionnal[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx4792); 

                                            	    pushFollow(FOLLOW_nm_sized_optionnal_in_line_obx4794);
                                            	    nm_sized_optionnal("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop184;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:891:9: ( line_obx2_1_post10_6 )?
                                            int alt185=2;
                                            int LA185_0 = input.LA(1);

                                            if ( (LA185_0==DELIMITER1) ) {
                                                alt185=1;
                                            }
                                            switch (alt185) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:891:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx4807);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:892:7: ( spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:892:7: ( spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:892:8: spec_const_10_3_ce[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_ce_in_line_obx4824);
                    spec_const_10_3_ce("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:893:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==DELIMITER1) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:893:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4833); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx4835);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:894:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt192=2;
                            int LA192_0 = input.LA(1);

                            if ( (LA192_0==DELIMITER1) ) {
                                alt192=1;
                            }
                            switch (alt192) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:894:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4845); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx4847);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:895:8: ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt191=2;
                                    int LA191_0 = input.LA(1);

                                    if ( (LA191_0==DELIMITER1) ) {
                                        alt191=1;
                                    }
                                    switch (alt191) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:895:9: DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4858); 

                                            pushFollow(FOLLOW_spec_sized_10_6_in_line_obx4860);
                                            spec_sized_10_6("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:895:52: ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )*
                                            loop189:
                                            do {
                                                int alt189=2;
                                                int LA189_0 = input.LA(1);

                                                if ( (LA189_0==REPETITEUR) ) {
                                                    alt189=1;
                                                }


                                                switch (alt189) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:895:53: REPETITEUR spec_sized_10_6[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx4864); 

                                            	    pushFollow(FOLLOW_spec_sized_10_6_in_line_obx4866);
                                            	    spec_sized_10_6("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop189;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:896:9: ( line_obx2_1_post10_6 )?
                                            int alt190=2;
                                            int LA190_0 = input.LA(1);

                                            if ( (LA190_0==DELIMITER1) ) {
                                                alt190=1;
                                            }
                                            switch (alt190) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:896:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx4879);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:897:7: ( spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:897:7: ( spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:897:8: spec_const_10_3_fic[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_fic_in_line_obx4896);
                    spec_const_10_3_fic("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:898:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==DELIMITER1) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:898:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4905); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx4907);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:899:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt197=2;
                            int LA197_0 = input.LA(1);

                            if ( (LA197_0==DELIMITER1) ) {
                                alt197=1;
                            }
                            switch (alt197) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:899:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4917); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx4919);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:900:8: ( DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt196=2;
                                    int LA196_0 = input.LA(1);

                                    if ( (LA196_0==DELIMITER1) ) {
                                        alt196=1;
                                    }
                                    switch (alt196) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:900:9: DELIMITER1 spec_sized_10_6[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4930); 

                                            pushFollow(FOLLOW_spec_sized_10_6_in_line_obx4932);
                                            spec_sized_10_6("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:900:52: ( REPETITEUR spec_sized_10_6[\"OBX.6\", 64000] )*
                                            loop194:
                                            do {
                                                int alt194=2;
                                                int LA194_0 = input.LA(1);

                                                if ( (LA194_0==REPETITEUR) ) {
                                                    alt194=1;
                                                }


                                                switch (alt194) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:900:53: REPETITEUR spec_sized_10_6[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx4936); 

                                            	    pushFollow(FOLLOW_spec_sized_10_6_in_line_obx4938);
                                            	    spec_sized_10_6("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop194;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:901:9: ( line_obx2_1_post10_6 )?
                                            int alt195=2;
                                            int LA195_0 = input.LA(1);

                                            if ( (LA195_0==DELIMITER1) ) {
                                                alt195=1;
                                            }
                                            switch (alt195) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:901:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx4951);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:902:7: ( spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:902:7: ( spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:902:8: spec_const_10_3_st[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_st_in_line_obx4968);
                    spec_const_10_3_st("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:903:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==DELIMITER1) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:903:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4977); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx4979);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:904:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt202=2;
                            int LA202_0 = input.LA(1);

                            if ( (LA202_0==DELIMITER1) ) {
                                alt202=1;
                            }
                            switch (alt202) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:904:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx4989); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx4991);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:905:8: ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt201=2;
                                    int LA201_0 = input.LA(1);

                                    if ( (LA201_0==DELIMITER1) ) {
                                        alt201=1;
                                    }
                                    switch (alt201) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:905:9: DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5002); 

                                            pushFollow(FOLLOW_spec_sized_10_6_tx_in_line_obx5004);
                                            spec_sized_10_6_tx("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:905:55: ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )*
                                            loop199:
                                            do {
                                                int alt199=2;
                                                int LA199_0 = input.LA(1);

                                                if ( (LA199_0==REPETITEUR) ) {
                                                    alt199=1;
                                                }


                                                switch (alt199) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:905:56: REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx5008); 

                                            	    pushFollow(FOLLOW_spec_sized_10_6_tx_in_line_obx5010);
                                            	    spec_sized_10_6_tx("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop199;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:906:9: ( line_obx2_1_post10_6 )?
                                            int alt200=2;
                                            int LA200_0 = input.LA(1);

                                            if ( (LA200_0==DELIMITER1) ) {
                                                alt200=1;
                                            }
                                            switch (alt200) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:906:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx5023);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:907:7: ( spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:907:7: ( spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:907:8: spec_const_10_3_gc[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_gc_in_line_obx5040);
                    spec_const_10_3_gc("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:908:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==DELIMITER1) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:908:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5049); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx5051);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:909:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt207=2;
                            int LA207_0 = input.LA(1);

                            if ( (LA207_0==DELIMITER1) ) {
                                alt207=1;
                            }
                            switch (alt207) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:909:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5061); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx5063);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:910:8: ( DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt206=2;
                                    int LA206_0 = input.LA(1);

                                    if ( (LA206_0==DELIMITER1) ) {
                                        alt206=1;
                                    }
                                    switch (alt206) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:910:9: DELIMITER1 spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5074); 

                                            pushFollow(FOLLOW_spec_sized_mult_lvl1_nm_optionnal_2_in_line_obx5076);
                                            spec_sized_mult_lvl1_nm_optionnal_2("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:910:72: ( REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000] )*
                                            loop204:
                                            do {
                                                int alt204=2;
                                                int LA204_0 = input.LA(1);

                                                if ( (LA204_0==REPETITEUR) ) {
                                                    alt204=1;
                                                }


                                                switch (alt204) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:910:73: REPETITEUR spec_sized_mult_lvl1_nm_optionnal_2[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx5080); 

                                            	    pushFollow(FOLLOW_spec_sized_mult_lvl1_nm_optionnal_2_in_line_obx5082);
                                            	    spec_sized_mult_lvl1_nm_optionnal_2("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop204;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:911:9: ( line_obx2_1_post10_6 )?
                                            int alt205=2;
                                            int LA205_0 = input.LA(1);

                                            if ( (LA205_0==DELIMITER1) ) {
                                                alt205=1;
                                            }
                                            switch (alt205) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:911:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx5095);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 6 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:912:7: ( spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:912:7: ( spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:912:8: spec_const_10_3_tx[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_tx_in_line_obx5112);
                    spec_const_10_3_tx("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:913:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==DELIMITER1) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:913:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5121); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx5123);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:914:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt212=2;
                            int LA212_0 = input.LA(1);

                            if ( (LA212_0==DELIMITER1) ) {
                                alt212=1;
                            }
                            switch (alt212) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:914:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5133); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx5135);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:915:8: ( DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt211=2;
                                    int LA211_0 = input.LA(1);

                                    if ( (LA211_0==DELIMITER1) ) {
                                        alt211=1;
                                    }
                                    switch (alt211) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:915:9: DELIMITER1 spec_sized_10_6_tx[\"OBX.6\", 64000] ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5146); 

                                            pushFollow(FOLLOW_spec_sized_10_6_tx_in_line_obx5148);
                                            spec_sized_10_6_tx("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:915:55: ( REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000] )*
                                            loop209:
                                            do {
                                                int alt209=2;
                                                int LA209_0 = input.LA(1);

                                                if ( (LA209_0==REPETITEUR) ) {
                                                    alt209=1;
                                                }


                                                switch (alt209) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:915:56: REPETITEUR spec_sized_10_6_tx[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx5152); 

                                            	    pushFollow(FOLLOW_spec_sized_10_6_tx_in_line_obx5154);
                                            	    spec_sized_10_6_tx("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop209;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:916:9: ( line_obx2_1_post10_6 )?
                                            int alt210=2;
                                            int LA210_0 = input.LA(1);

                                            if ( (LA210_0==DELIMITER1) ) {
                                                alt210=1;
                                            }
                                            switch (alt210) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:916:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx5167);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:917:7: ( spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:917:7: ( spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:917:8: spec_const_10_3_std[\"OBX.3\"] ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    {
                    pushFollow(FOLLOW_spec_const_10_3_std_in_line_obx5184);
                    spec_const_10_3_std("OBX.3");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:918:6: ( DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )? )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==DELIMITER1) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:918:7: DELIMITER1 spec_sized_10_4[\"OBX.4\", 200] ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5193); 

                            pushFollow(FOLLOW_spec_sized_10_4_in_line_obx5195);
                            spec_sized_10_4("OBX.4", 200);

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:919:7: ( DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )? )?
                            int alt217=2;
                            int LA217_0 = input.LA(1);

                            if ( (LA217_0==DELIMITER1) ) {
                                alt217=1;
                            }
                            switch (alt217) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:919:8: DELIMITER1 st_sized_optionnal[\"OBX.5\", 10] ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5205); 

                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx5207);
                                    st_sized_optionnal("OBX.5", 10);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:920:8: ( DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )? )?
                                    int alt216=2;
                                    int LA216_0 = input.LA(1);

                                    if ( (LA216_0==DELIMITER1) ) {
                                        alt216=1;
                                    }
                                    switch (alt216) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:920:9: DELIMITER1 st_sized_optionnal[\"OBX.6\", 64000] ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )* ( line_obx2_1_post10_6 )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx5218); 

                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_obx5220);
                                            st_sized_optionnal("OBX.6", 64000);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:920:55: ( REPETITEUR st_sized_optionnal[\"OBX.6\", 64000] )*
                                            loop214:
                                            do {
                                                int alt214=2;
                                                int LA214_0 = input.LA(1);

                                                if ( (LA214_0==REPETITEUR) ) {
                                                    alt214=1;
                                                }


                                                switch (alt214) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:920:56: REPETITEUR st_sized_optionnal[\"OBX.6\", 64000]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx5224); 

                                            	    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx5226);
                                            	    st_sized_optionnal("OBX.6", 64000);

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop214;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:921:9: ( line_obx2_1_post10_6 )?
                                            int alt215=2;
                                            int LA215_0 = input.LA(1);

                                            if ( (LA215_0==DELIMITER1) ) {
                                                alt215=1;
                                            }
                                            switch (alt215) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:921:9: line_obx2_1_post10_6
                                                    {
                                                    pushFollow(FOLLOW_line_obx2_1_post10_6_in_line_obx5239);
                                                    line_obx2_1_post10_6();

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_obx"



    // $ANTLR start "line_obx2_1_post10_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:923:1: line_obx2_1_post10_6 : ( DELIMITER1 st_sized_optionnal[\"OBX.7\", 20] ( DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? ) ;
    public final void line_obx2_1_post10_6() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:923:21: ( ( DELIMITER1 st_sized_optionnal[\"OBX.7\", 20] ( DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:924:5: ( DELIMITER1 st_sized_optionnal[\"OBX.7\", 20] ( DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:924:5: ( DELIMITER1 st_sized_optionnal[\"OBX.7\", 20] ( DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:924:6: DELIMITER1 st_sized_optionnal[\"OBX.7\", 20] ( DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )?
            {
            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65260); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65262);
            st_sized_optionnal("OBX.7", 20);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:925:6: ( DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )? )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==DELIMITER1) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:925:7: DELIMITER1 st_sized_optionnal[\"OBX.8\", 60] ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )* ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65271); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65273);
                    st_sized_optionnal("OBX.8", 60);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:925:50: ( REPETITEUR st_sized_optionnal[\"OBX.8\", 60] )*
                    loop220:
                    do {
                        int alt220=2;
                        int LA220_0 = input.LA(1);

                        if ( (LA220_0==REPETITEUR) ) {
                            alt220=1;
                        }


                        switch (alt220) {
                    	case 1 :
                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:925:51: REPETITEUR st_sized_optionnal[\"OBX.8\", 60]
                    	    {
                    	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx2_1_post10_65277); 

                    	    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65279);
                    	    st_sized_optionnal("OBX.8", 60);

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop220;
                        }
                    } while (true);


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:926:7: ( DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )? )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==DELIMITER1) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:926:8: DELIMITER1 spec_const_10_9[\"OBX.9\"] ( REPETITEUR spec_const_10_9[\"OBX.9\"] )* ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65291); 

                            pushFollow(FOLLOW_spec_const_10_9_in_line_obx2_1_post10_65293);
                            spec_const_10_9("OBX.9");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:926:44: ( REPETITEUR spec_const_10_9[\"OBX.9\"] )*
                            loop221:
                            do {
                                int alt221=2;
                                int LA221_0 = input.LA(1);

                                if ( (LA221_0==REPETITEUR) ) {
                                    alt221=1;
                                }


                                switch (alt221) {
                            	case 1 :
                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:926:45: REPETITEUR spec_const_10_9[\"OBX.9\"]
                            	    {
                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx2_1_post10_65297); 

                            	    pushFollow(FOLLOW_spec_const_10_9_in_line_obx2_1_post10_65299);
                            	    spec_const_10_9("OBX.9");

                            	    state._fsp--;


                            	    }
                            	    break;

                            	default :
                            	    break loop221;
                                }
                            } while (true);


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:927:8: ( DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )? )?
                            int alt231=2;
                            int LA231_0 = input.LA(1);

                            if ( (LA231_0==DELIMITER1) ) {
                                alt231=1;
                            }
                            switch (alt231) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:927:9: DELIMITER1 nm_sized_optionnal[\"OBX.10\", 5] ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65312); 

                                    pushFollow(FOLLOW_nm_sized_optionnal_in_line_obx2_1_post10_65314);
                                    nm_sized_optionnal("OBX.10", 5);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:928:9: ( DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )? )?
                                    int alt230=2;
                                    int LA230_0 = input.LA(1);

                                    if ( (LA230_0==DELIMITER1) ) {
                                        alt230=1;
                                    }
                                    switch (alt230) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:928:10: DELIMITER1 spec_const_10_11[\"OBX.11\"] ( REPETITEUR spec_const_10_11[\"OBX.11\"] )* ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65326); 

                                            pushFollow(FOLLOW_spec_const_10_11_in_line_obx2_1_post10_65328);
                                            spec_const_10_11("OBX.11");

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:928:48: ( REPETITEUR spec_const_10_11[\"OBX.11\"] )*
                                            loop222:
                                            do {
                                                int alt222=2;
                                                int LA222_0 = input.LA(1);

                                                if ( (LA222_0==REPETITEUR) ) {
                                                    alt222=1;
                                                }


                                                switch (alt222) {
                                            	case 1 :
                                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:928:49: REPETITEUR spec_const_10_11[\"OBX.11\"]
                                            	    {
                                            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_obx2_1_post10_65332); 

                                            	    pushFollow(FOLLOW_spec_const_10_11_in_line_obx2_1_post10_65334);
                                            	    spec_const_10_11("OBX.11");

                                            	    state._fsp--;


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop222;
                                                }
                                            } while (true);


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:929:10: ( DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )? )?
                                            int alt229=2;
                                            int LA229_0 = input.LA(1);

                                            if ( (LA229_0==DELIMITER1) ) {
                                                alt229=1;
                                            }
                                            switch (alt229) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:929:11: DELIMITER1 spec_const_10_12[\"OBX.12\"] ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )?
                                                    {
                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65349); 

                                                    pushFollow(FOLLOW_spec_const_10_12_in_line_obx2_1_post10_65351);
                                                    spec_const_10_12("OBX.12");

                                                    state._fsp--;


                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:930:11: ( DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )? )?
                                                    int alt228=2;
                                                    int LA228_0 = input.LA(1);

                                                    if ( (LA228_0==DELIMITER1) ) {
                                                        alt228=1;
                                                    }
                                                    switch (alt228) {
                                                        case 1 :
                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:930:12: DELIMITER1 ts_sized_optionnal[\"OBX.13\", 26] ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )?
                                                            {
                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65366); 

                                                            pushFollow(FOLLOW_ts_sized_optionnal_in_line_obx2_1_post10_65368);
                                                            ts_sized_optionnal("OBX.13", 26);

                                                            state._fsp--;


                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:931:12: ( DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )? )?
                                                            int alt227=2;
                                                            int LA227_0 = input.LA(1);

                                                            if ( (LA227_0==DELIMITER1) ) {
                                                                alt227=1;
                                                            }
                                                            switch (alt227) {
                                                                case 1 :
                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:931:13: DELIMITER1 st_sized_optionnal[\"OBX.14\", 20] ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )?
                                                                    {
                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65384); 

                                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65386);
                                                                    st_sized_optionnal("OBX.14", 20);

                                                                    state._fsp--;


                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:932:13: ( DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )? )?
                                                                    int alt226=2;
                                                                    int LA226_0 = input.LA(1);

                                                                    if ( (LA226_0==DELIMITER1) ) {
                                                                        alt226=1;
                                                                    }
                                                                    switch (alt226) {
                                                                        case 1 :
                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:932:14: DELIMITER1 ts_sized_optionnal[\"OBX.15\", 26] ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )?
                                                                            {
                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65402); 

                                                                            pushFollow(FOLLOW_ts_sized_optionnal_in_line_obx2_1_post10_65404);
                                                                            ts_sized_optionnal("OBX.15", 26);

                                                                            state._fsp--;


                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:933:14: ( DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )? )?
                                                                            int alt225=2;
                                                                            int LA225_0 = input.LA(1);

                                                                            if ( (LA225_0==DELIMITER1) ) {
                                                                                alt225=1;
                                                                            }
                                                                            switch (alt225) {
                                                                                case 1 :
                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:933:15: DELIMITER1 spec_sized_mult_lvl1_st_optionnal_6[\"OBX.16\", 60] ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )?
                                                                                    {
                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65421); 

                                                                                    pushFollow(FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obx2_1_post10_65423);
                                                                                    spec_sized_mult_lvl1_st_optionnal_6("OBX.16", 60);

                                                                                    state._fsp--;


                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:934:15: ( DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )? )?
                                                                                    int alt224=2;
                                                                                    int LA224_0 = input.LA(1);

                                                                                    if ( (LA224_0==DELIMITER1) ) {
                                                                                        alt224=1;
                                                                                    }
                                                                                    switch (alt224) {
                                                                                        case 1 :
                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:934:16: DELIMITER1 st_sized_optionnal[\"OBX.17\", 60] ( DELIMITER1 )?
                                                                                            {
                                                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65441); 

                                                                                            pushFollow(FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65443);
                                                                                            st_sized_optionnal("OBX.17", 60);

                                                                                            state._fsp--;


                                                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:934:60: ( DELIMITER1 )?
                                                                                            int alt223=2;
                                                                                            int LA223_0 = input.LA(1);

                                                                                            if ( (LA223_0==DELIMITER1) ) {
                                                                                                alt223=1;
                                                                                            }
                                                                                            switch (alt223) {
                                                                                                case 1 :
                                                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:934:60: DELIMITER1
                                                                                                    {
                                                                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_obx2_1_post10_65446); 

                                                                                                    }
                                                                                                    break;

                                                                                            }


                                                                                            }
                                                                                            break;

                                                                                    }


                                                                                    }
                                                                                    break;

                                                                            }


                                                                            }
                                                                            break;

                                                                    }


                                                                    }
                                                                    break;

                                                            }


                                                            }
                                                            break;

                                                    }


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_obx2_1_post10_6"



    // $ANTLR start "line_c"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:936:1: line_c : CR CHARC DELIMITER1 nm_integer_sized_mandatory[\"C.2\", 10] DELIMITER1 spec_const_12_3[\"C.3\"] DELIMITER1 st_sized_optionnal[\"C.4\", 64000] ( REPETITEUR st_sized_optionnal[\"C.4\", 64000] )* ( DELIMITER1 )? ;
    public final void line_c() throws RecognitionException {
        startElement("C");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:938:22: ( CR CHARC DELIMITER1 nm_integer_sized_mandatory[\"C.2\", 10] DELIMITER1 spec_const_12_3[\"C.3\"] DELIMITER1 st_sized_optionnal[\"C.4\", 64000] ( REPETITEUR st_sized_optionnal[\"C.4\", 64000] )* ( DELIMITER1 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:939:3: CR CHARC DELIMITER1 nm_integer_sized_mandatory[\"C.2\", 10] DELIMITER1 spec_const_12_3[\"C.3\"] DELIMITER1 st_sized_optionnal[\"C.4\", 64000] ( REPETITEUR st_sized_optionnal[\"C.4\", 64000] )* ( DELIMITER1 )?
            {
            match(input,CR,FOLLOW_CR_in_line_c5485); 

            match(input,CHARC,FOLLOW_CHARC_in_line_c5487); 

            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_c5491); 

            pushFollow(FOLLOW_nm_integer_sized_mandatory_in_line_c5493);
            nm_integer_sized_mandatory("C.2", 10);

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_c5498); 

            pushFollow(FOLLOW_spec_const_12_3_in_line_c5500);
            spec_const_12_3("C.3");

            state._fsp--;


            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_c5505); 

            pushFollow(FOLLOW_st_sized_optionnal_in_line_c5507);
            st_sized_optionnal("C.4", 64000);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:942:47: ( REPETITEUR st_sized_optionnal[\"C.4\", 64000] )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==REPETITEUR) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:942:48: REPETITEUR st_sized_optionnal[\"C.4\", 64000]
            	    {
            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_line_c5511); 

            	    pushFollow(FOLLOW_st_sized_optionnal_in_line_c5513);
            	    st_sized_optionnal("C.4", 64000);

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:943:3: ( DELIMITER1 )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==DELIMITER1) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:943:3: DELIMITER1
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_c5522); 

                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_c"



    // $ANTLR start "line_l"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:945:1: line_l : CR CHARL ( DELIMITER1 nm_integer_sized_optionnal[\"L.2\", 1] ( DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )? )? )? ;
    public final void line_l() throws RecognitionException {
        startElement("L");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:947:22: ( CR CHARL ( DELIMITER1 nm_integer_sized_optionnal[\"L.2\", 1] ( DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:948:3: CR CHARL ( DELIMITER1 nm_integer_sized_optionnal[\"L.2\", 1] ( DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )? )? )?
            {
            match(input,CR,FOLLOW_CR_in_line_l5540); 

            match(input,CHARL,FOLLOW_CHARL_in_line_l5542); 

            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:949:3: ( DELIMITER1 nm_integer_sized_optionnal[\"L.2\", 1] ( DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )? )? )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==DELIMITER1) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:949:4: DELIMITER1 nm_integer_sized_optionnal[\"L.2\", 1] ( DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )? )?
                    {
                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_l5547); 

                    pushFollow(FOLLOW_nm_integer_sized_optionnal_in_line_l5549);
                    nm_integer_sized_optionnal("L.2", 1);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:950:4: ( DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )? )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==DELIMITER1) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:950:5: DELIMITER1 spec_const_race[\"L.3\"] ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )?
                            {
                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_l5556); 

                            pushFollow(FOLLOW_spec_const_race_in_line_l5558);
                            spec_const_race("L.3");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:951:5: ( DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )? )?
                            int alt239=2;
                            int LA239_0 = input.LA(1);

                            if ( (LA239_0==DELIMITER1) ) {
                                alt239=1;
                            }
                            switch (alt239) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:951:6: DELIMITER1 nm_integer_sized_optionnal[\"L.4\", 4] ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )?
                                    {
                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_l5566); 

                                    pushFollow(FOLLOW_nm_integer_sized_optionnal_in_line_l5568);
                                    nm_integer_sized_optionnal("L.4", 4);

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:952:6: ( DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )? )?
                                    int alt238=2;
                                    int LA238_0 = input.LA(1);

                                    if ( (LA238_0==DELIMITER1) ) {
                                        alt238=1;
                                    }
                                    switch (alt238) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:952:7: DELIMITER1 nm_integer_sized_optionnal[\"L.5\", 10] ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )?
                                            {
                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_l5577); 

                                            pushFollow(FOLLOW_nm_integer_sized_optionnal_in_line_l5579);
                                            nm_integer_sized_optionnal("L.5", 10);

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:953:7: ( DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )? )?
                                            int alt237=2;
                                            int LA237_0 = input.LA(1);

                                            if ( (LA237_0==DELIMITER1) ) {
                                                alt237=1;
                                            }
                                            switch (alt237) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:953:8: DELIMITER1 st_sized_optionnal[\"L.6\", 12] ( DELIMITER1 )?
                                                    {
                                                    match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_l5589); 

                                                    pushFollow(FOLLOW_st_sized_optionnal_in_line_l5591);
                                                    st_sized_optionnal("L.6", 12);

                                                    state._fsp--;


                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:953:49: ( DELIMITER1 )?
                                                    int alt236=2;
                                                    int LA236_0 = input.LA(1);

                                                    if ( (LA236_0==DELIMITER1) ) {
                                                        alt236=1;
                                                    }
                                                    switch (alt236) {
                                                        case 1 :
                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:953:49: DELIMITER1
                                                            {
                                                            match(input,DELIMITER1,FOLLOW_DELIMITER1_in_line_l5594); 

                                                            }
                                                            break;

                                                    }


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_l"



    // $ANTLR start "spec_act_11"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:962:1: spec_act_11[String nameElement] : ( final_HR | final_RX | final_charR );
    public final void spec_act_11(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:964:22: ( final_HR | final_RX | final_charR )
            int alt242=3;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==CHARH) ) {
                alt242=1;
            }
            else if ( (LA242_0==CHARR) ) {
                int LA242_2 = input.LA(2);

                if ( (LA242_2==CHARX) ) {
                    alt242=2;
                }
                else if ( ((LA242_2 >= CR && LA242_2 <= DELIMITER1)) ) {
                    alt242=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 2, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }
            switch (alt242) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:965:3: final_HR
                    {
                    pushFollow(FOLLOW_final_HR_in_spec_act_115630);
                    final_HR();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:965:14: final_RX
                    {
                    pushFollow(FOLLOW_final_RX_in_spec_act_115634);
                    final_RX();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:965:25: final_charR
                    {
                    pushFollow(FOLLOW_final_charR_in_spec_act_115638);
                    final_charR();

                    state._fsp--;


                    }
                    break;

            }
            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_act_11"



    // $ANTLR start "spec_p_or_m"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:967:1: spec_p_or_m[String nameElement] : ( final_symbol_plus | final_symbol_moins );
    public final void spec_p_or_m(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:969:22: ( final_symbol_plus | final_symbol_moins )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==PLUS) ) {
                alt243=1;
            }
            else if ( (LA243_0==MOINS) ) {
                alt243=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;

            }
            switch (alt243) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:970:3: final_symbol_plus
                    {
                    pushFollow(FOLLOW_final_symbol_plus_in_spec_p_or_m5656);
                    final_symbol_plus();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:970:23: final_symbol_moins
                    {
                    pushFollow(FOLLOW_final_symbol_moins_in_spec_p_or_m5660);
                    final_symbol_moins();

                    state._fsp--;


                    }
                    break;

            }
            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_p_or_m"


    public static class spec_ac_8_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_ac_8"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:972:1: spec_ac_8[String nameElement, int maxSize] : nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 spec_ac_8_2[$nameElement + \".2\"] DELIMITER2 spec_ac_8_3[$nameElement + \".3\"] nm_nonsized_mandatory[$nameElement + \".4\"] ;
    public final HPRIMSParser.spec_ac_8_return spec_ac_8(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_ac_8_return retval = new HPRIMSParser.spec_ac_8_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:974:22: ( nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 spec_ac_8_2[$nameElement + \".2\"] DELIMITER2 spec_ac_8_3[$nameElement + \".3\"] nm_nonsized_mandatory[$nameElement + \".4\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:975:3: nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 spec_ac_8_2[$nameElement + \".2\"] DELIMITER2 spec_ac_8_3[$nameElement + \".3\"] nm_nonsized_mandatory[$nameElement + \".4\"]
            {
            pushFollow(FOLLOW_nm_nonsized_mandatory_in_spec_ac_85680);
            nm_nonsized_mandatory(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_ac_85685); 

            pushFollow(FOLLOW_spec_ac_8_2_in_spec_ac_85687);
            spec_ac_8_2(nameElement + ".2");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_ac_85692); 

            pushFollow(FOLLOW_spec_ac_8_3_in_spec_ac_85694);
            spec_ac_8_3(nameElement + ".3");

            state._fsp--;


            pushFollow(FOLLOW_nm_nonsized_mandatory_in_spec_ac_85699);
            nm_nonsized_mandatory(nameElement + ".4");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_ac_8"



    // $ANTLR start "spec_ac_8_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:981:1: spec_ac_8_2[String nameElement] : ( final_TM | final_TR | final_FR );
    public final void spec_ac_8_2(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:983:22: ( final_TM | final_TR | final_FR )
            int alt244=3;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==CHART) ) {
                int LA244_1 = input.LA(2);

                if ( (LA244_1==CHARM) ) {
                    alt244=1;
                }
                else if ( (LA244_1==CHARR) ) {
                    alt244=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 244, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA244_0==CHARF) ) {
                alt244=3;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;

            }
            switch (alt244) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:984:3: final_TM
                    {
                    pushFollow(FOLLOW_final_TM_in_spec_ac_8_25722);
                    final_TM();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:984:14: final_TR
                    {
                    pushFollow(FOLLOW_final_TR_in_spec_ac_8_25726);
                    final_TR();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:984:25: final_FR
                    {
                    pushFollow(FOLLOW_final_FR_in_spec_ac_8_25730);
                    final_FR();

                    state._fsp--;


                    }
                    break;

            }
            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_ac_8_2"



    // $ANTLR start "spec_ac_8_3"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:986:1: spec_ac_8_3[String nameElement] : ( final_PF | final_SS | final_TR );
    public final void spec_ac_8_3(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:988:22: ( final_PF | final_SS | final_TR )
            int alt245=3;
            switch ( input.LA(1) ) {
            case CHARP:
                {
                alt245=1;
                }
                break;
            case CHARS:
                {
                alt245=2;
                }
                break;
            case CHART:
                {
                alt245=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;

            }

            switch (alt245) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:989:3: final_PF
                    {
                    pushFollow(FOLLOW_final_PF_in_spec_ac_8_35750);
                    final_PF();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:989:14: final_SS
                    {
                    pushFollow(FOLLOW_final_SS_in_spec_ac_8_35754);
                    final_SS();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:989:25: final_TR
                    {
                    pushFollow(FOLLOW_final_TR_in_spec_ac_8_35758);
                    final_TR();

                    state._fsp--;


                    }
                    break;

            }
            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_ac_8_3"



    // $ANTLR start "spec_on_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:991:1: spec_on_optionnal[String nameElement] : ( final_charO | final_charN )? ;
    public final void spec_on_optionnal(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:993:22: ( ( final_charO | final_charN )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:994:3: ( final_charO | final_charN )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:994:3: ( final_charO | final_charN )?
            int alt246=3;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==CHARO) ) {
                alt246=1;
            }
            else if ( (LA246_0==CHARN) ) {
                alt246=2;
            }
            switch (alt246) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:994:4: final_charO
                    {
                    pushFollow(FOLLOW_final_charO_in_spec_on_optionnal5777);
                    final_charO();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:994:18: final_charN
                    {
                    pushFollow(FOLLOW_final_charN_in_spec_on_optionnal5781);
                    final_charN();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_on_optionnal"



    // $ANTLR start "spec_const_sexe"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:996:1: spec_const_sexe[String nameElement] : ( final_charM | final_charF | final_charU )? ;
    public final void spec_const_sexe(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:998:22: ( ( final_charM | final_charF | final_charU )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:999:3: ( final_charM | final_charF | final_charU )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:999:3: ( final_charM | final_charF | final_charU )?
            int alt247=4;
            switch ( input.LA(1) ) {
                case CHARM:
                    {
                    alt247=1;
                    }
                    break;
                case CHARF:
                    {
                    alt247=2;
                    }
                    break;
                case CHARU:
                    {
                    alt247=3;
                    }
                    break;
            }

            switch (alt247) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:999:4: final_charM
                    {
                    pushFollow(FOLLOW_final_charM_in_spec_const_sexe5802);
                    final_charM();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:999:18: final_charF
                    {
                    pushFollow(FOLLOW_final_charF_in_spec_const_sexe5806);
                    final_charF();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:999:32: final_charU
                    {
                    pushFollow(FOLLOW_final_charU_in_spec_const_sexe5810);
                    final_charU();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_sexe"



    // $ANTLR start "spec_const_race"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1001:1: spec_const_race[String nameElement] :;
    public final void spec_const_race(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1003:22: ()
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1004:3: 
            {
            }

            endElement();
        }
        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_race"



    // $ANTLR start "spec_const_7_13_version_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1006:1: spec_const_7_13_version_2_0[String nameElement] : spec_const_7_13_1_version_2_0[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"] ;
    public final void spec_const_7_13_version_2_0(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1008:22: ( spec_const_7_13_1_version_2_0[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1009:3: spec_const_7_13_1_version_2_0[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_spec_const_7_13_1_version_2_0_in_spec_const_7_13_version_2_05847);
            spec_const_7_13_1_version_2_0(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_const_7_13_version_2_05850); 

            pushFollow(FOLLOW_spec_const_7_13_2_in_spec_const_7_13_version_2_05852);
            spec_const_7_13_2(nameElement + ".2");

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_version_2_0"



    // $ANTLR start "spec_const_7_13_version_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1011:1: spec_const_7_13_version_2_1[String nameElement] : spec_const_7_13_1_version_2_1[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"] ;
    public final void spec_const_7_13_version_2_1(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1013:22: ( spec_const_7_13_1_version_2_1[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1014:3: spec_const_7_13_1_version_2_1[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_spec_const_7_13_1_version_2_1_in_spec_const_7_13_version_2_15873);
            spec_const_7_13_1_version_2_1(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_const_7_13_version_2_15876); 

            pushFollow(FOLLOW_spec_const_7_13_2_in_spec_const_7_13_version_2_15878);
            spec_const_7_13_2(nameElement + ".2");

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_version_2_1"



    // $ANTLR start "spec_const_7_13_version_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1016:1: spec_const_7_13_version_2_2[String nameElement] : spec_const_7_13_1_version_2_2[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"] ;
    public final void spec_const_7_13_version_2_2(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1018:22: ( spec_const_7_13_1_version_2_2[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1019:3: spec_const_7_13_1_version_2_2[$nameElement + \".1\"] DELIMITER2 spec_const_7_13_2[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_spec_const_7_13_1_version_2_2_in_spec_const_7_13_version_2_25897);
            spec_const_7_13_1_version_2_2(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_const_7_13_version_2_25900); 

            pushFollow(FOLLOW_spec_const_7_13_2_in_spec_const_7_13_version_2_25902);
            spec_const_7_13_2(nameElement + ".2");

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_version_2_2"



    // $ANTLR start "spec_const_7_13_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1021:1: spec_const_7_13_2[String nameElement] : ( final_charC | final_charL | final_charR );
    public final void spec_const_7_13_2(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1023:22: ( final_charC | final_charL | final_charR )
            int alt248=3;
            switch ( input.LA(1) ) {
            case CHARC:
                {
                alt248=1;
                }
                break;
            case CHARL:
                {
                alt248=2;
                }
                break;
            case CHARR:
                {
                alt248=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;

            }

            switch (alt248) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1024:3: final_charC
                    {
                    pushFollow(FOLLOW_final_charC_in_spec_const_7_13_25921);
                    final_charC();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1024:17: final_charL
                    {
                    pushFollow(FOLLOW_final_charL_in_spec_const_7_13_25925);
                    final_charL();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1024:31: final_charR
                    {
                    pushFollow(FOLLOW_final_charR_in_spec_const_7_13_25929);
                    final_charR();

                    state._fsp--;


                    }
                    break;

            }
            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_2"



    // $ANTLR start "spec_const_7_7_contexte_ORU"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1026:1: spec_const_7_7_contexte_ORU[String nameElement] : final_ORU ;
    public final void spec_const_7_7_contexte_ORU(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1028:22: ( final_ORU )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1029:3: final_ORU
            {
            pushFollow(FOLLOW_final_ORU_in_spec_const_7_7_contexte_ORU5947);
            final_ORU();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_ORU"



    // $ANTLR start "spec_const_7_7_contexte_ORM"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1031:1: spec_const_7_7_contexte_ORM[String nameElement] : final_ORM ;
    public final void spec_const_7_7_contexte_ORM(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1033:22: ( final_ORM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1034:3: final_ORM
            {
            pushFollow(FOLLOW_final_ORM_in_spec_const_7_7_contexte_ORM5965);
            final_ORM();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_ORM"



    // $ANTLR start "spec_const_7_7_contexte_ORA"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1036:1: spec_const_7_7_contexte_ORA[String nameElement] : final_ORA ;
    public final void spec_const_7_7_contexte_ORA(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1038:22: ( final_ORA )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1039:3: final_ORA
            {
            pushFollow(FOLLOW_final_ORA_in_spec_const_7_7_contexte_ORA5983);
            final_ORA();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_ORA"



    // $ANTLR start "spec_const_7_7_contexte_ADM"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1041:1: spec_const_7_7_contexte_ADM[String nameElement] : final_ADM ;
    public final void spec_const_7_7_contexte_ADM(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1043:22: ( final_ADM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1044:3: final_ADM
            {
            pushFollow(FOLLOW_final_ADM_in_spec_const_7_7_contexte_ADM6001);
            final_ADM();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_ADM"



    // $ANTLR start "spec_const_7_7_contexte_FAC"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1046:1: spec_const_7_7_contexte_FAC[String nameElement] : final_FAC ;
    public final void spec_const_7_7_contexte_FAC(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1048:22: ( final_FAC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1049:3: final_FAC
            {
            pushFollow(FOLLOW_final_FAC_in_spec_const_7_7_contexte_FAC6021);
            final_FAC();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_FAC"



    // $ANTLR start "spec_const_7_7_contexte_REG"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1051:1: spec_const_7_7_contexte_REG[String nameElement] : final_REG ;
    public final void spec_const_7_7_contexte_REG(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1053:22: ( final_REG )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1054:3: final_REG
            {
            pushFollow(FOLLOW_final_REG_in_spec_const_7_7_contexte_REG6039);
            final_REG();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_REG"



    // $ANTLR start "spec_const_7_7_contexte_NS"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1056:1: spec_const_7_7_contexte_NS[String nameElement] : final_NS ;
    public final void spec_const_7_7_contexte_NS(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1058:22: ( final_NS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1059:3: final_NS
            {
            pushFollow(FOLLOW_final_NS_in_spec_const_7_7_contexte_NS6057);
            final_NS();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_7_contexte_NS"



    // $ANTLR start "spec_const_7_12"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1061:1: spec_const_7_12[String nameElement] : ( final_charP | final_charD | final_charT ) ;
    public final void spec_const_7_12(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1063:22: ( ( final_charP | final_charD | final_charT ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1064:3: ( final_charP | final_charD | final_charT )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1064:3: ( final_charP | final_charD | final_charT )
            int alt249=3;
            switch ( input.LA(1) ) {
            case CHARP:
                {
                alt249=1;
                }
                break;
            case CHARD:
                {
                alt249=2;
                }
                break;
            case CHART:
                {
                alt249=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;

            }

            switch (alt249) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1064:4: final_charP
                    {
                    pushFollow(FOLLOW_final_charP_in_spec_const_7_126076);
                    final_charP();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1064:18: final_charD
                    {
                    pushFollow(FOLLOW_final_charD_in_spec_const_7_126080);
                    final_charD();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1064:32: final_charT
                    {
                    pushFollow(FOLLOW_final_charT_in_spec_const_7_126084);
                    final_charT();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_12"



    // $ANTLR start "spec_const_9_31"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1066:1: spec_const_9_31[String nameElement] : ( final_PORT | final_CART | final_WHLC | final_WALK )? ;
    public final void spec_const_9_31(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1068:22: ( ( final_PORT | final_CART | final_WHLC | final_WALK )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1069:3: ( final_PORT | final_CART | final_WHLC | final_WALK )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1069:3: ( final_PORT | final_CART | final_WHLC | final_WALK )?
            int alt250=5;
            switch ( input.LA(1) ) {
                case CHARP:
                    {
                    alt250=1;
                    }
                    break;
                case CHARC:
                    {
                    alt250=2;
                    }
                    break;
                case CHARW:
                    {
                    int LA250_3 = input.LA(2);

                    if ( (LA250_3==CHARH) ) {
                        alt250=3;
                    }
                    else if ( (LA250_3==CHARA) ) {
                        alt250=4;
                    }
                    }
                    break;
            }

            switch (alt250) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1069:4: final_PORT
                    {
                    pushFollow(FOLLOW_final_PORT_in_spec_const_9_316104);
                    final_PORT();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1069:17: final_CART
                    {
                    pushFollow(FOLLOW_final_CART_in_spec_const_9_316108);
                    final_CART();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1069:30: final_WHLC
                    {
                    pushFollow(FOLLOW_final_WHLC_in_spec_const_9_316112);
                    final_WHLC();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1069:43: final_WALK
                    {
                    pushFollow(FOLLOW_final_WALK_in_spec_const_9_316116);
                    final_WALK();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_9_31"



    // $ANTLR start "spec_const_8_25"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1071:1: spec_const_8_25[String nameElement] : ( final_OP | final_IP | final_ER | final_PA | final_MP )? ;
    public final void spec_const_8_25(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1073:22: ( ( final_OP | final_IP | final_ER | final_PA | final_MP )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:3: ( final_OP | final_IP | final_ER | final_PA | final_MP )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:3: ( final_OP | final_IP | final_ER | final_PA | final_MP )?
            int alt251=6;
            switch ( input.LA(1) ) {
                case CHARO:
                    {
                    alt251=1;
                    }
                    break;
                case CHARI:
                    {
                    alt251=2;
                    }
                    break;
                case CHARE:
                    {
                    alt251=3;
                    }
                    break;
                case CHARP:
                    {
                    alt251=4;
                    }
                    break;
                case CHARM:
                    {
                    alt251=5;
                    }
                    break;
            }

            switch (alt251) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:4: final_OP
                    {
                    pushFollow(FOLLOW_final_OP_in_spec_const_8_256137);
                    final_OP();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:15: final_IP
                    {
                    pushFollow(FOLLOW_final_IP_in_spec_const_8_256141);
                    final_IP();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:26: final_ER
                    {
                    pushFollow(FOLLOW_final_ER_in_spec_const_8_256145);
                    final_ER();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:37: final_PA
                    {
                    pushFollow(FOLLOW_final_PA_in_spec_const_8_256149);
                    final_PA();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1074:48: final_MP
                    {
                    pushFollow(FOLLOW_final_MP_in_spec_const_8_256153);
                    final_MP();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_8_25"



    // $ANTLR start "spec_const_9_26"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1076:1: spec_const_9_26[String nameElement] : ( final_charF | final_charP | final_charM | final_charI | final_charR | final_charC | final_charO | final_charD | final_charX )? ;
    public final void spec_const_9_26(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1078:22: ( ( final_charF | final_charP | final_charM | final_charI | final_charR | final_charC | final_charO | final_charD | final_charX )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:3: ( final_charF | final_charP | final_charM | final_charI | final_charR | final_charC | final_charO | final_charD | final_charX )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:3: ( final_charF | final_charP | final_charM | final_charI | final_charR | final_charC | final_charO | final_charD | final_charX )?
            int alt252=10;
            switch ( input.LA(1) ) {
                case CHARF:
                    {
                    alt252=1;
                    }
                    break;
                case CHARP:
                    {
                    alt252=2;
                    }
                    break;
                case CHARM:
                    {
                    alt252=3;
                    }
                    break;
                case CHARI:
                    {
                    alt252=4;
                    }
                    break;
                case CHARR:
                    {
                    alt252=5;
                    }
                    break;
                case CHARC:
                    {
                    alt252=6;
                    }
                    break;
                case CHARO:
                    {
                    alt252=7;
                    }
                    break;
                case CHARD:
                    {
                    alt252=8;
                    }
                    break;
                case CHARX:
                    {
                    alt252=9;
                    }
                    break;
            }

            switch (alt252) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:4: final_charF
                    {
                    pushFollow(FOLLOW_final_charF_in_spec_const_9_266174);
                    final_charF();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:18: final_charP
                    {
                    pushFollow(FOLLOW_final_charP_in_spec_const_9_266178);
                    final_charP();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:32: final_charM
                    {
                    pushFollow(FOLLOW_final_charM_in_spec_const_9_266182);
                    final_charM();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:46: final_charI
                    {
                    pushFollow(FOLLOW_final_charI_in_spec_const_9_266186);
                    final_charI();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:60: final_charR
                    {
                    pushFollow(FOLLOW_final_charR_in_spec_const_9_266190);
                    final_charR();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:74: final_charC
                    {
                    pushFollow(FOLLOW_final_charC_in_spec_const_9_266194);
                    final_charC();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1079:88: final_charO
                    {
                    pushFollow(FOLLOW_final_charO_in_spec_const_9_266198);
                    final_charO();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1080:3: final_charD
                    {
                    pushFollow(FOLLOW_final_charD_in_spec_const_9_266204);
                    final_charD();

                    state._fsp--;


                    }
                    break;
                case 9 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1080:17: final_charX
                    {
                    pushFollow(FOLLOW_final_charX_in_spec_const_9_266208);
                    final_charX();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_9_26"


    public static class spec_const_10_3_nm_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_nm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1082:1: spec_const_10_3_nm[String nameElement] : CHARN CHARM ;
    public final HPRIMSParser.spec_const_10_3_nm_return spec_const_10_3_nm(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_nm_return retval = new HPRIMSParser.spec_const_10_3_nm_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1084:22: ( CHARN CHARM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1085:3: CHARN CHARM
            {
            match(input,CHARN,FOLLOW_CHARN_in_spec_const_10_3_nm6229); 

            match(input,CHARM,FOLLOW_CHARM_in_spec_const_10_3_nm6231); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_nm"


    public static class spec_const_10_3_ce_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_ce"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1087:1: spec_const_10_3_ce[String nameElement] : CHARC CHARE ;
    public final HPRIMSParser.spec_const_10_3_ce_return spec_const_10_3_ce(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_ce_return retval = new HPRIMSParser.spec_const_10_3_ce_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1089:22: ( CHARC CHARE )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1090:3: CHARC CHARE
            {
            match(input,CHARC,FOLLOW_CHARC_in_spec_const_10_3_ce6252); 

            match(input,CHARE,FOLLOW_CHARE_in_spec_const_10_3_ce6254); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_ce"


    public static class spec_const_10_3_st_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_st"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1092:1: spec_const_10_3_st[String nameElement] : CHARS CHART ;
    public final HPRIMSParser.spec_const_10_3_st_return spec_const_10_3_st(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_st_return retval = new HPRIMSParser.spec_const_10_3_st_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1094:22: ( CHARS CHART )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1095:3: CHARS CHART
            {
            match(input,CHARS,FOLLOW_CHARS_in_spec_const_10_3_st6275); 

            match(input,CHART,FOLLOW_CHART_in_spec_const_10_3_st6277); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_st"


    public static class spec_const_10_3_gc_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_gc"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1097:1: spec_const_10_3_gc[String nameElement] : CHARG CHARC ;
    public final HPRIMSParser.spec_const_10_3_gc_return spec_const_10_3_gc(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_gc_return retval = new HPRIMSParser.spec_const_10_3_gc_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1099:22: ( CHARG CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1100:3: CHARG CHARC
            {
            match(input,CHARG,FOLLOW_CHARG_in_spec_const_10_3_gc6298); 

            match(input,CHARC,FOLLOW_CHARC_in_spec_const_10_3_gc6300); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_gc"


    public static class spec_const_10_3_tx_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_tx"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1102:1: spec_const_10_3_tx[String nameElement] : CHART CHARX ;
    public final HPRIMSParser.spec_const_10_3_tx_return spec_const_10_3_tx(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_tx_return retval = new HPRIMSParser.spec_const_10_3_tx_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1104:22: ( CHART CHARX )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1105:3: CHART CHARX
            {
            match(input,CHART,FOLLOW_CHART_in_spec_const_10_3_tx6322); 

            match(input,CHARX,FOLLOW_CHARX_in_spec_const_10_3_tx6324); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_tx"


    public static class spec_const_10_3_fic_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_fic"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1107:1: spec_const_10_3_fic[String nameElement] : ( CHARF CHARI CHARC ) ;
    public final HPRIMSParser.spec_const_10_3_fic_return spec_const_10_3_fic(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_fic_return retval = new HPRIMSParser.spec_const_10_3_fic_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1109:22: ( ( CHARF CHARI CHARC ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1110:3: ( CHARF CHARI CHARC )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1110:3: ( CHARF CHARI CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1110:4: CHARF CHARI CHARC
            {
            match(input,CHARF,FOLLOW_CHARF_in_spec_const_10_3_fic6345); 

            match(input,CHARI,FOLLOW_CHARI_in_spec_const_10_3_fic6347); 

            match(input,CHARC,FOLLOW_CHARC_in_spec_const_10_3_fic6349); 

            }


            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_fic"


    public static class spec_const_10_3_std_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_const_10_3_std"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1112:1: spec_const_10_3_std[String nameElement] : ( ( CHARA CHARD ) | ( CHARC CHARK ) | ( CHARC CHARN CHARA ) | ( CHARD CHART ) | ( CHARP CHARN ) | ( CHART CHARN ) | ( CHARG CHARB ) | ( CHARG CHARN ) );
    public final HPRIMSParser.spec_const_10_3_std_return spec_const_10_3_std(String nameElement) throws RecognitionException {
        HPRIMSParser.spec_const_10_3_std_return retval = new HPRIMSParser.spec_const_10_3_std_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1114:22: ( ( CHARA CHARD ) | ( CHARC CHARK ) | ( CHARC CHARN CHARA ) | ( CHARD CHART ) | ( CHARP CHARN ) | ( CHART CHARN ) | ( CHARG CHARB ) | ( CHARG CHARN ) )
            int alt253=8;
            switch ( input.LA(1) ) {
            case CHARA:
                {
                alt253=1;
                }
                break;
            case CHARC:
                {
                int LA253_2 = input.LA(2);

                if ( (LA253_2==CHARK) ) {
                    alt253=2;
                }
                else if ( (LA253_2==CHARN) ) {
                    alt253=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 2, input);

                    throw nvae;

                }
                }
                break;
            case CHARD:
                {
                alt253=4;
                }
                break;
            case CHARP:
                {
                alt253=5;
                }
                break;
            case CHART:
                {
                alt253=6;
                }
                break;
            case CHARG:
                {
                int LA253_6 = input.LA(2);

                if ( (LA253_6==CHARB) ) {
                    alt253=7;
                }
                else if ( (LA253_6==CHARN) ) {
                    alt253=8;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;

            }

            switch (alt253) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:3: ( CHARA CHARD )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:3: ( CHARA CHARD )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:4: CHARA CHARD
                    {
                    match(input,CHARA,FOLLOW_CHARA_in_spec_const_10_3_std6371); 

                    match(input,CHARD,FOLLOW_CHARD_in_spec_const_10_3_std6373); 

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:19: ( CHARC CHARK )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:19: ( CHARC CHARK )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:20: CHARC CHARK
                    {
                    match(input,CHARC,FOLLOW_CHARC_in_spec_const_10_3_std6379); 

                    match(input,CHARK,FOLLOW_CHARK_in_spec_const_10_3_std6381); 

                    }


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:35: ( CHARC CHARN CHARA )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:35: ( CHARC CHARN CHARA )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:36: CHARC CHARN CHARA
                    {
                    match(input,CHARC,FOLLOW_CHARC_in_spec_const_10_3_std6387); 

                    match(input,CHARN,FOLLOW_CHARN_in_spec_const_10_3_std6389); 

                    match(input,CHARA,FOLLOW_CHARA_in_spec_const_10_3_std6391); 

                    }


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:57: ( CHARD CHART )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:57: ( CHARD CHART )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1115:58: CHARD CHART
                    {
                    match(input,CHARD,FOLLOW_CHARD_in_spec_const_10_3_std6397); 

                    match(input,CHART,FOLLOW_CHART_in_spec_const_10_3_std6399); 

                    }


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1116:3: ( CHARP CHARN )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1116:3: ( CHARP CHARN )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1116:4: CHARP CHARN
                    {
                    match(input,CHARP,FOLLOW_CHARP_in_spec_const_10_3_std6407); 

                    match(input,CHARN,FOLLOW_CHARN_in_spec_const_10_3_std6409); 

                    }


                    }
                    break;
                case 6 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1116:19: ( CHART CHARN )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1116:19: ( CHART CHARN )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1116:20: CHART CHARN
                    {
                    match(input,CHART,FOLLOW_CHART_in_spec_const_10_3_std6415); 

                    match(input,CHARN,FOLLOW_CHARN_in_spec_const_10_3_std6417); 

                    }


                    }
                    break;
                case 7 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1117:3: ( CHARG CHARB )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1117:3: ( CHARG CHARB )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1117:4: CHARG CHARB
                    {
                    match(input,CHARG,FOLLOW_CHARG_in_spec_const_10_3_std6425); 

                    match(input,CHARB,FOLLOW_CHARB_in_spec_const_10_3_std6427); 

                    }


                    }
                    break;
                case 8 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1117:19: ( CHARG CHARN )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1117:19: ( CHARG CHARN )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1117:20: CHARG CHARN
                    {
                    match(input,CHARG,FOLLOW_CHARG_in_spec_const_10_3_std6433); 

                    match(input,CHARN,FOLLOW_CHARN_in_spec_const_10_3_std6435); 

                    }


                    content(input.toString(retval.start,input.LT(-1)));

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_const_10_3_std"


    public static class spec_act_10_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_act_10"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1120:1: spec_act_10[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( REPETITEUR st_non_sized_optionnal[$nameElement + \".1\"] )* DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ;
    public final HPRIMSParser.spec_act_10_return spec_act_10(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_act_10_return retval = new HPRIMSParser.spec_act_10_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1122:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( REPETITEUR st_non_sized_optionnal[$nameElement + \".1\"] )* DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1123:3: st_non_sized_optionnal[$nameElement + \".1\"] ( REPETITEUR st_non_sized_optionnal[$nameElement + \".1\"] )* DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_act_106457);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1123:47: ( REPETITEUR st_non_sized_optionnal[$nameElement + \".1\"] )*
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==REPETITEUR) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1123:48: REPETITEUR st_non_sized_optionnal[$nameElement + \".1\"]
            	    {
            	    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_spec_act_106461); 

            	    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_act_106463);
            	    st_non_sized_optionnal(nameElement + ".1");

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop254;
                }
            } while (true);


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_act_106470); 

            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_act_106472);
            st_non_sized_optionnal(nameElement + ".2");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_act_10"


    public static class spec_fac_6_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_fac_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1127:1: spec_fac_6[String nameElement, int maxSize] : st_sized_optionnal[$nameElement + \".1\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40] )? )? ;
    public final HPRIMSParser.spec_fac_6_return spec_fac_6(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_fac_6_return retval = new HPRIMSParser.spec_fac_6_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1129:22: ( st_sized_optionnal[$nameElement + \".1\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40] )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1130:3: st_sized_optionnal[$nameElement + \".1\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40] )? )?
            {
            pushFollow(FOLLOW_st_sized_optionnal_in_spec_fac_66496);
            st_sized_optionnal(nameElement + ".1", 9);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1131:3: ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40] )? )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==DELIMITER2) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1131:4: DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 9] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40] )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_fac_66502); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_spec_fac_66504);
                    st_sized_optionnal(nameElement + ".2", 9);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1132:4: ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40] )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==DELIMITER2) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1132:5: DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 40]
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_fac_66511); 

                            pushFollow(FOLLOW_st_sized_optionnal_in_spec_fac_66513);
                            st_sized_optionnal(nameElement + ".3", 40);

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_fac_6"


    public static class spec_reg_4_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_reg_4"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1135:1: spec_reg_4[String nameElement, int maxSize] : nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] ;
    public final HPRIMSParser.spec_reg_4_return spec_reg_4(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_reg_4_return retval = new HPRIMSParser.spec_reg_4_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1137:22: ( nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1138:3: nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_nm_nonsized_mandatory_in_spec_reg_46540);
            nm_nonsized_mandatory(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_reg_46545); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_reg_46547);
            st_nonsized_mandatory(nameElement + ".2");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_reg_4"


    public static class spec_sized_10_6_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_10_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1143:1: spec_sized_10_6[String nameElement, int maxSize] : st_sized_optionnal[$nameElement + \".1\", 10] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 60] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10] )? )? ;
    public final HPRIMSParser.spec_sized_10_6_return spec_sized_10_6(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_10_6_return retval = new HPRIMSParser.spec_sized_10_6_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1145:22: ( st_sized_optionnal[$nameElement + \".1\", 10] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 60] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10] )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1146:3: st_sized_optionnal[$nameElement + \".1\", 10] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 60] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10] )? )?
            {
            pushFollow(FOLLOW_st_sized_optionnal_in_spec_sized_10_66571);
            st_sized_optionnal(nameElement + ".1", 10);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1147:3: ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 60] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10] )? )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==DELIMITER2) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1147:4: DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 60] ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10] )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_66577); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_spec_sized_10_66579);
                    st_sized_optionnal(nameElement + ".2", 60);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1148:4: ( DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10] )?
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==DELIMITER2) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1148:5: DELIMITER2 st_sized_optionnal[$nameElement + \".3\", 10]
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_66586); 

                            pushFollow(FOLLOW_st_sized_optionnal_in_spec_sized_10_66588);
                            st_sized_optionnal(nameElement + ".3", 10);

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_10_6"



    // $ANTLR start "spec_const_10_9"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1151:1: spec_const_10_9[String nameElement] : ( final_charL | final_charH | final_LL | final_HH | final_symbol_inf | final_symbol_sup | final_charN | final_charA | final_AA | final_Null | final_charU | final_charD | final_charB | final_charW | final_charR | final_charI | final_charS | final_MS | final_VS )? ;
    public final void spec_const_10_9(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1153:22: ( ( final_charL | final_charH | final_LL | final_HH | final_symbol_inf | final_symbol_sup | final_charN | final_charA | final_AA | final_Null | final_charU | final_charD | final_charB | final_charW | final_charR | final_charI | final_charS | final_MS | final_VS )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:3: ( final_charL | final_charH | final_LL | final_HH | final_symbol_inf | final_symbol_sup | final_charN | final_charA | final_AA | final_Null | final_charU | final_charD | final_charB | final_charW | final_charR | final_charI | final_charS | final_MS | final_VS )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:3: ( final_charL | final_charH | final_LL | final_HH | final_symbol_inf | final_symbol_sup | final_charN | final_charA | final_AA | final_Null | final_charU | final_charD | final_charB | final_charW | final_charR | final_charI | final_charS | final_MS | final_VS )?
            int alt259=20;
            switch ( input.LA(1) ) {
                case CHARL:
                    {
                    int LA259_1 = input.LA(2);

                    if ( (LA259_1==CHARL) ) {
                        alt259=3;
                    }
                    else if ( ((LA259_1 >= CR && LA259_1 <= DELIMITER1)||LA259_1==REPETITEUR) ) {
                        alt259=1;
                    }
                    }
                    break;
                case CHARH:
                    {
                    int LA259_2 = input.LA(2);

                    if ( (LA259_2==CHARH) ) {
                        alt259=4;
                    }
                    else if ( ((LA259_2 >= CR && LA259_2 <= DELIMITER1)||LA259_2==REPETITEUR) ) {
                        alt259=2;
                    }
                    }
                    break;
                case CHAR_SYMBOL_INF:
                    {
                    alt259=5;
                    }
                    break;
                case CHAR_SYMBOL_SUP:
                    {
                    alt259=6;
                    }
                    break;
                case CHARN:
                    {
                    int LA259_5 = input.LA(2);

                    if ( (LA259_5==CHARu) ) {
                        alt259=10;
                    }
                    else if ( ((LA259_5 >= CR && LA259_5 <= DELIMITER1)||LA259_5==REPETITEUR) ) {
                        alt259=7;
                    }
                    }
                    break;
                case CHARA:
                    {
                    int LA259_6 = input.LA(2);

                    if ( (LA259_6==CHARA) ) {
                        alt259=9;
                    }
                    else if ( ((LA259_6 >= CR && LA259_6 <= DELIMITER1)||LA259_6==REPETITEUR) ) {
                        alt259=8;
                    }
                    }
                    break;
                case CHARU:
                    {
                    alt259=11;
                    }
                    break;
                case CHARD:
                    {
                    alt259=12;
                    }
                    break;
                case CHARB:
                    {
                    alt259=13;
                    }
                    break;
                case CHARW:
                    {
                    alt259=14;
                    }
                    break;
                case CHARR:
                    {
                    alt259=15;
                    }
                    break;
                case CHARI:
                    {
                    alt259=16;
                    }
                    break;
                case CHARS:
                    {
                    alt259=17;
                    }
                    break;
                case CHARM:
                    {
                    alt259=18;
                    }
                    break;
                case CHARV:
                    {
                    alt259=19;
                    }
                    break;
            }

            switch (alt259) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:4: final_charL
                    {
                    pushFollow(FOLLOW_final_charL_in_spec_const_10_96616);
                    final_charL();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:18: final_charH
                    {
                    pushFollow(FOLLOW_final_charH_in_spec_const_10_96620);
                    final_charH();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:32: final_LL
                    {
                    pushFollow(FOLLOW_final_LL_in_spec_const_10_96624);
                    final_LL();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:43: final_HH
                    {
                    pushFollow(FOLLOW_final_HH_in_spec_const_10_96628);
                    final_HH();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:54: final_symbol_inf
                    {
                    pushFollow(FOLLOW_final_symbol_inf_in_spec_const_10_96632);
                    final_symbol_inf();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1154:73: final_symbol_sup
                    {
                    pushFollow(FOLLOW_final_symbol_sup_in_spec_const_10_96636);
                    final_symbol_sup();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:3: final_charN
                    {
                    pushFollow(FOLLOW_final_charN_in_spec_const_10_96642);
                    final_charN();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:17: final_charA
                    {
                    pushFollow(FOLLOW_final_charA_in_spec_const_10_96646);
                    final_charA();

                    state._fsp--;


                    }
                    break;
                case 9 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:31: final_AA
                    {
                    pushFollow(FOLLOW_final_AA_in_spec_const_10_96650);
                    final_AA();

                    state._fsp--;


                    }
                    break;
                case 10 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:42: final_Null
                    {
                    pushFollow(FOLLOW_final_Null_in_spec_const_10_96654);
                    final_Null();

                    state._fsp--;


                    }
                    break;
                case 11 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:55: final_charU
                    {
                    pushFollow(FOLLOW_final_charU_in_spec_const_10_96658);
                    final_charU();

                    state._fsp--;


                    }
                    break;
                case 12 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:69: final_charD
                    {
                    pushFollow(FOLLOW_final_charD_in_spec_const_10_96662);
                    final_charD();

                    state._fsp--;


                    }
                    break;
                case 13 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1155:83: final_charB
                    {
                    pushFollow(FOLLOW_final_charB_in_spec_const_10_96666);
                    final_charB();

                    state._fsp--;


                    }
                    break;
                case 14 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1156:3: final_charW
                    {
                    pushFollow(FOLLOW_final_charW_in_spec_const_10_96672);
                    final_charW();

                    state._fsp--;


                    }
                    break;
                case 15 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1156:17: final_charR
                    {
                    pushFollow(FOLLOW_final_charR_in_spec_const_10_96676);
                    final_charR();

                    state._fsp--;


                    }
                    break;
                case 16 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1156:31: final_charI
                    {
                    pushFollow(FOLLOW_final_charI_in_spec_const_10_96680);
                    final_charI();

                    state._fsp--;


                    }
                    break;
                case 17 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1156:45: final_charS
                    {
                    pushFollow(FOLLOW_final_charS_in_spec_const_10_96684);
                    final_charS();

                    state._fsp--;


                    }
                    break;
                case 18 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1156:59: final_MS
                    {
                    pushFollow(FOLLOW_final_MS_in_spec_const_10_96688);
                    final_MS();

                    state._fsp--;


                    }
                    break;
                case 19 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1156:70: final_VS
                    {
                    pushFollow(FOLLOW_final_VS_in_spec_const_10_96692);
                    final_VS();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_10_9"



    // $ANTLR start "spec_const_10_11"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1158:1: spec_const_10_11[String nameElement] : ( final_charA | final_charS | final_charR | final_charN )? ;
    public final void spec_const_10_11(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1160:22: ( ( final_charA | final_charS | final_charR | final_charN )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1161:3: ( final_charA | final_charS | final_charR | final_charN )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1161:3: ( final_charA | final_charS | final_charR | final_charN )?
            int alt260=5;
            switch ( input.LA(1) ) {
                case CHARA:
                    {
                    alt260=1;
                    }
                    break;
                case CHARS:
                    {
                    alt260=2;
                    }
                    break;
                case CHARR:
                    {
                    alt260=3;
                    }
                    break;
                case CHARN:
                    {
                    alt260=4;
                    }
                    break;
            }

            switch (alt260) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1161:4: final_charA
                    {
                    pushFollow(FOLLOW_final_charA_in_spec_const_10_116713);
                    final_charA();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1161:18: final_charS
                    {
                    pushFollow(FOLLOW_final_charS_in_spec_const_10_116717);
                    final_charS();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1161:32: final_charR
                    {
                    pushFollow(FOLLOW_final_charR_in_spec_const_10_116721);
                    final_charR();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1161:46: final_charN
                    {
                    pushFollow(FOLLOW_final_charN_in_spec_const_10_116725);
                    final_charN();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_10_11"



    // $ANTLR start "spec_const_10_12"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1163:1: spec_const_10_12[String nameElement] : ( final_charR | final_charP | final_charF | final_charC | final_charI | final_charD | final_charX | final_charU )? ;
    public final void spec_const_10_12(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1165:22: ( ( final_charR | final_charP | final_charF | final_charC | final_charI | final_charD | final_charX | final_charU )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:3: ( final_charR | final_charP | final_charF | final_charC | final_charI | final_charD | final_charX | final_charU )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:3: ( final_charR | final_charP | final_charF | final_charC | final_charI | final_charD | final_charX | final_charU )?
            int alt261=9;
            switch ( input.LA(1) ) {
                case CHARR:
                    {
                    alt261=1;
                    }
                    break;
                case CHARP:
                    {
                    alt261=2;
                    }
                    break;
                case CHARF:
                    {
                    alt261=3;
                    }
                    break;
                case CHARC:
                    {
                    alt261=4;
                    }
                    break;
                case CHARI:
                    {
                    alt261=5;
                    }
                    break;
                case CHARD:
                    {
                    alt261=6;
                    }
                    break;
                case CHARX:
                    {
                    alt261=7;
                    }
                    break;
                case CHARU:
                    {
                    alt261=8;
                    }
                    break;
            }

            switch (alt261) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:4: final_charR
                    {
                    pushFollow(FOLLOW_final_charR_in_spec_const_10_126746);
                    final_charR();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:18: final_charP
                    {
                    pushFollow(FOLLOW_final_charP_in_spec_const_10_126750);
                    final_charP();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:32: final_charF
                    {
                    pushFollow(FOLLOW_final_charF_in_spec_const_10_126754);
                    final_charF();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:46: final_charC
                    {
                    pushFollow(FOLLOW_final_charC_in_spec_const_10_126758);
                    final_charC();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:60: final_charI
                    {
                    pushFollow(FOLLOW_final_charI_in_spec_const_10_126762);
                    final_charI();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1166:74: final_charD
                    {
                    pushFollow(FOLLOW_final_charD_in_spec_const_10_126766);
                    final_charD();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1167:4: final_charX
                    {
                    pushFollow(FOLLOW_final_charX_in_spec_const_10_126773);
                    final_charX();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1167:18: final_charU
                    {
                    pushFollow(FOLLOW_final_charU_in_spec_const_10_126777);
                    final_charU();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_10_12"



    // $ANTLR start "spec_const_12_3"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1169:1: spec_const_12_3[String nameElement] : ( final_charP | final_charL )? ;
    public final void spec_const_12_3(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1171:22: ( ( final_charP | final_charL )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1172:3: ( final_charP | final_charL )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1172:3: ( final_charP | final_charL )?
            int alt262=3;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==CHARP) ) {
                alt262=1;
            }
            else if ( (LA262_0==CHARL) ) {
                alt262=2;
            }
            switch (alt262) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1172:4: final_charP
                    {
                    pushFollow(FOLLOW_final_charP_in_spec_const_12_36798);
                    final_charP();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1172:18: final_charL
                    {
                    pushFollow(FOLLOW_final_charL_in_spec_const_12_36802);
                    final_charL();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_12_3"


    public static class spec_sized_mult_lvl1_st_mandatory_2_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_st_mandatory_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1174:1: spec_sized_mult_lvl1_st_mandatory_2[String nameElement, int maxSize] : st_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] ;
    public final HPRIMSParser.spec_sized_mult_lvl1_st_mandatory_2_return spec_sized_mult_lvl1_st_mandatory_2(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_st_mandatory_2_return retval = new HPRIMSParser.spec_sized_mult_lvl1_st_mandatory_2_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1176:22: ( st_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1177:3: st_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_26822);
            st_nonsized_mandatory(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_26828); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_26830);
            st_nonsized_mandatory(nameElement + ".2");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_st_mandatory_2"


    public static class spec_sized_mult_lvl1_st_optionnal_2_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_st_optionnal_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1181:1: spec_sized_mult_lvl1_st_optionnal_2[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? ;
    public final HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_2_return spec_sized_mult_lvl1_st_optionnal_2(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_2_return retval = new HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_2_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1183:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1184:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_26853);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1185:3: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )?
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==DELIMITER2) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1185:4: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"]
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_26859); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_26861);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_st_optionnal_2"


    public static class spec_sized_mult_lvl1_st_optionnal_4_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_st_optionnal_4"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1189:1: spec_sized_mult_lvl1_st_optionnal_4[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )? )? ;
    public final HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_4_return spec_sized_mult_lvl1_st_optionnal_4(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_4_return retval = new HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_4_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1191:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1192:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )? )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46886);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1193:3: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )? )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==DELIMITER2) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1193:4: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_46892); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46894);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1194:4: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )? )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==DELIMITER2) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1194:5: DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )?
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_46901); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46903);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1195:5: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] )?
                            int alt264=2;
                            int LA264_0 = input.LA(1);

                            if ( (LA264_0==DELIMITER2) ) {
                                alt264=1;
                            }
                            switch (alt264) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1195:6: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"]
                                    {
                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_46911); 

                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46913);
                                    st_non_sized_optionnal(nameElement + ".2");

                                    state._fsp--;


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_st_optionnal_4"


    public static class spec_sized_mult_lvl1_st_mandatory_6_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_st_mandatory_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1199:1: spec_sized_mult_lvl1_st_mandatory_6[String nameElement, int maxSize] : st_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".3\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".4\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".5\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".6\"] ;
    public final HPRIMSParser.spec_sized_mult_lvl1_st_mandatory_6_return spec_sized_mult_lvl1_st_mandatory_6(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_st_mandatory_6_return retval = new HPRIMSParser.spec_sized_mult_lvl1_st_mandatory_6_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1201:22: ( st_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".3\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".4\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".5\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".6\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1202:3: st_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".2\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".3\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".4\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".5\"] DELIMITER2 st_nonsized_mandatory[$nameElement + \".6\"]
            {
            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66942);
            st_nonsized_mandatory(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66948); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66950);
            st_nonsized_mandatory(nameElement + ".2");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66957); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66959);
            st_nonsized_mandatory(nameElement + ".3");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66967); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66969);
            st_nonsized_mandatory(nameElement + ".4");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66978); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66980);
            st_nonsized_mandatory(nameElement + ".5");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66990); 

            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66992);
            st_nonsized_mandatory(nameElement + ".6");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_st_mandatory_6"


    public static class spec_sized_mult_lvl1_st_optionnal_6_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_st_optionnal_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1210:1: spec_sized_mult_lvl1_st_optionnal_6[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )? ;
    public final HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_6_return spec_sized_mult_lvl1_st_optionnal_6(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_6_return retval = new HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_6_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1212:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1213:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67015);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1214:4: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )?
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==DELIMITER2) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1214:5: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67022); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67024);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1215:5: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==DELIMITER2) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1215:6: DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )?
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67032); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67034);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1216:6: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )?
                            int alt269=2;
                            int LA269_0 = input.LA(1);

                            if ( (LA269_0==DELIMITER2) ) {
                                alt269=1;
                            }
                            switch (alt269) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1216:7: DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )?
                                    {
                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67043); 

                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67045);
                                    st_non_sized_optionnal(nameElement + ".4");

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1217:7: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )?
                                    int alt268=2;
                                    int LA268_0 = input.LA(1);

                                    if ( (LA268_0==DELIMITER2) ) {
                                        alt268=1;
                                    }
                                    switch (alt268) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1217:8: DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )?
                                            {
                                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67055); 

                                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67057);
                                            st_non_sized_optionnal(nameElement + ".5");

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1218:8: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )?
                                            int alt267=2;
                                            int LA267_0 = input.LA(1);

                                            if ( (LA267_0==DELIMITER2) ) {
                                                alt267=1;
                                            }
                                            switch (alt267) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1218:9: DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"]
                                                    {
                                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67068); 

                                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67070);
                                                    st_non_sized_optionnal(nameElement + ".6");

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_st_optionnal_6"


    public static class spec_sized_mult_lvl1_st_optionnal_8_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_st_optionnal_8"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1222:1: spec_sized_mult_lvl1_st_optionnal_8[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )? )? )? ;
    public final HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_8_return spec_sized_mult_lvl1_st_optionnal_8(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_8_return retval = new HPRIMSParser.spec_sized_mult_lvl1_st_optionnal_8_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1224:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1225:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )? )? )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87103);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1226:3: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )? )? )?
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==DELIMITER2) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1226:4: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )? )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87109); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87111);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1227:4: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )? )?
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==DELIMITER2) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1227:5: DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )?
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87118); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87120);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1228:5: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )? )?
                            int alt276=2;
                            int LA276_0 = input.LA(1);

                            if ( (LA276_0==DELIMITER2) ) {
                                alt276=1;
                            }
                            switch (alt276) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1228:6: DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )?
                                    {
                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87128); 

                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87130);
                                    st_non_sized_optionnal(nameElement + ".4");

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1229:6: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )? )?
                                    int alt275=2;
                                    int LA275_0 = input.LA(1);

                                    if ( (LA275_0==DELIMITER2) ) {
                                        alt275=1;
                                    }
                                    switch (alt275) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1229:7: DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )?
                                            {
                                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87139); 

                                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87141);
                                            st_non_sized_optionnal(nameElement + ".5");

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1230:7: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )? )?
                                            int alt274=2;
                                            int LA274_0 = input.LA(1);

                                            if ( (LA274_0==DELIMITER2) ) {
                                                alt274=1;
                                            }
                                            switch (alt274) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1230:8: DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )?
                                                    {
                                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87151); 

                                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87153);
                                                    st_non_sized_optionnal(nameElement + ".6");

                                                    state._fsp--;


                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1231:8: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )? )?
                                                    int alt273=2;
                                                    int LA273_0 = input.LA(1);

                                                    if ( (LA273_0==DELIMITER2) ) {
                                                        alt273=1;
                                                    }
                                                    switch (alt273) {
                                                        case 1 :
                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1231:9: DELIMITER2 st_non_sized_optionnal[$nameElement + \".7\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )?
                                                            {
                                                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87164); 

                                                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87166);
                                                            st_non_sized_optionnal(nameElement + ".7");

                                                            state._fsp--;


                                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1232:9: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"] )?
                                                            int alt272=2;
                                                            int LA272_0 = input.LA(1);

                                                            if ( (LA272_0==DELIMITER2) ) {
                                                                alt272=1;
                                                            }
                                                            switch (alt272) {
                                                                case 1 :
                                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1232:10: DELIMITER2 st_non_sized_optionnal[$nameElement + \".8\"]
                                                                    {
                                                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87178); 

                                                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87180);
                                                                    st_non_sized_optionnal(nameElement + ".8");

                                                                    state._fsp--;


                                                                    }
                                                                    break;

                                                            }


                                                            }
                                                            break;

                                                    }


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_st_optionnal_8"



    // $ANTLR start "spec_sized_mult_lvl2_st_optionnal_3"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1236:1: spec_sized_mult_lvl2_st_optionnal_3[String nameElement] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] )? )? ;
    public final void spec_sized_mult_lvl2_st_optionnal_3(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1238:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1239:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_37217);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1240:3: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==DELIMITER3) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1240:4: DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    {
                    match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_37223); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_37225);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1241:4: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==DELIMITER3) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1241:5: DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"]
                            {
                            match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_37232); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_37234);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_sized_mult_lvl2_st_optionnal_3"



    // $ANTLR start "spec_sized_mult_lvl2_st_optionnal_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1243:1: spec_sized_mult_lvl2_st_optionnal_6[String nameElement] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )? ;
    public final void spec_sized_mult_lvl2_st_optionnal_6(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1245:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1246:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67257);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1247:3: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )?
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==DELIMITER3) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1247:4: DELIMITER3 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )?
                    {
                    match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67263); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67265);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1248:4: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==DELIMITER3) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1248:5: DELIMITER3 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )?
                            {
                            match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67272); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67274);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1249:5: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )?
                            int alt283=2;
                            int LA283_0 = input.LA(1);

                            if ( (LA283_0==DELIMITER3) ) {
                                alt283=1;
                            }
                            switch (alt283) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1249:6: DELIMITER3 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )?
                                    {
                                    match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67282); 

                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67284);
                                    st_non_sized_optionnal(nameElement + ".4");

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1250:6: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )? )?
                                    int alt282=2;
                                    int LA282_0 = input.LA(1);

                                    if ( (LA282_0==DELIMITER3) ) {
                                        alt282=1;
                                    }
                                    switch (alt282) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1250:7: DELIMITER3 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )?
                                            {
                                            match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67293); 

                                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67295);
                                            st_non_sized_optionnal(nameElement + ".5");

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1251:7: ( DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"] )?
                                            int alt281=2;
                                            int LA281_0 = input.LA(1);

                                            if ( (LA281_0==DELIMITER3) ) {
                                                alt281=1;
                                            }
                                            switch (alt281) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1251:8: DELIMITER3 st_non_sized_optionnal[$nameElement + \".6\"]
                                                    {
                                                    match(input,DELIMITER3,FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67305); 

                                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67307);
                                                    st_non_sized_optionnal(nameElement + ".6");

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_sized_mult_lvl2_st_optionnal_6"


    public static class spec_sized_mult_lvl1_nm_optionnal_2_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_nm_optionnal_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1253:1: spec_sized_mult_lvl1_nm_optionnal_2[String nameElement, int maxSize] : nm_nonsized_optionnal[$nameElement + \".1\"] DELIMITER2 nm_nonsized_optionnal[$nameElement + \".2\"] ;
    public final HPRIMSParser.spec_sized_mult_lvl1_nm_optionnal_2_return spec_sized_mult_lvl1_nm_optionnal_2(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_nm_optionnal_2_return retval = new HPRIMSParser.spec_sized_mult_lvl1_nm_optionnal_2_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1255:22: ( nm_nonsized_optionnal[$nameElement + \".1\"] DELIMITER2 nm_nonsized_optionnal[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1256:3: nm_nonsized_optionnal[$nameElement + \".1\"] DELIMITER2 nm_nonsized_optionnal[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_nm_nonsized_optionnal_in_spec_sized_mult_lvl1_nm_optionnal_27336);
            nm_nonsized_optionnal(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_nm_optionnal_27341); 

            pushFollow(FOLLOW_nm_nonsized_optionnal_in_spec_sized_mult_lvl1_nm_optionnal_27343);
            nm_nonsized_optionnal(nameElement + ".2");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_nm_optionnal_2"


    public static class spec_sized_mult_lvl1_nm_mandatory_2_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_mult_lvl1_nm_mandatory_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1260:1: spec_sized_mult_lvl1_nm_mandatory_2[String nameElement, int maxSize] : nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 nm_nonsized_mandatory[$nameElement + \".2\"] ;
    public final HPRIMSParser.spec_sized_mult_lvl1_nm_mandatory_2_return spec_sized_mult_lvl1_nm_mandatory_2(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_mult_lvl1_nm_mandatory_2_return retval = new HPRIMSParser.spec_sized_mult_lvl1_nm_mandatory_2_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1262:22: ( nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 nm_nonsized_mandatory[$nameElement + \".2\"] )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1263:3: nm_nonsized_mandatory[$nameElement + \".1\"] DELIMITER2 nm_nonsized_mandatory[$nameElement + \".2\"]
            {
            pushFollow(FOLLOW_nm_nonsized_mandatory_in_spec_sized_mult_lvl1_nm_mandatory_27368);
            nm_nonsized_mandatory(nameElement + ".1");

            state._fsp--;


            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_nm_mandatory_27373); 

            pushFollow(FOLLOW_nm_nonsized_mandatory_in_spec_sized_mult_lvl1_nm_mandatory_27375);
            nm_nonsized_mandatory(nameElement + ".2");

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_mult_lvl1_nm_mandatory_2"


    public static class spec_sized_cna_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_cna"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1267:1: spec_sized_cna[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 spec_sized_mult_lvl2_st_optionnal_6[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )? ;
    public final HPRIMSParser.spec_sized_cna_return spec_sized_cna(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_cna_return retval = new HPRIMSParser.spec_sized_cna_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1269:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 spec_sized_mult_lvl2_st_optionnal_6[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1270:3: st_non_sized_optionnal[$nameElement + \".1\"] ( DELIMITER2 spec_sized_mult_lvl2_st_optionnal_6[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_cna7398);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1271:4: ( DELIMITER2 spec_sized_mult_lvl2_st_optionnal_6[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==DELIMITER2) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1271:5: DELIMITER2 spec_sized_mult_lvl2_st_optionnal_6[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_cna7405); 

                    pushFollow(FOLLOW_spec_sized_mult_lvl2_st_optionnal_6_in_spec_sized_cna7407);
                    spec_sized_mult_lvl2_st_optionnal_6(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1272:5: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==DELIMITER2) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1272:6: DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"]
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_cna7415); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_cna7417);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                 matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_cna"


    public static class spec_sized_8_3_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_8_3"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1280:1: spec_sized_8_3[String nameElement, int maxSize] : ( st_sized_mandatory[$nameElement + \".1\", 16] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )? ;
    public final HPRIMSParser.spec_sized_8_3_return spec_sized_8_3(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_8_3_return retval = new HPRIMSParser.spec_sized_8_3_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1282:22: ( ( st_sized_mandatory[$nameElement + \".1\", 16] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1283:3: ( st_sized_mandatory[$nameElement + \".1\", 16] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1283:3: ( st_sized_mandatory[$nameElement + \".1\", 16] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( ((LA289_0 >= CHARA && LA289_0 <= CHIFFRE9)||(LA289_0 >= LETTRE && LA289_0 <= POINT)) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1283:4: st_sized_mandatory[$nameElement + \".1\", 16] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    {
                    pushFollow(FOLLOW_st_sized_mandatory_in_spec_sized_8_37449);
                    st_sized_mandatory(nameElement + ".1", 16);

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1284:4: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==DELIMITER2) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1284:5: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"]
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_8_37456); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_8_37458);
                            st_non_sized_optionnal(nameElement + ".2");

                            state._fsp--;


                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_8_37466); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_8_37468);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_8_3"


    public static class spec_sized_9_3_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_9_3"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1296:1: spec_sized_9_3[String nameElement, int maxSize] : st_sized_optionnal[$nameElement + \".1\", 12] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 10] )? ;
    public final HPRIMSParser.spec_sized_9_3_return spec_sized_9_3(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_9_3_return retval = new HPRIMSParser.spec_sized_9_3_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1298:22: ( st_sized_optionnal[$nameElement + \".1\", 12] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 10] )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1300:3: st_sized_optionnal[$nameElement + \".1\", 12] ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 10] )?
            {
            pushFollow(FOLLOW_st_sized_optionnal_in_spec_sized_9_37508);
            st_sized_optionnal(nameElement + ".1", 12);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1301:3: ( DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 10] )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==DELIMITER2) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1301:4: DELIMITER2 st_sized_optionnal[$nameElement + \".2\", 10]
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_9_37514); 

                    pushFollow(FOLLOW_st_sized_optionnal_in_spec_sized_9_37516);
                    st_sized_optionnal(nameElement + ".2", 10);

                    state._fsp--;


                    }
                    break;

            }


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_9_3"



    // $ANTLR start "spec_non_sized_9_8"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1304:1: spec_non_sized_9_8[String nameElement] : ts_sized_optionnal[$nameElement + \".1\", 26] ( REPETITEUR ts_sized_optionnal[$nameElement + \".2\", 26] )? ;
    public final void spec_non_sized_9_8(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1306:22: ( ts_sized_optionnal[$nameElement + \".1\", 26] ( REPETITEUR ts_sized_optionnal[$nameElement + \".2\", 26] )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1307:3: ts_sized_optionnal[$nameElement + \".1\", 26] ( REPETITEUR ts_sized_optionnal[$nameElement + \".2\", 26] )?
            {
            pushFollow(FOLLOW_ts_sized_optionnal_in_spec_non_sized_9_87541);
            ts_sized_optionnal(nameElement + ".1", 26);

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1308:4: ( REPETITEUR ts_sized_optionnal[$nameElement + \".2\", 26] )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==REPETITEUR) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1308:5: REPETITEUR ts_sized_optionnal[$nameElement + \".2\", 26]
                    {
                    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_spec_non_sized_9_87548); 

                    pushFollow(FOLLOW_ts_sized_optionnal_in_spec_non_sized_9_87550);
                    ts_sized_optionnal(nameElement + ".2", 26);

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_non_sized_9_8"


    public static class spec_sized_9_16_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_9_16"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1310:1: spec_sized_9_16[String nameElement, int maxSize] : spec_sized_mult_lvl2_st_optionnal_3[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )? ;
    public final HPRIMSParser.spec_sized_9_16_return spec_sized_9_16(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_9_16_return retval = new HPRIMSParser.spec_sized_9_16_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1312:22: ( spec_sized_mult_lvl2_st_optionnal_3[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1313:3: spec_sized_mult_lvl2_st_optionnal_3[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            {
            pushFollow(FOLLOW_spec_sized_mult_lvl2_st_optionnal_3_in_spec_sized_9_167571);
            spec_sized_mult_lvl2_st_optionnal_3(nameElement + ".2");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1314:3: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )? )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==DELIMITER2) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1314:4: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_9_167577); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_9_167579);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1315:4: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] )?
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==DELIMITER2) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1315:5: DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"]
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_9_167586); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_9_167588);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_9_16"


    public static class spec_sized_10_4_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_10_4"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1318:1: spec_sized_10_4[String nameElement, int maxsize] : st_nonsized_mandatory[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )? ;
    public final HPRIMSParser.spec_sized_10_4_return spec_sized_10_4(String nameElement, int maxsize) throws RecognitionException {
        HPRIMSParser.spec_sized_10_4_return retval = new HPRIMSParser.spec_sized_10_4_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1320:22: ( st_nonsized_mandatory[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1321:3: st_nonsized_mandatory[$nameElement + \".1\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )?
            {
            pushFollow(FOLLOW_st_nonsized_mandatory_in_spec_sized_10_47615);
            st_nonsized_mandatory(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1322:3: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )? )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==DELIMITER2) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1322:4: DELIMITER2 st_non_sized_optionnal[$nameElement + \".2\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )?
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_47621); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47623);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1323:4: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )? )?
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==DELIMITER2) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1323:5: DELIMITER2 st_non_sized_optionnal[$nameElement + \".3\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )?
                            {
                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_47630); 

                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47632);
                            st_non_sized_optionnal(nameElement + ".3");

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1324:5: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )? )?
                            int alt296=2;
                            int LA296_0 = input.LA(1);

                            if ( (LA296_0==DELIMITER2) ) {
                                alt296=1;
                            }
                            switch (alt296) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1324:6: DELIMITER2 st_non_sized_optionnal[$nameElement + \".4\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )?
                                    {
                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_47640); 

                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47642);
                                    st_non_sized_optionnal(nameElement + ".4");

                                    state._fsp--;


                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1325:6: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )? )?
                                    int alt295=2;
                                    int LA295_0 = input.LA(1);

                                    if ( (LA295_0==DELIMITER2) ) {
                                        alt295=1;
                                    }
                                    switch (alt295) {
                                        case 1 :
                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1325:7: DELIMITER2 st_non_sized_optionnal[$nameElement + \".5\"] ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )?
                                            {
                                            match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_47651); 

                                            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47653);
                                            st_non_sized_optionnal(nameElement + ".5");

                                            state._fsp--;


                                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1326:7: ( DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"] )?
                                            int alt294=2;
                                            int LA294_0 = input.LA(1);

                                            if ( (LA294_0==DELIMITER2) ) {
                                                alt294=1;
                                            }
                                            switch (alt294) {
                                                case 1 :
                                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1326:8: DELIMITER2 st_non_sized_optionnal[$nameElement + \".6\"]
                                                    {
                                                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_spec_sized_10_47663); 

                                                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47665);
                                                    st_non_sized_optionnal(nameElement + ".6");

                                                    state._fsp--;


                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxsize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_10_4"



    // $ANTLR start "spec_sized_10_6_tx"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1329:1: spec_sized_10_6_tx[String nameElement, int maxSize] : (g= final_spec_10_6_tx )? ;
    public final void spec_sized_10_6_tx(String nameElement, int maxSize) throws RecognitionException {
        String g =null;



          ParserRuleReturnScope retval = new ParserRuleReturnScope();
          retval.start = input.LT(1);
          startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1334:22: ( (g= final_spec_10_6_tx )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1335:3: (g= final_spec_10_6_tx )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1335:4: (g= final_spec_10_6_tx )?
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( ((LA299_0 >= CHARA && LA299_0 <= CHIFFRE9)||LA299_0==DELIMITER2||(LA299_0 >= LETTRE && LA299_0 <= POINT)) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1335:4: g= final_spec_10_6_tx
                    {
                    pushFollow(FOLLOW_final_spec_10_6_tx_in_spec_sized_10_6_tx7700);
                    g=final_spec_10_6_tx();

                    state._fsp--;


                    }
                    break;

            }


            if (g != null)
                matchRegex(g, "^.{0," + maxSize + "}$", retval.start);

            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_sized_10_6_tx"


    public static class spec_sized_tn_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "spec_sized_tn"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1339:1: spec_sized_tn[String nameElement, int maxSize] : st_non_sized_optionnal[$nameElement + \".1\"] ( REPETITEUR st_non_sized_optionnal[$nameElement + \".2\"] )? ;
    public final HPRIMSParser.spec_sized_tn_return spec_sized_tn(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.spec_sized_tn_return retval = new HPRIMSParser.spec_sized_tn_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1341:22: ( st_non_sized_optionnal[$nameElement + \".1\"] ( REPETITEUR st_non_sized_optionnal[$nameElement + \".2\"] )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1342:2: st_non_sized_optionnal[$nameElement + \".1\"] ( REPETITEUR st_non_sized_optionnal[$nameElement + \".2\"] )?
            {
            pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_tn7722);
            st_non_sized_optionnal(nameElement + ".1");

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1343:3: ( REPETITEUR st_non_sized_optionnal[$nameElement + \".2\"] )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==REPETITEUR) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1343:4: REPETITEUR st_non_sized_optionnal[$nameElement + \".2\"]
                    {
                    match(input,REPETITEUR,FOLLOW_REPETITEUR_in_spec_sized_tn7728); 

                    pushFollow(FOLLOW_st_non_sized_optionnal_in_spec_sized_tn7730);
                    st_non_sized_optionnal(nameElement + ".2");

                    state._fsp--;


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "spec_sized_tn"


    public static class st_sized_optionnal_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "st_sized_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1349:1: st_sized_optionnal[String nameElement, int maxSize] : ( final_st )? ;
    public final HPRIMSParser.st_sized_optionnal_return st_sized_optionnal(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.st_sized_optionnal_return retval = new HPRIMSParser.st_sized_optionnal_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1351:22: ( ( final_st )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1352:3: ( final_st )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1352:3: ( final_st )?
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( ((LA301_0 >= CHARA && LA301_0 <= CHIFFRE9)||(LA301_0 >= LETTRE && LA301_0 <= POINT)) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1352:3: final_st
                    {
                    pushFollow(FOLLOW_final_st_in_st_sized_optionnal7758);
                    final_st();

                    state._fsp--;


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                 matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "st_sized_optionnal"


    public static class st_sized_mandatory_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "st_sized_mandatory"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1356:1: st_sized_mandatory[String nameElement, int maxSize] : final_st ;
    public final HPRIMSParser.st_sized_mandatory_return st_sized_mandatory(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.st_sized_mandatory_return retval = new HPRIMSParser.st_sized_mandatory_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1358:22: ( final_st )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1359:3: final_st
            {
            pushFollow(FOLLOW_final_st_in_st_sized_mandatory7781);
            final_st();

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "st_sized_mandatory"



    // $ANTLR start "st_non_sized_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1362:1: st_non_sized_optionnal[String nameElement] : ( final_st )? ;
    public final void st_non_sized_optionnal(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1364:22: ( ( final_st )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1365:3: ( final_st )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1365:3: ( final_st )?
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( ((LA302_0 >= CHARA && LA302_0 <= CHIFFRE9)||(LA302_0 >= LETTRE && LA302_0 <= POINT)) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1365:3: final_st
                    {
                    pushFollow(FOLLOW_final_st_in_st_non_sized_optionnal7803);
                    final_st();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "st_non_sized_optionnal"



    // $ANTLR start "st_nonsized_mandatory"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1367:1: st_nonsized_mandatory[String nameElement] : final_st ;
    public final void st_nonsized_mandatory(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1369:22: ( final_st )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1370:3: final_st
            {
            pushFollow(FOLLOW_final_st_in_st_nonsized_mandatory7822);
            final_st();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "st_nonsized_mandatory"


    public static class nm_sized_optionnal_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "nm_sized_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1372:1: nm_sized_optionnal[String nameElement, int maxSize] : ( final_nm )? ;
    public final HPRIMSParser.nm_sized_optionnal_return nm_sized_optionnal(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.nm_sized_optionnal_return retval = new HPRIMSParser.nm_sized_optionnal_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1374:22: ( ( final_nm )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1375:3: ( final_nm )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1375:3: ( final_nm )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( ((LA303_0 >= CHIFFRE0 && LA303_0 <= CHIFFRE9)||(LA303_0 >= MOINS && LA303_0 <= POINT)) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1375:3: final_nm
                    {
                    pushFollow(FOLLOW_final_nm_in_nm_sized_optionnal7840);
                    final_nm();

                    state._fsp--;


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                 matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nm_sized_optionnal"


    public static class nm_sized_mandatory_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "nm_sized_mandatory"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1379:1: nm_sized_mandatory[String nameElement, int maxSize] : final_nm ;
    public final HPRIMSParser.nm_sized_mandatory_return nm_sized_mandatory(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.nm_sized_mandatory_return retval = new HPRIMSParser.nm_sized_mandatory_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1381:22: ( final_nm )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1382:3: final_nm
            {
            pushFollow(FOLLOW_final_nm_in_nm_sized_mandatory7863);
            final_nm();

            state._fsp--;


            if (input.toString(retval.start,input.LT(-1)) != null)
                 matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nm_sized_mandatory"


    public static class nm_integer_sized_optionnal_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "nm_integer_sized_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1386:1: nm_integer_sized_optionnal[String nameElement, int maxSize] : ( final_nm_integer )? ;
    public final HPRIMSParser.nm_integer_sized_optionnal_return nm_integer_sized_optionnal(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.nm_integer_sized_optionnal_return retval = new HPRIMSParser.nm_integer_sized_optionnal_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1388:22: ( ( final_nm_integer )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1389:3: ( final_nm_integer )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1389:3: ( final_nm_integer )?
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( ((LA304_0 >= CHIFFRE0 && LA304_0 <= CHIFFRE9)) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1389:3: final_nm_integer
                    {
                    pushFollow(FOLLOW_final_nm_integer_in_nm_integer_sized_optionnal7885);
                    final_nm_integer();

                    state._fsp--;


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                 matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nm_integer_sized_optionnal"


    public static class nm_integer_sized_mandatory_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "nm_integer_sized_mandatory"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1393:1: nm_integer_sized_mandatory[String nameElement, int maxSize] : final_nm_integer ;
    public final HPRIMSParser.nm_integer_sized_mandatory_return nm_integer_sized_mandatory(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.nm_integer_sized_mandatory_return retval = new HPRIMSParser.nm_integer_sized_mandatory_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1395:22: ( final_nm_integer )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1396:3: final_nm_integer
            {
            pushFollow(FOLLOW_final_nm_integer_in_nm_integer_sized_mandatory7913);
            final_nm_integer();

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nm_integer_sized_mandatory"


    public static class ts_sized_optionnal_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "ts_sized_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1400:1: ts_sized_optionnal[String nameElement, int maxSize] : ( final_ts )? ;
    public final HPRIMSParser.ts_sized_optionnal_return ts_sized_optionnal(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.ts_sized_optionnal_return retval = new HPRIMSParser.ts_sized_optionnal_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1402:22: ( ( final_ts )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1403:3: ( final_ts )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1403:3: ( final_ts )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( ((LA305_0 >= CHIFFRE0 && LA305_0 <= CHIFFRE9)) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1403:3: final_ts
                    {
                    pushFollow(FOLLOW_final_ts_in_ts_sized_optionnal7936);
                    final_ts();

                    state._fsp--;


                    }
                    break;

            }


            if (input.toString(retval.start,input.LT(-1)) != null)
                matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ts_sized_optionnal"


    public static class ts_sized_mandatory_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "ts_sized_mandatory"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1407:1: ts_sized_mandatory[String nameElement, int maxSize] : final_ts ;
    public final HPRIMSParser.ts_sized_mandatory_return ts_sized_mandatory(String nameElement, int maxSize) throws RecognitionException {
        HPRIMSParser.ts_sized_mandatory_return retval = new HPRIMSParser.ts_sized_mandatory_return();
        retval.start = input.LT(1);


        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1409:22: ( final_ts )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1410:3: final_ts
            {
            pushFollow(FOLLOW_final_ts_in_ts_sized_mandatory7959);
            final_ts();

            state._fsp--;


            matchRegex(input.toString(retval.start,input.LT(-1)), "^.{0," + maxSize + "}$", retval.start);

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ts_sized_mandatory"



    // $ANTLR start "nm_nonsized_mandatory"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1413:1: nm_nonsized_mandatory[String nameElement] : final_nm ;
    public final void nm_nonsized_mandatory(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1415:22: ( final_nm )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1416:3: final_nm
            {
            pushFollow(FOLLOW_final_nm_in_nm_nonsized_mandatory7981);
            final_nm();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "nm_nonsized_mandatory"



    // $ANTLR start "nm_nonsized_optionnal"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1418:1: nm_nonsized_optionnal[String nameElement] : ( final_nm )? ;
    public final void nm_nonsized_optionnal(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1420:22: ( ( final_nm )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1421:3: ( final_nm )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1421:3: ( final_nm )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( ((LA306_0 >= CHIFFRE0 && LA306_0 <= CHIFFRE9)||(LA306_0 >= MOINS && LA306_0 <= POINT)) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1421:3: final_nm
                    {
                    pushFollow(FOLLOW_final_nm_in_nm_nonsized_optionnal7999);
                    final_nm();

                    state._fsp--;


                    }
                    break;

            }


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "nm_nonsized_optionnal"



    // $ANTLR start "spec_const_7_13_1_version_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1423:1: spec_const_7_13_1_version_2_0[String nameElement] : final_version_2_0 ;
    public final void spec_const_7_13_1_version_2_0(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1425:22: ( final_version_2_0 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1426:3: final_version_2_0
            {
            pushFollow(FOLLOW_final_version_2_0_in_spec_const_7_13_1_version_2_08018);
            final_version_2_0();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_1_version_2_0"



    // $ANTLR start "spec_const_7_13_1_version_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1428:1: spec_const_7_13_1_version_2_1[String nameElement] : final_version_2_1 ;
    public final void spec_const_7_13_1_version_2_1(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1430:22: ( final_version_2_1 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1431:3: final_version_2_1
            {
            pushFollow(FOLLOW_final_version_2_1_in_spec_const_7_13_1_version_2_18036);
            final_version_2_1();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_1_version_2_1"



    // $ANTLR start "spec_const_7_13_1_version_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1433:1: spec_const_7_13_1_version_2_2[String nameElement] : final_version_2_2 ;
    public final void spec_const_7_13_1_version_2_2(String nameElement) throws RecognitionException {
        startElement(nameElement);
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1435:22: ( final_version_2_2 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1436:3: final_version_2_2
            {
            pushFollow(FOLLOW_final_version_2_2_in_spec_const_7_13_1_version_2_28056);
            final_version_2_2();

            state._fsp--;


            }

            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "spec_const_7_13_1_version_2_2"



    // $ANTLR start "final_spec_10_6_tx"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1440:1: final_spec_10_6_tx returns [String consoText] : g= content_spec_10_6 ;
    public final String final_spec_10_6_tx() throws RecognitionException {
        String consoText = null;


        String g =null;


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1440:46: (g= content_spec_10_6 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1441:3: g= content_spec_10_6
            {
            pushFollow(FOLLOW_content_spec_10_6_in_final_spec_10_6_tx8073);
            g=content_spec_10_6();

            state._fsp--;


            content(g);
               consoText = g;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return consoText;
    }
    // $ANTLR end "final_spec_10_6_tx"



    // $ANTLR start "content_spec_10_6"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1445:1: content_spec_10_6 returns [String consoText] : (r= character | DELIMITER2 ) (p= content_spec_10_6 )? ;
    public final String content_spec_10_6() throws RecognitionException {
        String consoText = null;


        HPRIMSParser.character_return r =null;

        String p =null;


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1445:45: ( (r= character | DELIMITER2 ) (p= content_spec_10_6 )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1446:3: (r= character | DELIMITER2 ) (p= content_spec_10_6 )?
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1446:3: (r= character | DELIMITER2 )
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( ((LA307_0 >= CHARA && LA307_0 <= CHIFFRE9)||(LA307_0 >= LETTRE && LA307_0 <= POINT)) ) {
                alt307=1;
            }
            else if ( (LA307_0==DELIMITER2) ) {
                alt307=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);

                throw nvae;

            }
            switch (alt307) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1446:4: r= character
                    {
                    pushFollow(FOLLOW_character_in_content_spec_10_68095);
                    r=character();

                    state._fsp--;


                    consoText = (r!=null?input.toString(r.start,r.stop):null);

                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1446:42: DELIMITER2
                    {
                    match(input,DELIMITER2,FOLLOW_DELIMITER2_in_content_spec_10_68101); 

                    consoText = "\n";

                    }
                    break;

            }


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1447:6: (p= content_spec_10_6 )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( ((LA308_0 >= CHARA && LA308_0 <= CHIFFRE9)||LA308_0==DELIMITER2||(LA308_0 >= LETTRE && LA308_0 <= POINT)) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1447:6: p= content_spec_10_6
                    {
                    pushFollow(FOLLOW_content_spec_10_6_in_content_spec_10_68112);
                    p=content_spec_10_6();

                    state._fsp--;


                    }
                    break;

            }


            if (p != null) { consoText += p; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return consoText;
    }
    // $ANTLR end "content_spec_10_6"


    public static class final_ts_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_ts"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1449:1: final_ts : chiffre chiffre chiffre chiffre chiffre chiffre ( chiffre chiffre ( chiffre chiffre chiffre chiffre ( chiffre chiffre )? )? )? ;
    public final HPRIMSParser.final_ts_return final_ts() throws RecognitionException {
        HPRIMSParser.final_ts_return retval = new HPRIMSParser.final_ts_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1449:9: ( chiffre chiffre chiffre chiffre chiffre chiffre ( chiffre chiffre ( chiffre chiffre chiffre chiffre ( chiffre chiffre )? )? )? )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1450:3: chiffre chiffre chiffre chiffre chiffre chiffre ( chiffre chiffre ( chiffre chiffre chiffre chiffre ( chiffre chiffre )? )? )?
            {
            pushFollow(FOLLOW_chiffre_in_final_ts8124);
            chiffre();

            state._fsp--;


            pushFollow(FOLLOW_chiffre_in_final_ts8126);
            chiffre();

            state._fsp--;


            pushFollow(FOLLOW_chiffre_in_final_ts8130);
            chiffre();

            state._fsp--;


            pushFollow(FOLLOW_chiffre_in_final_ts8132);
            chiffre();

            state._fsp--;


            pushFollow(FOLLOW_chiffre_in_final_ts8134);
            chiffre();

            state._fsp--;


            pushFollow(FOLLOW_chiffre_in_final_ts8138);
            chiffre();

            state._fsp--;


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1452:11: ( chiffre chiffre ( chiffre chiffre chiffre chiffre ( chiffre chiffre )? )? )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( ((LA311_0 >= CHIFFRE0 && LA311_0 <= CHIFFRE9)) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1452:12: chiffre chiffre ( chiffre chiffre chiffre chiffre ( chiffre chiffre )? )?
                    {
                    pushFollow(FOLLOW_chiffre_in_final_ts8141);
                    chiffre();

                    state._fsp--;


                    pushFollow(FOLLOW_chiffre_in_final_ts8143);
                    chiffre();

                    state._fsp--;


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1453:3: ( chiffre chiffre chiffre chiffre ( chiffre chiffre )? )?
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( ((LA310_0 >= CHIFFRE0 && LA310_0 <= CHIFFRE9)) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1453:4: chiffre chiffre chiffre chiffre ( chiffre chiffre )?
                            {
                            pushFollow(FOLLOW_chiffre_in_final_ts8148);
                            chiffre();

                            state._fsp--;


                            pushFollow(FOLLOW_chiffre_in_final_ts8150);
                            chiffre();

                            state._fsp--;


                            pushFollow(FOLLOW_chiffre_in_final_ts8152);
                            chiffre();

                            state._fsp--;


                            pushFollow(FOLLOW_chiffre_in_final_ts8156);
                            chiffre();

                            state._fsp--;


                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1454:11: ( chiffre chiffre )?
                            int alt309=2;
                            int LA309_0 = input.LA(1);

                            if ( ((LA309_0 >= CHIFFRE0 && LA309_0 <= CHIFFRE9)) ) {
                                alt309=1;
                            }
                            switch (alt309) {
                                case 1 :
                                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1454:12: chiffre chiffre
                                    {
                                    pushFollow(FOLLOW_chiffre_in_final_ts8159);
                                    chiffre();

                                    state._fsp--;


                                    pushFollow(FOLLOW_chiffre_in_final_ts8161);
                                    chiffre();

                                    state._fsp--;


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_ts"


    public static class final_st_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_st"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1457:1: final_st : ( character )+ ;
    public final HPRIMSParser.final_st_return final_st() throws RecognitionException {
        HPRIMSParser.final_st_return retval = new HPRIMSParser.final_st_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1457:9: ( ( character )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1458:3: ( character )+
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1458:3: ( character )+
            int cnt312=0;
            loop312:
            do {
                int alt312=2;
                int LA312_0 = input.LA(1);

                if ( ((LA312_0 >= CHARA && LA312_0 <= CHIFFRE9)||(LA312_0 >= LETTRE && LA312_0 <= POINT)) ) {
                    alt312=1;
                }


                switch (alt312) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1458:3: character
            	    {
            	    pushFollow(FOLLOW_character_in_final_st8180);
            	    character();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt312 >= 1 ) break loop312;
                        EarlyExitException eee =
                            new EarlyExitException(312, input);
                        throw eee;
                }
                cnt312++;
            } while (true);


            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_st"


    public static class final_nm_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_nm"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1461:1: final_nm : ( ( PLUS | MOINS )? ( ( ( chiffre )+ ( POINT ( chiffre )* )? ) | ( POINT ( chiffre )+ ) ) ) ;
    public final HPRIMSParser.final_nm_return final_nm() throws RecognitionException {
        HPRIMSParser.final_nm_return retval = new HPRIMSParser.final_nm_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1461:9: ( ( ( PLUS | MOINS )? ( ( ( chiffre )+ ( POINT ( chiffre )* )? ) | ( POINT ( chiffre )+ ) ) ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1462:3: ( ( PLUS | MOINS )? ( ( ( chiffre )+ ( POINT ( chiffre )* )? ) | ( POINT ( chiffre )+ ) ) )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1462:3: ( ( PLUS | MOINS )? ( ( ( chiffre )+ ( POINT ( chiffre )* )? ) | ( POINT ( chiffre )+ ) ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1462:4: ( PLUS | MOINS )? ( ( ( chiffre )+ ( POINT ( chiffre )* )? ) | ( POINT ( chiffre )+ ) )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1462:4: ( PLUS | MOINS )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( ((LA313_0 >= MOINS && LA313_0 <= PLUS)) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:
                    {
                    if ( (input.LA(1) >= MOINS && input.LA(1) <= PLUS) ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:3: ( ( ( chiffre )+ ( POINT ( chiffre )* )? ) | ( POINT ( chiffre )+ ) )
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( ((LA318_0 >= CHIFFRE0 && LA318_0 <= CHIFFRE9)) ) {
                alt318=1;
            }
            else if ( (LA318_0==POINT) ) {
                alt318=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);

                throw nvae;

            }
            switch (alt318) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:4: ( ( chiffre )+ ( POINT ( chiffre )* )? )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:4: ( ( chiffre )+ ( POINT ( chiffre )* )? )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:5: ( chiffre )+ ( POINT ( chiffre )* )?
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:5: ( chiffre )+
                    int cnt314=0;
                    loop314:
                    do {
                        int alt314=2;
                        int LA314_0 = input.LA(1);

                        if ( ((LA314_0 >= CHIFFRE0 && LA314_0 <= CHIFFRE9)) ) {
                            alt314=1;
                        }


                        switch (alt314) {
                    	case 1 :
                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:5: chiffre
                    	    {
                    	    pushFollow(FOLLOW_chiffre_in_final_nm8209);
                    	    chiffre();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt314 >= 1 ) break loop314;
                                EarlyExitException eee =
                                    new EarlyExitException(314, input);
                                throw eee;
                        }
                        cnt314++;
                    } while (true);


                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:14: ( POINT ( chiffre )* )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==POINT) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:15: POINT ( chiffre )*
                            {
                            match(input,POINT,FOLLOW_POINT_in_final_nm8213); 

                            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:21: ( chiffre )*
                            loop315:
                            do {
                                int alt315=2;
                                int LA315_0 = input.LA(1);

                                if ( ((LA315_0 >= CHIFFRE0 && LA315_0 <= CHIFFRE9)) ) {
                                    alt315=1;
                                }


                                switch (alt315) {
                            	case 1 :
                            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1463:21: chiffre
                            	    {
                            	    pushFollow(FOLLOW_chiffre_in_final_nm8215);
                            	    chiffre();

                            	    state._fsp--;


                            	    }
                            	    break;

                            	default :
                            	    break loop315;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1464:4: ( POINT ( chiffre )+ )
                    {
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1464:4: ( POINT ( chiffre )+ )
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1464:5: POINT ( chiffre )+
                    {
                    match(input,POINT,FOLLOW_POINT_in_final_nm8225); 

                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1464:11: ( chiffre )+
                    int cnt317=0;
                    loop317:
                    do {
                        int alt317=2;
                        int LA317_0 = input.LA(1);

                        if ( ((LA317_0 >= CHIFFRE0 && LA317_0 <= CHIFFRE9)) ) {
                            alt317=1;
                        }


                        switch (alt317) {
                    	case 1 :
                    	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1464:11: chiffre
                    	    {
                    	    pushFollow(FOLLOW_chiffre_in_final_nm8227);
                    	    chiffre();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt317 >= 1 ) break loop317;
                                EarlyExitException eee =
                                    new EarlyExitException(317, input);
                                throw eee;
                        }
                        cnt317++;
                    } while (true);


                    }


                    }
                    break;

            }


            }


            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_nm"


    public static class final_nm_integer_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_nm_integer"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1467:1: final_nm_integer : ( chiffre )+ ;
    public final HPRIMSParser.final_nm_integer_return final_nm_integer() throws RecognitionException {
        HPRIMSParser.final_nm_integer_return retval = new HPRIMSParser.final_nm_integer_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1467:17: ( ( chiffre )+ )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1468:3: ( chiffre )+
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1468:3: ( chiffre )+
            int cnt319=0;
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);

                if ( ((LA319_0 >= CHIFFRE0 && LA319_0 <= CHIFFRE9)) ) {
                    alt319=1;
                }


                switch (alt319) {
            	case 1 :
            	    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1468:3: chiffre
            	    {
            	    pushFollow(FOLLOW_chiffre_in_final_nm_integer8244);
            	    chiffre();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt319 >= 1 ) break loop319;
                        EarlyExitException eee =
                            new EarlyExitException(319, input);
                        throw eee;
                }
                cnt319++;
            } while (true);


            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_nm_integer"


    public static class final_ADM_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_ADM"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1471:1: final_ADM : CHARA CHARD CHARM ;
    public final HPRIMSParser.final_ADM_return final_ADM() throws RecognitionException {
        HPRIMSParser.final_ADM_return retval = new HPRIMSParser.final_ADM_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1471:10: ( CHARA CHARD CHARM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1471:12: CHARA CHARD CHARM
            {
            match(input,CHARA,FOLLOW_CHARA_in_final_ADM8256); 

            match(input,CHARD,FOLLOW_CHARD_in_final_ADM8258); 

            match(input,CHARM,FOLLOW_CHARM_in_final_ADM8260); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_ADM"


    public static class final_ORA_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_ORA"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1472:1: final_ORA : CHARO CHARR CHARA ;
    public final HPRIMSParser.final_ORA_return final_ORA() throws RecognitionException {
        HPRIMSParser.final_ORA_return retval = new HPRIMSParser.final_ORA_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1472:10: ( CHARO CHARR CHARA )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1472:12: CHARO CHARR CHARA
            {
            match(input,CHARO,FOLLOW_CHARO_in_final_ORA8268); 

            match(input,CHARR,FOLLOW_CHARR_in_final_ORA8270); 

            match(input,CHARA,FOLLOW_CHARA_in_final_ORA8272); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_ORA"


    public static class final_ORU_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_ORU"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1473:1: final_ORU : CHARO CHARR CHARU ;
    public final HPRIMSParser.final_ORU_return final_ORU() throws RecognitionException {
        HPRIMSParser.final_ORU_return retval = new HPRIMSParser.final_ORU_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1473:10: ( CHARO CHARR CHARU )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1473:12: CHARO CHARR CHARU
            {
            match(input,CHARO,FOLLOW_CHARO_in_final_ORU8280); 

            match(input,CHARR,FOLLOW_CHARR_in_final_ORU8282); 

            match(input,CHARU,FOLLOW_CHARU_in_final_ORU8284); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_ORU"


    public static class final_ORM_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_ORM"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1474:1: final_ORM : CHARO CHARR CHARM ;
    public final HPRIMSParser.final_ORM_return final_ORM() throws RecognitionException {
        HPRIMSParser.final_ORM_return retval = new HPRIMSParser.final_ORM_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1474:10: ( CHARO CHARR CHARM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1474:12: CHARO CHARR CHARM
            {
            match(input,CHARO,FOLLOW_CHARO_in_final_ORM8292); 

            match(input,CHARR,FOLLOW_CHARR_in_final_ORM8294); 

            match(input,CHARM,FOLLOW_CHARM_in_final_ORM8296); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_ORM"


    public static class final_FAC_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_FAC"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1475:1: final_FAC : CHARF CHARA CHARC ;
    public final HPRIMSParser.final_FAC_return final_FAC() throws RecognitionException {
        HPRIMSParser.final_FAC_return retval = new HPRIMSParser.final_FAC_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1475:10: ( CHARF CHARA CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1475:12: CHARF CHARA CHARC
            {
            match(input,CHARF,FOLLOW_CHARF_in_final_FAC8304); 

            match(input,CHARA,FOLLOW_CHARA_in_final_FAC8306); 

            match(input,CHARC,FOLLOW_CHARC_in_final_FAC8308); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_FAC"


    public static class final_REG_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_REG"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1476:1: final_REG : CHARR CHARE CHARG ;
    public final HPRIMSParser.final_REG_return final_REG() throws RecognitionException {
        HPRIMSParser.final_REG_return retval = new HPRIMSParser.final_REG_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1476:10: ( CHARR CHARE CHARG )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1476:12: CHARR CHARE CHARG
            {
            match(input,CHARR,FOLLOW_CHARR_in_final_REG8316); 

            match(input,CHARE,FOLLOW_CHARE_in_final_REG8318); 

            match(input,CHARG,FOLLOW_CHARG_in_final_REG8320); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_REG"


    public static class final_CART_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_CART"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1478:1: final_CART : CHARC CHARA CHARR CHART ;
    public final HPRIMSParser.final_CART_return final_CART() throws RecognitionException {
        HPRIMSParser.final_CART_return retval = new HPRIMSParser.final_CART_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1478:11: ( CHARC CHARA CHARR CHART )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1478:13: CHARC CHARA CHARR CHART
            {
            match(input,CHARC,FOLLOW_CHARC_in_final_CART8329); 

            match(input,CHARA,FOLLOW_CHARA_in_final_CART8331); 

            match(input,CHARR,FOLLOW_CHARR_in_final_CART8333); 

            match(input,CHART,FOLLOW_CHART_in_final_CART8335); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_CART"


    public static class final_PORT_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_PORT"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1479:1: final_PORT : CHARP CHARO CHARR CHART ;
    public final HPRIMSParser.final_PORT_return final_PORT() throws RecognitionException {
        HPRIMSParser.final_PORT_return retval = new HPRIMSParser.final_PORT_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1479:11: ( CHARP CHARO CHARR CHART )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1479:13: CHARP CHARO CHARR CHART
            {
            match(input,CHARP,FOLLOW_CHARP_in_final_PORT8343); 

            match(input,CHARO,FOLLOW_CHARO_in_final_PORT8345); 

            match(input,CHARR,FOLLOW_CHARR_in_final_PORT8347); 

            match(input,CHART,FOLLOW_CHART_in_final_PORT8349); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_PORT"


    public static class final_WHLC_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_WHLC"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1480:1: final_WHLC : CHARW CHARH CHARL CHARC ;
    public final HPRIMSParser.final_WHLC_return final_WHLC() throws RecognitionException {
        HPRIMSParser.final_WHLC_return retval = new HPRIMSParser.final_WHLC_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1480:11: ( CHARW CHARH CHARL CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1480:13: CHARW CHARH CHARL CHARC
            {
            match(input,CHARW,FOLLOW_CHARW_in_final_WHLC8357); 

            match(input,CHARH,FOLLOW_CHARH_in_final_WHLC8359); 

            match(input,CHARL,FOLLOW_CHARL_in_final_WHLC8361); 

            match(input,CHARC,FOLLOW_CHARC_in_final_WHLC8363); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_WHLC"


    public static class final_WALK_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_WALK"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1481:1: final_WALK : CHARW CHARA CHARL CHARK ;
    public final HPRIMSParser.final_WALK_return final_WALK() throws RecognitionException {
        HPRIMSParser.final_WALK_return retval = new HPRIMSParser.final_WALK_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1481:11: ( CHARW CHARA CHARL CHARK )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1481:13: CHARW CHARA CHARL CHARK
            {
            match(input,CHARW,FOLLOW_CHARW_in_final_WALK8371); 

            match(input,CHARA,FOLLOW_CHARA_in_final_WALK8373); 

            match(input,CHARL,FOLLOW_CHARL_in_final_WALK8375); 

            match(input,CHARK,FOLLOW_CHARK_in_final_WALK8377); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_WALK"


    public static class final_LL_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_LL"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1483:1: final_LL : CHARL CHARL ;
    public final HPRIMSParser.final_LL_return final_LL() throws RecognitionException {
        HPRIMSParser.final_LL_return retval = new HPRIMSParser.final_LL_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1483:9: ( CHARL CHARL )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1483:11: CHARL CHARL
            {
            match(input,CHARL,FOLLOW_CHARL_in_final_LL8386); 

            match(input,CHARL,FOLLOW_CHARL_in_final_LL8388); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_LL"


    public static class final_AA_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_AA"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1484:1: final_AA : CHARA CHARA ;
    public final HPRIMSParser.final_AA_return final_AA() throws RecognitionException {
        HPRIMSParser.final_AA_return retval = new HPRIMSParser.final_AA_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1484:9: ( CHARA CHARA )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1484:11: CHARA CHARA
            {
            match(input,CHARA,FOLLOW_CHARA_in_final_AA8396); 

            match(input,CHARA,FOLLOW_CHARA_in_final_AA8398); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_AA"


    public static class final_HH_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_HH"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1485:1: final_HH : CHARH CHARH ;
    public final HPRIMSParser.final_HH_return final_HH() throws RecognitionException {
        HPRIMSParser.final_HH_return retval = new HPRIMSParser.final_HH_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1485:9: ( CHARH CHARH )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1485:11: CHARH CHARH
            {
            match(input,CHARH,FOLLOW_CHARH_in_final_HH8406); 

            match(input,CHARH,FOLLOW_CHARH_in_final_HH8408); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_HH"


    public static class final_MS_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_MS"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1486:1: final_MS : CHARM CHARS ;
    public final HPRIMSParser.final_MS_return final_MS() throws RecognitionException {
        HPRIMSParser.final_MS_return retval = new HPRIMSParser.final_MS_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1486:9: ( CHARM CHARS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1486:11: CHARM CHARS
            {
            match(input,CHARM,FOLLOW_CHARM_in_final_MS8416); 

            match(input,CHARS,FOLLOW_CHARS_in_final_MS8418); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_MS"


    public static class final_VS_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_VS"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1487:1: final_VS : CHARV CHARS ;
    public final HPRIMSParser.final_VS_return final_VS() throws RecognitionException {
        HPRIMSParser.final_VS_return retval = new HPRIMSParser.final_VS_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1487:9: ( CHARV CHARS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1487:11: CHARV CHARS
            {
            match(input,CHARV,FOLLOW_CHARV_in_final_VS8426); 

            match(input,CHARS,FOLLOW_CHARS_in_final_VS8428); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_VS"


    public static class final_Null_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_Null"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1488:1: final_Null : CHARN CHARu CHARl CHARl ;
    public final HPRIMSParser.final_Null_return final_Null() throws RecognitionException {
        HPRIMSParser.final_Null_return retval = new HPRIMSParser.final_Null_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1488:11: ( CHARN CHARu CHARl CHARl )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1488:13: CHARN CHARu CHARl CHARl
            {
            match(input,CHARN,FOLLOW_CHARN_in_final_Null8436); 

            match(input,CHARu,FOLLOW_CHARu_in_final_Null8438); 

            match(input,CHARl,FOLLOW_CHARl_in_final_Null8440); 

            match(input,CHARl,FOLLOW_CHARl_in_final_Null8442); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_Null"


    public static class final_symbol_inf_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_symbol_inf"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1489:1: final_symbol_inf : CHAR_SYMBOL_INF ;
    public final HPRIMSParser.final_symbol_inf_return final_symbol_inf() throws RecognitionException {
        HPRIMSParser.final_symbol_inf_return retval = new HPRIMSParser.final_symbol_inf_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1489:17: ( CHAR_SYMBOL_INF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1489:19: CHAR_SYMBOL_INF
            {
            match(input,CHAR_SYMBOL_INF,FOLLOW_CHAR_SYMBOL_INF_in_final_symbol_inf8450); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_symbol_inf"


    public static class final_symbol_sup_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_symbol_sup"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1490:1: final_symbol_sup : CHAR_SYMBOL_SUP ;
    public final HPRIMSParser.final_symbol_sup_return final_symbol_sup() throws RecognitionException {
        HPRIMSParser.final_symbol_sup_return retval = new HPRIMSParser.final_symbol_sup_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1490:17: ( CHAR_SYMBOL_SUP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1490:19: CHAR_SYMBOL_SUP
            {
            match(input,CHAR_SYMBOL_SUP,FOLLOW_CHAR_SYMBOL_SUP_in_final_symbol_sup8458); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_symbol_sup"


    public static class final_symbol_plus_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_symbol_plus"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1491:1: final_symbol_plus : PLUS ;
    public final HPRIMSParser.final_symbol_plus_return final_symbol_plus() throws RecognitionException {
        HPRIMSParser.final_symbol_plus_return retval = new HPRIMSParser.final_symbol_plus_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1491:18: ( PLUS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1491:20: PLUS
            {
            match(input,PLUS,FOLLOW_PLUS_in_final_symbol_plus8466); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_symbol_plus"


    public static class final_symbol_moins_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_symbol_moins"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1492:1: final_symbol_moins : MOINS ;
    public final HPRIMSParser.final_symbol_moins_return final_symbol_moins() throws RecognitionException {
        HPRIMSParser.final_symbol_moins_return retval = new HPRIMSParser.final_symbol_moins_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1492:19: ( MOINS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1492:21: MOINS
            {
            match(input,MOINS,FOLLOW_MOINS_in_final_symbol_moins8474); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_symbol_moins"


    public static class final_version_2_0_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_version_2_0"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1494:1: final_version_2_0 : CHARH CHIFFRE2 POINT CHIFFRE0 ;
    public final HPRIMSParser.final_version_2_0_return final_version_2_0() throws RecognitionException {
        HPRIMSParser.final_version_2_0_return retval = new HPRIMSParser.final_version_2_0_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1494:18: ( CHARH CHIFFRE2 POINT CHIFFRE0 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1494:20: CHARH CHIFFRE2 POINT CHIFFRE0
            {
            match(input,CHARH,FOLLOW_CHARH_in_final_version_2_08483); 

            match(input,CHIFFRE2,FOLLOW_CHIFFRE2_in_final_version_2_08485); 

            match(input,POINT,FOLLOW_POINT_in_final_version_2_08487); 

            match(input,CHIFFRE0,FOLLOW_CHIFFRE0_in_final_version_2_08489); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_version_2_0"


    public static class final_version_2_1_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_version_2_1"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1495:1: final_version_2_1 : CHARH CHIFFRE2 POINT CHIFFRE1 ;
    public final HPRIMSParser.final_version_2_1_return final_version_2_1() throws RecognitionException {
        HPRIMSParser.final_version_2_1_return retval = new HPRIMSParser.final_version_2_1_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1495:18: ( CHARH CHIFFRE2 POINT CHIFFRE1 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1495:20: CHARH CHIFFRE2 POINT CHIFFRE1
            {
            match(input,CHARH,FOLLOW_CHARH_in_final_version_2_18497); 

            match(input,CHIFFRE2,FOLLOW_CHIFFRE2_in_final_version_2_18499); 

            match(input,POINT,FOLLOW_POINT_in_final_version_2_18501); 

            match(input,CHIFFRE1,FOLLOW_CHIFFRE1_in_final_version_2_18503); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_version_2_1"


    public static class final_version_2_2_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_version_2_2"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1496:1: final_version_2_2 : CHARH CHIFFRE2 POINT CHIFFRE2 ;
    public final HPRIMSParser.final_version_2_2_return final_version_2_2() throws RecognitionException {
        HPRIMSParser.final_version_2_2_return retval = new HPRIMSParser.final_version_2_2_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1496:18: ( CHARH CHIFFRE2 POINT CHIFFRE2 )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1496:20: CHARH CHIFFRE2 POINT CHIFFRE2
            {
            match(input,CHARH,FOLLOW_CHARH_in_final_version_2_28511); 

            match(input,CHIFFRE2,FOLLOW_CHIFFRE2_in_final_version_2_28513); 

            match(input,POINT,FOLLOW_POINT_in_final_version_2_28515); 

            match(input,CHIFFRE2,FOLLOW_CHIFFRE2_in_final_version_2_28517); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_version_2_2"


    public static class final_OP_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_OP"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1498:1: final_OP : CHARO CHARP ;
    public final HPRIMSParser.final_OP_return final_OP() throws RecognitionException {
        HPRIMSParser.final_OP_return retval = new HPRIMSParser.final_OP_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1498:9: ( CHARO CHARP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1498:11: CHARO CHARP
            {
            match(input,CHARO,FOLLOW_CHARO_in_final_OP8526); 

            match(input,CHARP,FOLLOW_CHARP_in_final_OP8528); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_OP"


    public static class final_IP_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_IP"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1499:1: final_IP : CHARI CHARP ;
    public final HPRIMSParser.final_IP_return final_IP() throws RecognitionException {
        HPRIMSParser.final_IP_return retval = new HPRIMSParser.final_IP_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1499:9: ( CHARI CHARP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1499:11: CHARI CHARP
            {
            match(input,CHARI,FOLLOW_CHARI_in_final_IP8536); 

            match(input,CHARP,FOLLOW_CHARP_in_final_IP8538); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_IP"


    public static class final_ER_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_ER"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1500:1: final_ER : CHARE CHARR ;
    public final HPRIMSParser.final_ER_return final_ER() throws RecognitionException {
        HPRIMSParser.final_ER_return retval = new HPRIMSParser.final_ER_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1500:9: ( CHARE CHARR )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1500:11: CHARE CHARR
            {
            match(input,CHARE,FOLLOW_CHARE_in_final_ER8546); 

            match(input,CHARR,FOLLOW_CHARR_in_final_ER8548); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_ER"


    public static class final_PA_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_PA"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1501:1: final_PA : CHARP CHARA ;
    public final HPRIMSParser.final_PA_return final_PA() throws RecognitionException {
        HPRIMSParser.final_PA_return retval = new HPRIMSParser.final_PA_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1501:9: ( CHARP CHARA )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1501:11: CHARP CHARA
            {
            match(input,CHARP,FOLLOW_CHARP_in_final_PA8556); 

            match(input,CHARA,FOLLOW_CHARA_in_final_PA8558); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_PA"


    public static class final_MP_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_MP"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1502:1: final_MP : CHARM CHARP ;
    public final HPRIMSParser.final_MP_return final_MP() throws RecognitionException {
        HPRIMSParser.final_MP_return retval = new HPRIMSParser.final_MP_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1502:9: ( CHARM CHARP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1502:11: CHARM CHARP
            {
            match(input,CHARM,FOLLOW_CHARM_in_final_MP8566); 

            match(input,CHARP,FOLLOW_CHARP_in_final_MP8568); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_MP"


    public static class final_TM_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_TM"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1503:1: final_TM : CHART CHARM ;
    public final HPRIMSParser.final_TM_return final_TM() throws RecognitionException {
        HPRIMSParser.final_TM_return retval = new HPRIMSParser.final_TM_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1503:9: ( CHART CHARM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1503:11: CHART CHARM
            {
            match(input,CHART,FOLLOW_CHART_in_final_TM8576); 

            match(input,CHARM,FOLLOW_CHARM_in_final_TM8578); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_TM"


    public static class final_TR_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_TR"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1504:1: final_TR : CHART CHARR ;
    public final HPRIMSParser.final_TR_return final_TR() throws RecognitionException {
        HPRIMSParser.final_TR_return retval = new HPRIMSParser.final_TR_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1504:9: ( CHART CHARR )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1504:11: CHART CHARR
            {
            match(input,CHART,FOLLOW_CHART_in_final_TR8586); 

            match(input,CHARR,FOLLOW_CHARR_in_final_TR8588); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_TR"


    public static class final_FR_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_FR"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1505:1: final_FR : CHARF CHARR ;
    public final HPRIMSParser.final_FR_return final_FR() throws RecognitionException {
        HPRIMSParser.final_FR_return retval = new HPRIMSParser.final_FR_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1505:9: ( CHARF CHARR )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1505:11: CHARF CHARR
            {
            match(input,CHARF,FOLLOW_CHARF_in_final_FR8596); 

            match(input,CHARR,FOLLOW_CHARR_in_final_FR8598); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_FR"


    public static class final_PF_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_PF"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1506:1: final_PF : CHARP CHARF ;
    public final HPRIMSParser.final_PF_return final_PF() throws RecognitionException {
        HPRIMSParser.final_PF_return retval = new HPRIMSParser.final_PF_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1506:9: ( CHARP CHARF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1506:11: CHARP CHARF
            {
            match(input,CHARP,FOLLOW_CHARP_in_final_PF8606); 

            match(input,CHARF,FOLLOW_CHARF_in_final_PF8608); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_PF"


    public static class final_SS_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_SS"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1507:1: final_SS : CHARS CHARS ;
    public final HPRIMSParser.final_SS_return final_SS() throws RecognitionException {
        HPRIMSParser.final_SS_return retval = new HPRIMSParser.final_SS_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1507:9: ( CHARS CHARS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1507:11: CHARS CHARS
            {
            match(input,CHARS,FOLLOW_CHARS_in_final_SS8616); 

            match(input,CHARS,FOLLOW_CHARS_in_final_SS8618); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_SS"


    public static class final_RX_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_RX"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1508:1: final_RX : CHARR CHARX ;
    public final HPRIMSParser.final_RX_return final_RX() throws RecognitionException {
        HPRIMSParser.final_RX_return retval = new HPRIMSParser.final_RX_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1508:9: ( CHARR CHARX )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1508:11: CHARR CHARX
            {
            match(input,CHARR,FOLLOW_CHARR_in_final_RX8626); 

            match(input,CHARX,FOLLOW_CHARX_in_final_RX8628); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_RX"


    public static class final_HR_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_HR"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1509:1: final_HR : CHARH CHARR ;
    public final HPRIMSParser.final_HR_return final_HR() throws RecognitionException {
        HPRIMSParser.final_HR_return retval = new HPRIMSParser.final_HR_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1509:9: ( CHARH CHARR )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1509:11: CHARH CHARR
            {
            match(input,CHARH,FOLLOW_CHARH_in_final_HR8636); 

            match(input,CHARR,FOLLOW_CHARR_in_final_HR8638); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_HR"


    public static class final_NS_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_NS"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1510:1: final_NS : CHARN CHARS ;
    public final HPRIMSParser.final_NS_return final_NS() throws RecognitionException {
        HPRIMSParser.final_NS_return retval = new HPRIMSParser.final_NS_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1510:9: ( CHARN CHARS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1510:11: CHARN CHARS
            {
            match(input,CHARN,FOLLOW_CHARN_in_final_NS8646); 

            match(input,CHARS,FOLLOW_CHARS_in_final_NS8648); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_NS"


    public static class final_charA_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charA"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1512:1: final_charA : CHARA ;
    public final HPRIMSParser.final_charA_return final_charA() throws RecognitionException {
        HPRIMSParser.final_charA_return retval = new HPRIMSParser.final_charA_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1512:12: ( CHARA )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1512:14: CHARA
            {
            match(input,CHARA,FOLLOW_CHARA_in_final_charA8657); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charA"


    public static class final_charB_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charB"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1513:1: final_charB : CHARB ;
    public final HPRIMSParser.final_charB_return final_charB() throws RecognitionException {
        HPRIMSParser.final_charB_return retval = new HPRIMSParser.final_charB_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1513:12: ( CHARB )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1513:14: CHARB
            {
            match(input,CHARB,FOLLOW_CHARB_in_final_charB8665); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charB"


    public static class final_charC_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charC"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1514:1: final_charC : CHARC ;
    public final HPRIMSParser.final_charC_return final_charC() throws RecognitionException {
        HPRIMSParser.final_charC_return retval = new HPRIMSParser.final_charC_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1514:12: ( CHARC )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1514:14: CHARC
            {
            match(input,CHARC,FOLLOW_CHARC_in_final_charC8673); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charC"


    public static class final_charD_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charD"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1515:1: final_charD : CHARD ;
    public final HPRIMSParser.final_charD_return final_charD() throws RecognitionException {
        HPRIMSParser.final_charD_return retval = new HPRIMSParser.final_charD_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1515:12: ( CHARD )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1515:14: CHARD
            {
            match(input,CHARD,FOLLOW_CHARD_in_final_charD8681); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charD"


    public static class final_charF_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charF"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1516:1: final_charF : CHARF ;
    public final HPRIMSParser.final_charF_return final_charF() throws RecognitionException {
        HPRIMSParser.final_charF_return retval = new HPRIMSParser.final_charF_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1516:12: ( CHARF )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1516:14: CHARF
            {
            match(input,CHARF,FOLLOW_CHARF_in_final_charF8689); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charF"


    public static class final_charH_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charH"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1517:1: final_charH : CHARH ;
    public final HPRIMSParser.final_charH_return final_charH() throws RecognitionException {
        HPRIMSParser.final_charH_return retval = new HPRIMSParser.final_charH_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1517:12: ( CHARH )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1517:14: CHARH
            {
            match(input,CHARH,FOLLOW_CHARH_in_final_charH8697); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charH"


    public static class final_charI_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charI"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1518:1: final_charI : CHARI ;
    public final HPRIMSParser.final_charI_return final_charI() throws RecognitionException {
        HPRIMSParser.final_charI_return retval = new HPRIMSParser.final_charI_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1518:12: ( CHARI )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1518:14: CHARI
            {
            match(input,CHARI,FOLLOW_CHARI_in_final_charI8705); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charI"


    public static class final_charL_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charL"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1519:1: final_charL : CHARL ;
    public final HPRIMSParser.final_charL_return final_charL() throws RecognitionException {
        HPRIMSParser.final_charL_return retval = new HPRIMSParser.final_charL_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1519:12: ( CHARL )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1519:14: CHARL
            {
            match(input,CHARL,FOLLOW_CHARL_in_final_charL8713); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charL"


    public static class final_charM_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charM"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1520:1: final_charM : CHARM ;
    public final HPRIMSParser.final_charM_return final_charM() throws RecognitionException {
        HPRIMSParser.final_charM_return retval = new HPRIMSParser.final_charM_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1520:12: ( CHARM )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1520:14: CHARM
            {
            match(input,CHARM,FOLLOW_CHARM_in_final_charM8721); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charM"


    public static class final_charN_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charN"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1521:1: final_charN : CHARN ;
    public final HPRIMSParser.final_charN_return final_charN() throws RecognitionException {
        HPRIMSParser.final_charN_return retval = new HPRIMSParser.final_charN_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1521:12: ( CHARN )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1521:14: CHARN
            {
            match(input,CHARN,FOLLOW_CHARN_in_final_charN8729); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charN"


    public static class final_charO_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charO"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1522:1: final_charO : CHARO ;
    public final HPRIMSParser.final_charO_return final_charO() throws RecognitionException {
        HPRIMSParser.final_charO_return retval = new HPRIMSParser.final_charO_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1522:12: ( CHARO )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1522:14: CHARO
            {
            match(input,CHARO,FOLLOW_CHARO_in_final_charO8737); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charO"


    public static class final_charP_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charP"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1523:1: final_charP : CHARP ;
    public final HPRIMSParser.final_charP_return final_charP() throws RecognitionException {
        HPRIMSParser.final_charP_return retval = new HPRIMSParser.final_charP_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1523:12: ( CHARP )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1523:14: CHARP
            {
            match(input,CHARP,FOLLOW_CHARP_in_final_charP8745); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charP"


    public static class final_charR_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charR"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1524:1: final_charR : CHARR ;
    public final HPRIMSParser.final_charR_return final_charR() throws RecognitionException {
        HPRIMSParser.final_charR_return retval = new HPRIMSParser.final_charR_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1524:12: ( CHARR )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1524:14: CHARR
            {
            match(input,CHARR,FOLLOW_CHARR_in_final_charR8753); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charR"


    public static class final_charS_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charS"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1525:1: final_charS : CHARS ;
    public final HPRIMSParser.final_charS_return final_charS() throws RecognitionException {
        HPRIMSParser.final_charS_return retval = new HPRIMSParser.final_charS_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1525:12: ( CHARS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1525:14: CHARS
            {
            match(input,CHARS,FOLLOW_CHARS_in_final_charS8761); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charS"


    public static class final_charT_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charT"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1526:1: final_charT : CHART ;
    public final HPRIMSParser.final_charT_return final_charT() throws RecognitionException {
        HPRIMSParser.final_charT_return retval = new HPRIMSParser.final_charT_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1526:12: ( CHART )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1526:14: CHART
            {
            match(input,CHART,FOLLOW_CHART_in_final_charT8769); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charT"


    public static class final_charU_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charU"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1527:1: final_charU : CHARU ;
    public final HPRIMSParser.final_charU_return final_charU() throws RecognitionException {
        HPRIMSParser.final_charU_return retval = new HPRIMSParser.final_charU_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1527:12: ( CHARU )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1527:14: CHARU
            {
            match(input,CHARU,FOLLOW_CHARU_in_final_charU8777); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charU"


    public static class final_charW_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charW"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1528:1: final_charW : CHARW ;
    public final HPRIMSParser.final_charW_return final_charW() throws RecognitionException {
        HPRIMSParser.final_charW_return retval = new HPRIMSParser.final_charW_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1528:12: ( CHARW )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1528:14: CHARW
            {
            match(input,CHARW,FOLLOW_CHARW_in_final_charW8785); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charW"


    public static class final_charX_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "final_charX"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1529:1: final_charX : CHARX ;
    public final HPRIMSParser.final_charX_return final_charX() throws RecognitionException {
        HPRIMSParser.final_charX_return retval = new HPRIMSParser.final_charX_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1529:12: ( CHARX )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1529:14: CHARX
            {
            match(input,CHARX,FOLLOW_CHARX_in_final_charX8793); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_charX"


    public static class delimiters_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "delimiters"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1532:1: delimiters : DELIMITERS ;
    public final HPRIMSParser.delimiters_return delimiters() throws RecognitionException {
        HPRIMSParser.delimiters_return retval = new HPRIMSParser.delimiters_return();
        retval.start = input.LT(1);


        startElement("H.2");
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1534:22: ( DELIMITERS )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1535:3: DELIMITERS
            {
            match(input,DELIMITERS,FOLLOW_DELIMITERS_in_delimiters8814); 

            content(input.toString(retval.start,input.LT(-1)));

            }

            retval.stop = input.LT(-1);


            endElement();
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delimiters"


    public static class character_return extends ParserRuleReturnScope {
    };


    // $ANTLR start "character"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1540:1: character : ( lettre | chiffre ) ;
    public final HPRIMSParser.character_return character() throws RecognitionException {
        HPRIMSParser.character_return retval = new HPRIMSParser.character_return();
        retval.start = input.LT(1);


        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1540:10: ( ( lettre | chiffre ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1541:3: ( lettre | chiffre )
            {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1541:3: ( lettre | chiffre )
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( ((LA320_0 >= CHARA && LA320_0 <= CHARu)||(LA320_0 >= LETTRE && LA320_0 <= POINT)) ) {
                alt320=1;
            }
            else if ( ((LA320_0 >= CHIFFRE0 && LA320_0 <= CHIFFRE9)) ) {
                alt320=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;

            }
            switch (alt320) {
                case 1 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1541:4: lettre
                    {
                    pushFollow(FOLLOW_lettre_in_character8830);
                    lettre();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1541:13: chiffre
                    {
                    pushFollow(FOLLOW_chiffre_in_character8834);
                    chiffre();

                    state._fsp--;


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "character"



    // $ANTLR start "chiffre"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1543:1: chiffre : ( CHIFFRE0 | CHIFFRE1 | CHIFFRE2 | CHIFFRE3 | CHIFFRE4 | CHIFFRE5 | CHIFFRE6 | CHIFFRE7 | CHIFFRE8 | CHIFFRE9 ) ;
    public final void chiffre() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1543:8: ( ( CHIFFRE0 | CHIFFRE1 | CHIFFRE2 | CHIFFRE3 | CHIFFRE4 | CHIFFRE5 | CHIFFRE6 | CHIFFRE7 | CHIFFRE8 | CHIFFRE9 ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:
            {
            if ( (input.LA(1) >= CHIFFRE0 && input.LA(1) <= CHIFFRE9) ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "chiffre"



    // $ANTLR start "lettre"
    // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1547:1: lettre : ~ ( CHIFFRE0 | CHIFFRE1 | CHIFFRE2 | CHIFFRE3 | CHIFFRE4 | CHIFFRE5 | CHIFFRE6 | CHIFFRE7 | CHIFFRE8 | CHIFFRE9 | CR | TOKENMISMATCH | DELIMITER1 | DELIMITER2 | DELIMITER3 | DELIMITERS | REPETITEUR ) ;
    public final void lettre() throws RecognitionException {
        try {
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:1547:7: (~ ( CHIFFRE0 | CHIFFRE1 | CHIFFRE2 | CHIFFRE3 | CHIFFRE4 | CHIFFRE5 | CHIFFRE6 | CHIFFRE7 | CHIFFRE8 | CHIFFRE9 | CR | TOKENMISMATCH | DELIMITER1 | DELIMITER2 | DELIMITER3 | DELIMITERS | REPETITEUR ) )
            // C:\\Users\\delabre\\git\\libHprim\\target\\classes\\com\\github\\aiderpmsi\\hprim\\parser\\antlr\\HPRIMS.g:
            {
            if ( (input.LA(1) >= CHARA && input.LA(1) <= CHARu)||(input.LA(1) >= LETTRE && input.LA(1) <= POINT) ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "lettre"

    // Delegated rules


    protected DFA1 dfa1 = new DFA1(this);
    static final String DFA1_eotS =
        "\u00dd\uffff";
    static final String DFA1_eofS =
        "\u00dd\uffff";
    static final String DFA1_minS =
        "\1\54\1\51\24\4\1\23\1\7\1\4\1\10\4\4\1\17\1\6\1\12\3\4\6\51\147"+
        "\4\1\7\2\4\1\7\2\4\1\7\2\4\1\7\2\4\1\7\2\4\1\7\22\51\6\13\6\40\6"+
        "\60\6\36\22\uffff";
    static final String DFA1_maxS =
        "\1\54\1\51\20\60\1\23\3\60\1\23\1\7\1\4\1\10\3\60\1\26\1\17\1\6"+
        "\1\12\3\60\6\51\3\60\6\61\2\60\2\61\2\60\2\61\2\60\2\61\2\60\2\61"+
        "\2\60\2\61\2\60\2\61\106\60\1\25\2\60\1\25\2\60\1\25\2\60\1\25\2"+
        "\60\1\25\2\60\1\25\22\51\6\13\6\40\6\60\6\40\22\uffff";
    static final String DFA1_acceptS =
        "\u00cb\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22";
    static final String DFA1_specialS =
        "\u00dd\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\2",
            "\32\3\12\4\1\uffff\1\5\3\uffff\4\3",
            "\32\3\12\4\1\uffff\1\5\3\uffff\4\3",
            "\32\3\12\4\1\uffff\1\5\3\uffff\4\3",
            "\32\6\12\7\1\uffff\1\10\3\uffff\4\6",
            "\32\6\12\7\1\uffff\1\10\3\uffff\4\6",
            "\32\6\12\7\1\uffff\1\10\3\uffff\4\6",
            "\32\11\12\12\5\uffff\4\11",
            "\32\11\12\12\2\uffff\1\13\2\uffff\4\11",
            "\32\11\12\12\2\uffff\1\13\2\uffff\4\11",
            "\32\14\12\15\5\uffff\4\14",
            "\32\14\12\15\1\uffff\1\16\3\uffff\4\14",
            "\32\14\12\15\1\uffff\1\16\3\uffff\4\14",
            "\32\17\12\20\1\uffff\1\22\1\21\2\uffff\4\17",
            "\32\17\12\20\1\uffff\1\22\1\21\2\uffff\4\17",
            "\32\17\12\20\1\uffff\1\22\1\21\2\uffff\4\17",
            "\32\23\12\24\1\uffff\1\22\1\25\2\uffff\4\23",
            "\1\27\4\uffff\1\30\7\uffff\1\26\1\uffff\1\31",
            "\32\23\12\24\1\uffff\1\22\1\25\2\uffff\4\23",
            "\32\23\12\24\1\uffff\1\22\1\25\2\uffff\4\23",
            "\32\32\12\33\1\uffff\1\22\1\34\2\uffff\4\32",
            "\1\35",
            "\1\36",
            "\1\37",
            "\1\40",
            "\32\32\12\33\1\uffff\1\22\1\34\2\uffff\4\32",
            "\32\32\12\33\1\uffff\1\22\1\34\2\uffff\4\32",
            "\32\41\12\42\1\uffff\1\22\1\43\2\uffff\4\41",
            "\1\46\12\uffff\1\45\6\uffff\1\44",
            "\1\47",
            "\1\50",
            "\1\51",
            "\32\41\12\42\1\uffff\1\22\1\43\2\uffff\4\41",
            "\32\41\12\42\1\uffff\1\22\1\43\2\uffff\4\41",
            "\32\52\12\53\1\uffff\1\22\1\54\2\uffff\4\52",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\32\52\12\53\1\uffff\1\22\1\54\2\uffff\4\52",
            "\32\52\12\53\1\uffff\1\22\1\54\2\uffff\4\52",
            "\32\63\12\64\1\uffff\1\22\3\uffff\4\63",
            "\32\65\12\66\1\uffff\1\70\3\uffff\4\65\1\67",
            "\32\71\12\72\1\uffff\1\74\3\uffff\4\71\1\73",
            "\32\75\12\76\1\uffff\1\100\3\uffff\4\75\1\77",
            "\32\101\12\102\1\uffff\1\104\3\uffff\4\101\1\103",
            "\32\105\12\106\1\uffff\1\110\3\uffff\4\105\1\107",
            "\32\111\12\112\1\uffff\1\114\3\uffff\4\111\1\113",
            "\32\63\12\64\1\uffff\1\22\3\uffff\4\63",
            "\32\63\12\64\1\uffff\1\22\3\uffff\4\63",
            "\32\65\12\66\1\uffff\1\70\3\uffff\4\65\1\67",
            "\32\65\12\66\1\uffff\1\70\3\uffff\4\65\1\67",
            "\32\115\12\116\1\uffff\1\70\3\uffff\4\115",
            "\32\117\12\120\1\uffff\1\121\3\uffff\4\117",
            "\32\71\12\72\1\uffff\1\74\3\uffff\4\71\1\73",
            "\32\71\12\72\1\uffff\1\74\3\uffff\4\71\1\73",
            "\32\122\12\123\1\uffff\1\74\3\uffff\4\122",
            "\32\124\12\125\1\uffff\1\126\3\uffff\4\124",
            "\32\75\12\76\1\uffff\1\100\3\uffff\4\75\1\77",
            "\32\75\12\76\1\uffff\1\100\3\uffff\4\75\1\77",
            "\32\127\12\130\1\uffff\1\100\3\uffff\4\127",
            "\32\131\12\132\1\uffff\1\133\3\uffff\4\131",
            "\32\101\12\102\1\uffff\1\104\3\uffff\4\101\1\103",
            "\32\101\12\102\1\uffff\1\104\3\uffff\4\101\1\103",
            "\32\134\12\135\1\uffff\1\104\3\uffff\4\134",
            "\32\136\12\137\1\uffff\1\140\3\uffff\4\136",
            "\32\105\12\106\1\uffff\1\110\3\uffff\4\105\1\107",
            "\32\105\12\106\1\uffff\1\110\3\uffff\4\105\1\107",
            "\32\141\12\142\1\uffff\1\110\3\uffff\4\141",
            "\32\143\12\144\1\uffff\1\145\3\uffff\4\143",
            "\32\111\12\112\1\uffff\1\114\3\uffff\4\111\1\113",
            "\32\111\12\112\1\uffff\1\114\3\uffff\4\111\1\113",
            "\32\146\12\147\1\uffff\1\114\3\uffff\4\146",
            "\32\150\12\151\1\uffff\1\152\3\uffff\4\150",
            "\32\115\12\116\1\uffff\1\70\3\uffff\4\115",
            "\32\115\12\116\1\uffff\1\70\3\uffff\4\115",
            "\32\117\12\120\1\uffff\1\121\3\uffff\4\117",
            "\32\117\12\120\1\uffff\1\121\3\uffff\4\117",
            "\32\153\12\154\5\uffff\4\153",
            "\32\122\12\123\1\uffff\1\74\3\uffff\4\122",
            "\32\122\12\123\1\uffff\1\74\3\uffff\4\122",
            "\32\124\12\125\1\uffff\1\126\3\uffff\4\124",
            "\32\124\12\125\1\uffff\1\126\3\uffff\4\124",
            "\32\155\12\156\5\uffff\4\155",
            "\32\127\12\130\1\uffff\1\100\3\uffff\4\127",
            "\32\127\12\130\1\uffff\1\100\3\uffff\4\127",
            "\32\131\12\132\1\uffff\1\133\3\uffff\4\131",
            "\32\131\12\132\1\uffff\1\133\3\uffff\4\131",
            "\32\157\12\160\5\uffff\4\157",
            "\32\134\12\135\1\uffff\1\104\3\uffff\4\134",
            "\32\134\12\135\1\uffff\1\104\3\uffff\4\134",
            "\32\136\12\137\1\uffff\1\140\3\uffff\4\136",
            "\32\136\12\137\1\uffff\1\140\3\uffff\4\136",
            "\32\161\12\162\5\uffff\4\161",
            "\32\141\12\142\1\uffff\1\110\3\uffff\4\141",
            "\32\141\12\142\1\uffff\1\110\3\uffff\4\141",
            "\32\143\12\144\1\uffff\1\145\3\uffff\4\143",
            "\32\143\12\144\1\uffff\1\145\3\uffff\4\143",
            "\32\163\12\164\5\uffff\4\163",
            "\32\146\12\147\1\uffff\1\114\3\uffff\4\146",
            "\32\146\12\147\1\uffff\1\114\3\uffff\4\146",
            "\32\150\12\151\1\uffff\1\152\3\uffff\4\150",
            "\32\150\12\151\1\uffff\1\152\3\uffff\4\150",
            "\32\165\12\166\5\uffff\4\165",
            "\32\153\12\154\2\uffff\1\167\2\uffff\4\153",
            "\32\153\12\154\2\uffff\1\167\2\uffff\4\153",
            "\32\155\12\156\2\uffff\1\170\2\uffff\4\155",
            "\32\155\12\156\2\uffff\1\170\2\uffff\4\155",
            "\32\157\12\160\2\uffff\1\171\2\uffff\4\157",
            "\32\157\12\160\2\uffff\1\171\2\uffff\4\157",
            "\32\161\12\162\2\uffff\1\172\2\uffff\4\161",
            "\32\161\12\162\2\uffff\1\172\2\uffff\4\161",
            "\32\163\12\164\2\uffff\1\173\2\uffff\4\163",
            "\32\163\12\164\2\uffff\1\173\2\uffff\4\163",
            "\32\165\12\166\2\uffff\1\174\2\uffff\4\165",
            "\32\165\12\166\2\uffff\1\174\2\uffff\4\165",
            "\32\175\12\176\5\uffff\4\175",
            "\32\177\12\u0080\5\uffff\4\177",
            "\32\u0081\12\u0082\5\uffff\4\u0081",
            "\32\u0083\12\u0084\5\uffff\4\u0083",
            "\32\u0085\12\u0086\5\uffff\4\u0085",
            "\32\u0087\12\u0088\5\uffff\4\u0087",
            "\32\175\12\176\1\uffff\1\u0089\3\uffff\4\175",
            "\32\175\12\176\1\uffff\1\u0089\3\uffff\4\175",
            "\32\177\12\u0080\1\uffff\1\u008a\3\uffff\4\177",
            "\32\177\12\u0080\1\uffff\1\u008a\3\uffff\4\177",
            "\32\u0081\12\u0082\1\uffff\1\u008b\3\uffff\4\u0081",
            "\32\u0081\12\u0082\1\uffff\1\u008b\3\uffff\4\u0081",
            "\32\u0083\12\u0084\1\uffff\1\u008c\3\uffff\4\u0083",
            "\32\u0083\12\u0084\1\uffff\1\u008c\3\uffff\4\u0083",
            "\32\u0085\12\u0086\1\uffff\1\u008d\3\uffff\4\u0085",
            "\32\u0085\12\u0086\1\uffff\1\u008d\3\uffff\4\u0085",
            "\32\u0087\12\u0088\1\uffff\1\u008e\3\uffff\4\u0087",
            "\32\u0087\12\u0088\1\uffff\1\u008e\3\uffff\4\u0087",
            "\32\u008f\12\u0090\1\uffff\1\u0091\3\uffff\4\u008f",
            "\32\u0092\12\u0093\1\uffff\1\u0094\3\uffff\4\u0092",
            "\32\u0095\12\u0096\1\uffff\1\u0097\3\uffff\4\u0095",
            "\32\u0098\12\u0099\1\uffff\1\u009a\3\uffff\4\u0098",
            "\32\u009b\12\u009c\1\uffff\1\u009d\3\uffff\4\u009b",
            "\32\u009e\12\u009f\1\uffff\1\u00a0\3\uffff\4\u009e",
            "\32\u008f\12\u0090\1\uffff\1\u0091\3\uffff\4\u008f",
            "\32\u008f\12\u0090\1\uffff\1\u0091\3\uffff\4\u008f",
            "\1\u00a2\12\uffff\1\u00a1\2\uffff\1\u00a3",
            "\32\u0092\12\u0093\1\uffff\1\u0094\3\uffff\4\u0092",
            "\32\u0092\12\u0093\1\uffff\1\u0094\3\uffff\4\u0092",
            "\1\u00a5\12\uffff\1\u00a4\2\uffff\1\u00a6",
            "\32\u0095\12\u0096\1\uffff\1\u0097\3\uffff\4\u0095",
            "\32\u0095\12\u0096\1\uffff\1\u0097\3\uffff\4\u0095",
            "\1\u00a8\12\uffff\1\u00a7\2\uffff\1\u00a9",
            "\32\u0098\12\u0099\1\uffff\1\u009a\3\uffff\4\u0098",
            "\32\u0098\12\u0099\1\uffff\1\u009a\3\uffff\4\u0098",
            "\1\u00ab\12\uffff\1\u00aa\2\uffff\1\u00ac",
            "\32\u009b\12\u009c\1\uffff\1\u009d\3\uffff\4\u009b",
            "\32\u009b\12\u009c\1\uffff\1\u009d\3\uffff\4\u009b",
            "\1\u00ae\12\uffff\1\u00ad\2\uffff\1\u00af",
            "\32\u009e\12\u009f\1\uffff\1\u00a0\3\uffff\4\u009e",
            "\32\u009e\12\u009f\1\uffff\1\u00a0\3\uffff\4\u009e",
            "\1\u00b1\12\uffff\1\u00b0\2\uffff\1\u00b2",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b4",
            "\1\u00b4",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b5",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00b6",
            "\1\u00b6",
            "\1\u00b7",
            "\1\u00b7",
            "\1\u00b7",
            "\1\u00b8",
            "\1\u00b8",
            "\1\u00b8",
            "\1\u00b9",
            "\1\u00ba",
            "\1\u00bb",
            "\1\u00bc",
            "\1\u00bd",
            "\1\u00be",
            "\1\u00bf",
            "\1\u00c0",
            "\1\u00c1",
            "\1\u00c2",
            "\1\u00c3",
            "\1\u00c4",
            "\1\u00c5",
            "\1\u00c6",
            "\1\u00c7",
            "\1\u00c8",
            "\1\u00c9",
            "\1\u00ca",
            "\1\u00cd\1\u00cc\1\u00cb",
            "\1\u00d0\1\u00cf\1\u00ce",
            "\1\u00d3\1\u00d2\1\u00d1",
            "\1\u00d6\1\u00d5\1\u00d4",
            "\1\u00d9\1\u00d8\1\u00d7",
            "\1\u00dc\1\u00db\1\u00da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "205:1: hprim : ( hprim_oru_2_2 | hprim_oru_2_1 | hprim_oru_2_0 | hprim_orm_2_2 | hprim_orm_2_1 | hprim_orm_2_0 | hprim_ora_2_2 | hprim_ora_2_1 | hprim_ora_2_0 | hprim_adm_2_2 | hprim_adm_2_1 | hprim_adm_2_0 | hprim_fac_2_2 | hprim_fac_2_1 | hprim_fac_2_0 | hprim_reg_2_2 | hprim_reg_2_1 | hprim_reg_2_0 );";
        }
    }
 

    public static final BitSet FOLLOW_hprim_oru_2_2_in_hprim68 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_oru_2_1_in_hprim72 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_oru_2_0_in_hprim76 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_orm_2_2_in_hprim82 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_orm_2_1_in_hprim86 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_orm_2_0_in_hprim90 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_ora_2_2_in_hprim96 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_ora_2_1_in_hprim100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_ora_2_0_in_hprim104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_adm_2_2_in_hprim110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_adm_2_1_in_hprim114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_adm_2_0_in_hprim118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_fac_2_2_in_hprim123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_fac_2_1_in_hprim127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_fac_2_0_in_hprim131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_reg_2_2_in_hprim136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_reg_2_1_in_hprim140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hprim_reg_2_0_in_hprim144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_oru_in_hprim_oru_2_2162 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_oru_in_hprim_oru_2_2166 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_oru_2_2171 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_oru_2_2175 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_oru_2_2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_oru_in_hprim_oru_2_1197 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_oru_in_hprim_oru_2_1201 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_oru_2_1206 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_oru_2_1210 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_oru_2_1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_oru_in_hprim_oru_2_0232 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_oru_in_hprim_oru_2_0236 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_oru_2_0241 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_oru_2_0245 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_oru_2_0250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_ora_in_hprim_ora_2_2268 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_ora_in_hprim_ora_2_2272 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_ora_2_2277 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_ora_2_2281 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_ora_2_2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_ora_in_hprim_ora_2_1303 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_ora_in_hprim_ora_2_1307 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_ora_2_1312 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_ora_2_1316 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_ora_2_1321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_ora_in_hprim_ora_2_0338 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_ora_in_hprim_ora_2_0342 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_ora_2_0347 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_ora_2_0351 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_ora_2_0356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_orm_in_hprim_orm_2_2374 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_orm_in_hprim_orm_2_2378 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_orm_2_2383 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_orm_2_2387 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_orm_2_2392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_orm_in_hprim_orm_2_1409 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_orm_in_hprim_orm_2_1413 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_orm_2_1418 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_orm_2_1422 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_orm_2_1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_orm_in_hprim_orm_2_0444 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_orm_in_hprim_orm_2_0448 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_orm_2_0453 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_orm_2_0457 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_orm_2_0462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_adm_in_hprim_adm_2_2480 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_adm_in_hprim_adm_2_2484 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_adm_2_2489 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_adm_2_2493 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_adm_2_2498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_adm_in_hprim_adm_2_1515 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_adm_in_hprim_adm_2_1519 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_adm_2_1524 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_adm_2_1528 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_adm_2_1533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_adm_in_hprim_adm_2_0550 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_adm_in_hprim_adm_2_0554 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_adm_2_0559 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_adm_2_0563 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_adm_2_0568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_fac_in_hprim_fac_2_2586 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_fac_in_hprim_fac_2_2590 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_fac_2_2595 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_fac_2_2599 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_fac_2_2604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_fac_in_hprim_fac_2_1621 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_fac_in_hprim_fac_2_1625 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_fac_2_1630 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_fac_2_1634 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_fac_2_1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_fac_in_hprim_fac_2_0656 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_fac_in_hprim_fac_2_0660 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_fac_2_0665 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_fac_2_0669 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_fac_2_0674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_reg_in_hprim_reg_2_2692 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_reg_in_hprim_reg_2_2696 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_reg_2_2701 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_reg_2_2705 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_reg_2_2710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_reg_in_hprim_reg_2_1727 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_reg_in_hprim_reg_2_1731 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_reg_2_1736 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_reg_2_1740 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_reg_2_1745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_reg_in_hprim_reg_2_0762 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_body_p_reg_in_hprim_reg_2_0766 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_reg_2_0771 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_reg_2_0775 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_reg_2_0780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_2_ns_in_hprim_ns_2_2798 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_ns_2_2802 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_ns_2_2806 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_ns_2_2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_1_ns_in_hprim_ns_2_1828 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_ns_2_1832 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_ns_2_1836 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_ns_2_1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_h2_0_ns_in_hprim_ns_2_0858 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_l_in_hprim_ns_2_0862 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_CR_in_hprim_ns_2_0866 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_hprim_ns_2_0871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_p_in_body_p_orm882 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_orm885 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_obr_in_body_p_orm892 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_orm895 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_obx_in_body_p_orm903 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_orm906 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_p_in_body_p_ora926 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_ora929 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_ap_in_body_p_ora936 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_ora939 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_ac_in_body_p_ora947 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_ora950 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_obr_in_body_p_ora960 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_ora963 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_obx_in_body_p_ora972 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_ora975 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_p_in_body_p_oru1001 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_oru1004 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_obr_in_body_p_oru1011 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_oru1014 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_obx_in_body_p_oru1022 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_oru1025 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_p_in_body_p_adm1045 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_adm1048 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_ap_in_body_p_adm1055 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_adm1058 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_ac_in_body_p_adm1066 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_adm1069 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_p_in_body_p_fac1089 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_fac1092 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_ap_in_body_p_fac1099 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_fac1102 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_ac_in_body_p_fac1110 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_fac1113 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_fac_in_body_p_fac1127 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_fac1130 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_reg_in_body_p_fac1138 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_fac1141 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_act_in_body_p_fac1151 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_fac1154 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_p_in_body_p_reg1174 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_c_in_body_p_reg1177 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_line_reg_in_body_p_reg1184 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_line_c_in_body_p_reg1187 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_delimiters_in_start_line_h1206 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_start_line_h1210 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_start_line_h1212 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_start_line_h1217 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_start_line_h1219 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_start_line_h1224 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_mandatory_2_in_start_line_h1226 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_start_line_h1231 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_start_line_h1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_midd_line_h1245 = new BitSet(new long[]{0x0003E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_tn_in_midd_line_h1247 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_midd_line_h1252 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_midd_line_h1254 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_midd_line_h1259 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_mandatory_2_in_midd_line_h1261 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_midd_line_h1266 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_midd_line_h1268 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_midd_line_h1273 = new BitSet(new long[]{0x0000000000240080L});
    public static final BitSet FOLLOW_spec_const_7_12_in_midd_line_h1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_oru1296 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_oru1300 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORU_in_line_h2_2_oru1302 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_oru1307 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_oru1311 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_oru1313 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_oru1318 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_oru1320 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_oru1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_oru1346 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_oru1350 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORU_in_line_h2_1_oru1352 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_oru1357 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_oru1361 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_oru1363 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_oru1368 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_oru1370 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_oru1375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_oru1395 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_oru1399 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORU_in_line_h2_0_oru1401 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_oru1406 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_oru1410 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_oru1412 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_oru1417 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_oru1419 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_oru1424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_orm1444 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_orm1448 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORM_in_line_h2_2_orm1450 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_orm1455 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_orm1459 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_orm1461 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_orm1466 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_orm1468 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_orm1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_orm1492 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_orm1496 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORM_in_line_h2_1_orm1498 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_orm1503 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_orm1507 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_orm1509 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_orm1514 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_orm1516 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_orm1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_orm1540 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_orm1544 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORM_in_line_h2_0_orm1546 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_orm1551 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_orm1555 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_orm1557 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_orm1562 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_orm1564 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_orm1569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_ora1589 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ora1593 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORA_in_line_h2_2_ora1595 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_ora1600 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ora1604 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_ora1606 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ora1611 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_ora1613 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ora1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_ora1637 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ora1641 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORA_in_line_h2_1_ora1643 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_ora1648 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ora1652 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_ora1654 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ora1659 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_ora1661 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ora1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_ora1685 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ora1689 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ORA_in_line_h2_0_ora1691 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_ora1696 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ora1700 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_ora1702 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ora1707 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_ora1709 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ora1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_adm1734 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_adm1738 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ADM_in_line_h2_2_adm1740 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_adm1745 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_adm1749 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_adm1751 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_adm1756 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_adm1758 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_adm1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_adm1782 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_adm1786 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ADM_in_line_h2_1_adm1788 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_adm1793 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_adm1797 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_adm1799 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_adm1804 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_adm1806 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_adm1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_adm1830 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_adm1834 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_ADM_in_line_h2_0_adm1836 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_adm1841 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_adm1845 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_adm1847 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_adm1852 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_adm1854 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_adm1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_fac1879 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_fac1883 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_FAC_in_line_h2_2_fac1885 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_fac1890 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_fac1894 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_fac1896 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_fac1901 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_fac1903 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_fac1908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_fac1927 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_fac1931 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_FAC_in_line_h2_1_fac1933 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_fac1938 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_fac1942 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_fac1944 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_fac1949 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_fac1951 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_fac1956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_fac1975 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_fac1979 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_FAC_in_line_h2_0_fac1981 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_fac1986 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_fac1990 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_fac1992 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_fac1997 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_fac1999 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_fac2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_reg2024 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_reg2028 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_REG_in_line_h2_2_reg2030 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_reg2035 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_reg2039 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_reg2041 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_reg2046 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_reg2048 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_reg2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_reg2072 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_reg2076 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_REG_in_line_h2_1_reg2078 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_reg2083 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_reg2087 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_reg2089 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_reg2094 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_reg2096 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_reg2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_reg2120 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_reg2124 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_REG_in_line_h2_0_reg2126 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_reg2131 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_reg2135 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_reg2137 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_reg2142 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_reg2144 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_reg2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_2_ns2169 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ns2173 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_NS_in_line_h2_2_ns2175 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_2_ns2180 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ns2184 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_2_in_line_h2_2_ns2186 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ns2191 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_2_ns2193 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_2_ns2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_1_ns2217 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ns2221 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_NS_in_line_h2_1_ns2223 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_1_ns2228 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ns2232 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_1_in_line_h2_1_ns2234 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ns2239 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_1_ns2241 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_1_ns2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_line_h_in_line_h2_0_ns2265 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ns2269 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_spec_const_7_7_contexte_NS_in_line_h2_0_ns2271 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_midd_line_h_in_line_h2_0_ns2276 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ns2280 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_spec_const_7_13_version_2_0_in_line_h2_0_ns2282 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ns2287 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_h2_0_ns2289 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_h2_0_ns2294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_ap2315 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_line_ap2317 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CHARP_in_line_ap2319 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2326 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_ap2328 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2333 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_ap2335 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2340 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_ap2342 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2347 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_ap2349 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2354 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_ap2356 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2361 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_ap2363 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2368 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_ap2370 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2375 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_ap2377 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2382 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_ap2384 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2389 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_ap2391 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2396 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_ap2398 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2403 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_ap2405 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2410 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_ap2412 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2417 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_mandatory_6_in_line_ap2419 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2424 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_ap2426 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2431 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_ap2433 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2439 = new BitSet(new long[]{0x0001C2FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_optionnal_in_line_ap2441 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2448 = new BitSet(new long[]{0x0000020000030000L});
    public static final BitSet FOLLOW_spec_on_optionnal_in_line_ap2450 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2458 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_ap2460 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2469 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_ap2471 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2481 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_ap2483 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2494 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_ap2496 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2508 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_ap2510 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ap2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_ac2557 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_line_ac2559 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_line_ac2561 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2568 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_ac2570 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2575 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_ac2577 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2582 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_ac2584 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2589 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_ac2591 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2596 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_ac2598 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2603 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_ac2605 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2610 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_spec_ac_8_in_line_ac2612 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2618 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_ac2620 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2627 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_ac2629 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_ac2636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_act2661 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_line_act2663 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_line_act2665 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_CHART_in_line_act2667 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2674 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_act2676 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2681 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_act2683 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2688 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_act2690 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2695 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_act2697 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2702 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_mandatory_in_line_act2704 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2709 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_act2711 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2716 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_act2718 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2723 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_fac_6_in_line_act2725 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2730 = new BitSet(new long[]{0x0003E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_act_10_in_line_act2732 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2737 = new BitSet(new long[]{0x0000000000080800L});
    public static final BitSet FOLLOW_spec_act_11_in_line_act2739 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_act2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_fac2765 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_CHARF_in_line_fac2767 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_line_fac2769 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_line_fac2771 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2778 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_fac2780 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2785 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_fac2787 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2792 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_fac2794 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2799 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_fac2801 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2807 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_fac_6_in_line_fac2809 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2816 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_fac_6_in_line_fac2818 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2826 = new BitSet(new long[]{0x0000020000030000L});
    public static final BitSet FOLLOW_spec_on_optionnal_in_line_fac2828 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_fac2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_p2865 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CHARP_in_line_p2867 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2874 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_p2876 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2881 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_8_3_in_line_p2883 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2888 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p2890 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2896 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p2898 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2905 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p2907 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2915 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p2917 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2926 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_p2928 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2938 = new BitSet(new long[]{0x0000020000408200L});
    public static final BitSet FOLLOW_spec_const_sexe_in_line_p2940 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2951 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_spec_const_race_in_line_p2953 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2965 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p2967 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2980 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p2982 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p2996 = new BitSet(new long[]{0x0003E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_tn_in_line_p2998 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3037 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_p3039 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_p3043 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_p3045 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3063 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3065 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3082 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3084 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3117 = new BitSet(new long[]{0x0001C2FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_optionnal_in_line_p3119 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3154 = new BitSet(new long[]{0x0001C2FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_optionnal_in_line_p3156 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3176 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p3178 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_p3182 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_p3184 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3207 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3209 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_p3213 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3215 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3239 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3241 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3264 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3266 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3290 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3292 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3317 = new BitSet(new long[]{0x000202FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_p3319 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_p3323 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_p3325 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3353 = new BitSet(new long[]{0x0000020000069100L});
    public static final BitSet FOLLOW_spec_const_8_25_in_line_p3355 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3382 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_8_in_line_p3384 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3437 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3439 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3468 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_spec_const_race_in_line_p3470 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3527 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3529 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3588 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3590 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3622 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3624 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3687 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_p3689 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3723 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_p3725 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3760 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_p3762 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_p3797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_reg3878 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_line_reg3880 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_CHARE_in_line_reg3882 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_CHARG_in_line_reg3884 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3891 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_reg3893 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3898 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_line_reg3900 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3905 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_spec_reg_4_in_line_reg3907 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3912 = new BitSet(new long[]{0x0000C00000000000L});
    public static final BitSet FOLLOW_spec_p_or_m_in_line_reg3914 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3919 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_mandatory_in_line_reg3921 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3930 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_reg3932 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3939 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_reg3941 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_reg3948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_obr3972 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_CHARO_in_line_obr3974 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_CHARB_in_line_obr3976 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_line_obr3978 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr3985 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_obr3987 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr3992 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_9_3_in_line_obr3994 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr3999 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_2_in_line_obr4001 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4006 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obr4008 = new BitSet(new long[]{0x0002020000000000L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obr4012 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obr4014 = new BitSet(new long[]{0x0002020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4024 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4026 = new BitSet(new long[]{0x0002020000000000L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obr4030 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4032 = new BitSet(new long[]{0x0002020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4039 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obr4041 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4046 = new BitSet(new long[]{0x000200FFC0000000L});
    public static final BitSet FOLLOW_spec_non_sized_9_8_in_line_obr4048 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4053 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obr4055 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4063 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4065 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4070 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4072 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4080 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4082 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4091 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_2_in_line_obr4093 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4100 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4102 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4110 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obr4112 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4121 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_9_16_in_line_obr4123 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4133 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obr4135 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4146 = new BitSet(new long[]{0x0003E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_tn_in_line_obr4148 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4160 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4162 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4175 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4177 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4191 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4193 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4208 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4210 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4226 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obr4228 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4245 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_spec_const_race_in_line_obr4247 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4265 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_2_in_line_obr4267 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4286 = new BitSet(new long[]{0x00000200020E92C0L});
    public static final BitSet FOLLOW_spec_const_9_26_in_line_obr4288 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4308 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_spec_const_race_in_line_obr4310 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4331 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_spec_const_race_in_line_obr4333 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4355 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4357 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obr4361 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4363 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4388 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_4_in_line_obr4390 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4414 = new BitSet(new long[]{0x0000020001040040L});
    public static final BitSet FOLLOW_spec_const_9_31_in_line_obr4416 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4463 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4465 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obr4469 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obr4471 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4499 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4501 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4528 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4530 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4558 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4560 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4589 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_cna_in_line_obr4591 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4621 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obr4623 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obr4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_obx4724 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_CHARO_in_line_obx4726 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_CHARB_in_line_obx4728 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CHARX_in_line_obx4730 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4737 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_obx4739 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4744 = new BitSet(new long[]{0x00000000003506D0L});
    public static final BitSet FOLLOW_spec_const_10_3_nm_in_line_obx4752 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4761 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx4763 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4773 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx4775 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4786 = new BitSet(new long[]{0x0003C2FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_optionnal_in_line_obx4788 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx4792 = new BitSet(new long[]{0x0003C2FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_optionnal_in_line_obx4794 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx4807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_10_3_ce_in_line_obx4824 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4833 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx4835 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4845 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx4847 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4858 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_in_line_obx4860 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx4864 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_in_line_obx4866 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_10_3_fic_in_line_obx4896 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4905 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx4907 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4917 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx4919 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4930 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_in_line_obx4932 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx4936 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_in_line_obx4938 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx4951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_10_3_st_in_line_obx4968 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4977 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx4979 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx4989 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx4991 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5002 = new BitSet(new long[]{0x0003E6FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_tx_in_line_obx5004 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx5008 = new BitSet(new long[]{0x0003E6FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_tx_in_line_obx5010 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx5023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_10_3_gc_in_line_obx5040 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5049 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx5051 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5061 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx5063 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5074 = new BitSet(new long[]{0x0001C4FFC0000000L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_nm_optionnal_2_in_line_obx5076 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx5080 = new BitSet(new long[]{0x0001C4FFC0000000L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_nm_optionnal_2_in_line_obx5082 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx5095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_10_3_tx_in_line_obx5112 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5121 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx5123 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5133 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx5135 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5146 = new BitSet(new long[]{0x0003E6FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_tx_in_line_obx5148 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx5152 = new BitSet(new long[]{0x0003E6FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_6_tx_in_line_obx5154 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_10_3_std_in_line_obx5184 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5193 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_10_4_in_line_obx5195 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5205 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx5207 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx5218 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx5220 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx5224 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx5226 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_line_obx2_1_post10_6_in_line_obx5239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65260 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65262 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65271 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65273 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx2_1_post10_65277 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65279 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65291 = new BitSet(new long[]{0x000202000DD9D8B0L});
    public static final BitSet FOLLOW_spec_const_10_9_in_line_obx2_1_post10_65293 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx2_1_post10_65297 = new BitSet(new long[]{0x000202000DD9D8B0L});
    public static final BitSet FOLLOW_spec_const_10_9_in_line_obx2_1_post10_65299 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65312 = new BitSet(new long[]{0x0001C2FFC0000000L});
    public static final BitSet FOLLOW_nm_sized_optionnal_in_line_obx2_1_post10_65314 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65326 = new BitSet(new long[]{0x0002020000190010L});
    public static final BitSet FOLLOW_spec_const_10_11_in_line_obx2_1_post10_65328 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_obx2_1_post10_65332 = new BitSet(new long[]{0x0002020000190010L});
    public static final BitSet FOLLOW_spec_const_10_11_in_line_obx2_1_post10_65334 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65349 = new BitSet(new long[]{0x00000200024C12C0L});
    public static final BitSet FOLLOW_spec_const_10_12_in_line_obx2_1_post10_65351 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65366 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obx2_1_post10_65368 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65384 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65386 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65402 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_line_obx2_1_post10_65404 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65421 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl1_st_optionnal_6_in_line_obx2_1_post10_65423 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65441 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_obx2_1_post10_65443 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_obx2_1_post10_65446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_c5485 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_line_c5487 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_c5491 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_mandatory_in_line_c5493 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_c5498 = new BitSet(new long[]{0x0000020000044000L});
    public static final BitSet FOLLOW_spec_const_12_3_in_line_c5500 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_c5505 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_c5507 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_line_c5511 = new BitSet(new long[]{0x0003E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_c5513 = new BitSet(new long[]{0x0002020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_c5522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CR_in_line_l5540 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_CHARL_in_line_l5542 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_l5547 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_optionnal_in_line_l5549 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_l5556 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_spec_const_race_in_line_l5558 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_l5566 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_optionnal_in_line_l5568 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_l5577 = new BitSet(new long[]{0x000002FFC0000000L});
    public static final BitSet FOLLOW_nm_integer_sized_optionnal_in_line_l5579 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_l5589 = new BitSet(new long[]{0x0001E2FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_line_l5591 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DELIMITER1_in_line_l5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_HR_in_spec_act_115630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_RX_in_spec_act_115634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charR_in_spec_act_115638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_symbol_plus_in_spec_p_or_m5656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_symbol_moins_in_spec_p_or_m5660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nm_nonsized_mandatory_in_spec_ac_85680 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_ac_85685 = new BitSet(new long[]{0x0000000000200200L});
    public static final BitSet FOLLOW_spec_ac_8_2_in_spec_ac_85687 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_ac_85692 = new BitSet(new long[]{0x0000000000340000L});
    public static final BitSet FOLLOW_spec_ac_8_3_in_spec_ac_85694 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_nonsized_mandatory_in_spec_ac_85699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_TM_in_spec_ac_8_25722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_TR_in_spec_ac_8_25726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_FR_in_spec_ac_8_25730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_PF_in_spec_ac_8_35750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_SS_in_spec_ac_8_35754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_TR_in_spec_ac_8_35758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charO_in_spec_on_optionnal5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charN_in_spec_on_optionnal5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charM_in_spec_const_sexe5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charF_in_spec_const_sexe5806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charU_in_spec_const_sexe5810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_7_13_1_version_2_0_in_spec_const_7_13_version_2_05847 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_const_7_13_version_2_05850 = new BitSet(new long[]{0x0000000000084040L});
    public static final BitSet FOLLOW_spec_const_7_13_2_in_spec_const_7_13_version_2_05852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_7_13_1_version_2_1_in_spec_const_7_13_version_2_15873 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_const_7_13_version_2_15876 = new BitSet(new long[]{0x0000000000084040L});
    public static final BitSet FOLLOW_spec_const_7_13_2_in_spec_const_7_13_version_2_15878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_const_7_13_1_version_2_2_in_spec_const_7_13_version_2_25897 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_const_7_13_version_2_25900 = new BitSet(new long[]{0x0000000000084040L});
    public static final BitSet FOLLOW_spec_const_7_13_2_in_spec_const_7_13_version_2_25902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charC_in_spec_const_7_13_25921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charL_in_spec_const_7_13_25925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charR_in_spec_const_7_13_25929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ORU_in_spec_const_7_7_contexte_ORU5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ORM_in_spec_const_7_7_contexte_ORM5965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ORA_in_spec_const_7_7_contexte_ORA5983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ADM_in_spec_const_7_7_contexte_ADM6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_FAC_in_spec_const_7_7_contexte_FAC6021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_REG_in_spec_const_7_7_contexte_REG6039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_NS_in_spec_const_7_7_contexte_NS6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charP_in_spec_const_7_126076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charD_in_spec_const_7_126080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charT_in_spec_const_7_126084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_PORT_in_spec_const_9_316104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_CART_in_spec_const_9_316108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_WHLC_in_spec_const_9_316112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_WALK_in_spec_const_9_316116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_OP_in_spec_const_8_256137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_IP_in_spec_const_8_256141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ER_in_spec_const_8_256145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_PA_in_spec_const_8_256149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_MP_in_spec_const_8_256153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charF_in_spec_const_9_266174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charP_in_spec_const_9_266178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charM_in_spec_const_9_266182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charI_in_spec_const_9_266186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charR_in_spec_const_9_266190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charC_in_spec_const_9_266194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charO_in_spec_const_9_266198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charD_in_spec_const_9_266204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charX_in_spec_const_9_266208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARN_in_spec_const_10_3_nm6229 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CHARM_in_spec_const_10_3_nm6231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARC_in_spec_const_10_3_ce6252 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_CHARE_in_spec_const_10_3_ce6254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARS_in_spec_const_10_3_st6275 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_CHART_in_spec_const_10_3_st6277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARG_in_spec_const_10_3_gc6298 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_spec_const_10_3_gc6300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHART_in_spec_const_10_3_tx6322 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CHARX_in_spec_const_10_3_tx6324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARF_in_spec_const_10_3_fic6345 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_CHARI_in_spec_const_10_3_fic6347 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_spec_const_10_3_fic6349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARA_in_spec_const_10_3_std6371 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_CHARD_in_spec_const_10_3_std6373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARC_in_spec_const_10_3_std6379 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_CHARK_in_spec_const_10_3_std6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARC_in_spec_const_10_3_std6387 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_CHARN_in_spec_const_10_3_std6389 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_spec_const_10_3_std6391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARD_in_spec_const_10_3_std6397 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_CHART_in_spec_const_10_3_std6399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARP_in_spec_const_10_3_std6407 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_CHARN_in_spec_const_10_3_std6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHART_in_spec_const_10_3_std6415 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_CHARN_in_spec_const_10_3_std6417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARG_in_spec_const_10_3_std6425 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_CHARB_in_spec_const_10_3_std6427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARG_in_spec_const_10_3_std6433 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_CHARN_in_spec_const_10_3_std6435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_act_106457 = new BitSet(new long[]{0x0002040000000000L});
    public static final BitSet FOLLOW_REPETITEUR_in_spec_act_106461 = new BitSet(new long[]{0x0003E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_act_106463 = new BitSet(new long[]{0x0002040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_act_106470 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_act_106472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_fac_66496 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_fac_66502 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_fac_66504 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_fac_66511 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_fac_66513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nm_nonsized_mandatory_in_spec_reg_46540 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_reg_46545 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_reg_46547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_sized_10_66571 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_66577 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_sized_10_66579 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_66586 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_sized_10_66588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charL_in_spec_const_10_96616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charH_in_spec_const_10_96620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_LL_in_spec_const_10_96624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_HH_in_spec_const_10_96628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_symbol_inf_in_spec_const_10_96632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_symbol_sup_in_spec_const_10_96636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charN_in_spec_const_10_96642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charA_in_spec_const_10_96646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_AA_in_spec_const_10_96650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_Null_in_spec_const_10_96654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charU_in_spec_const_10_96658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charD_in_spec_const_10_96662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charB_in_spec_const_10_96666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charW_in_spec_const_10_96672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charR_in_spec_const_10_96676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charI_in_spec_const_10_96680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charS_in_spec_const_10_96684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_MS_in_spec_const_10_96688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_VS_in_spec_const_10_96692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charA_in_spec_const_10_116713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charS_in_spec_const_10_116717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charR_in_spec_const_10_116721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charN_in_spec_const_10_116725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charR_in_spec_const_10_126746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charP_in_spec_const_10_126750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charF_in_spec_const_10_126754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charC_in_spec_const_10_126758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charI_in_spec_const_10_126762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charD_in_spec_const_10_126766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charX_in_spec_const_10_126773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charU_in_spec_const_10_126777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charP_in_spec_const_12_36798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_charL_in_spec_const_12_36802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_26822 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_26828 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_26830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_26853 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_26859 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_26861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46886 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_46892 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46894 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_46901 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46903 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_46911 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_46913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66942 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66948 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66950 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66957 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66959 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66967 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66969 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66978 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66980 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_mandatory_66990 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_mult_lvl1_st_mandatory_66992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67015 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67022 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67024 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67032 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67034 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67043 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67045 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67055 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67057 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_67068 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_67070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87103 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87109 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87111 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87118 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87120 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87128 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87130 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87139 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87141 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87151 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87153 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87164 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87166 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_st_optionnal_87178 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl1_st_optionnal_87180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_37217 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_37223 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_37225 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_37232 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_37234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67257 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67263 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67265 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67272 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67274 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67282 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67284 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67293 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67295 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DELIMITER3_in_spec_sized_mult_lvl2_st_optionnal_67305 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_mult_lvl2_st_optionnal_67307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nm_nonsized_optionnal_in_spec_sized_mult_lvl1_nm_optionnal_27336 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_nm_optionnal_27341 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_nonsized_optionnal_in_spec_sized_mult_lvl1_nm_optionnal_27343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nm_nonsized_mandatory_in_spec_sized_mult_lvl1_nm_mandatory_27368 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_mult_lvl1_nm_mandatory_27373 = new BitSet(new long[]{0x0001C0FFC0000000L});
    public static final BitSet FOLLOW_nm_nonsized_mandatory_in_spec_sized_mult_lvl1_nm_mandatory_27375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_cna7398 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_cna7405 = new BitSet(new long[]{0x0001E8FFFFFFFFF0L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl2_st_optionnal_6_in_spec_sized_cna7407 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_cna7415 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_cna7417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_sized_mandatory_in_spec_sized_8_37449 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_8_37456 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_8_37458 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_8_37466 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_8_37468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_sized_9_37508 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_9_37514 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_sized_optionnal_in_spec_sized_9_37516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_spec_non_sized_9_87541 = new BitSet(new long[]{0x0002000000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_spec_non_sized_9_87548 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_ts_sized_optionnal_in_spec_non_sized_9_87550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spec_sized_mult_lvl2_st_optionnal_3_in_spec_sized_9_167571 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_9_167577 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_9_167579 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_9_167586 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_9_167588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_nonsized_mandatory_in_spec_sized_10_47615 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_47621 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47623 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_47630 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47632 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_47640 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47642 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_47651 = new BitSet(new long[]{0x0001E4FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47653 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_DELIMITER2_in_spec_sized_10_47663 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_10_47665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_spec_10_6_tx_in_spec_sized_10_6_tx7700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_tn7722 = new BitSet(new long[]{0x0002000000000002L});
    public static final BitSet FOLLOW_REPETITEUR_in_spec_sized_tn7728 = new BitSet(new long[]{0x0001E0FFFFFFFFF0L});
    public static final BitSet FOLLOW_st_non_sized_optionnal_in_spec_sized_tn7730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_st_in_st_sized_optionnal7758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_st_in_st_sized_mandatory7781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_st_in_st_non_sized_optionnal7803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_st_in_st_nonsized_mandatory7822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_nm_in_nm_sized_optionnal7840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_nm_in_nm_sized_mandatory7863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_nm_integer_in_nm_integer_sized_optionnal7885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_nm_integer_in_nm_integer_sized_mandatory7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ts_in_ts_sized_optionnal7936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_ts_in_ts_sized_mandatory7959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_nm_in_nm_nonsized_mandatory7981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_nm_in_nm_nonsized_optionnal7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_version_2_0_in_spec_const_7_13_1_version_2_08018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_version_2_1_in_spec_const_7_13_1_version_2_18036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_version_2_2_in_spec_const_7_13_1_version_2_28056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_content_spec_10_6_in_final_spec_10_6_tx8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_character_in_content_spec_10_68095 = new BitSet(new long[]{0x0001E4FFFFFFFFF2L});
    public static final BitSet FOLLOW_DELIMITER2_in_content_spec_10_68101 = new BitSet(new long[]{0x0001E4FFFFFFFFF2L});
    public static final BitSet FOLLOW_content_spec_10_6_in_content_spec_10_68112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8124 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8126 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8130 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8132 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8134 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8138 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8141 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8143 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8148 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8150 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8152 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8156 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8159 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_ts8161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_character_in_final_st8180 = new BitSet(new long[]{0x0001E0FFFFFFFFF2L});
    public static final BitSet FOLLOW_chiffre_in_final_nm8209 = new BitSet(new long[]{0x000100FFC0000002L});
    public static final BitSet FOLLOW_POINT_in_final_nm8213 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_chiffre_in_final_nm8215 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_POINT_in_final_nm8225 = new BitSet(new long[]{0x000000FFC0000000L});
    public static final BitSet FOLLOW_chiffre_in_final_nm8227 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_chiffre_in_final_nm_integer8244 = new BitSet(new long[]{0x000000FFC0000002L});
    public static final BitSet FOLLOW_CHARA_in_final_ADM8256 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_CHARD_in_final_ADM8258 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CHARM_in_final_ADM8260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARO_in_final_ORA8268 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_ORA8270 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_final_ORA8272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARO_in_final_ORU8280 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_ORU8282 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_CHARU_in_final_ORU8284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARO_in_final_ORM8292 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_ORM8294 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CHARM_in_final_ORM8296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARF_in_final_FAC8304 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_final_FAC8306 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_final_FAC8308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARR_in_final_REG8316 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_CHARE_in_final_REG8318 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_CHARG_in_final_REG8320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARC_in_final_CART8329 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_final_CART8331 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_CART8333 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_CHART_in_final_CART8335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARP_in_final_PORT8343 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_CHARO_in_final_PORT8345 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_PORT8347 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_CHART_in_final_PORT8349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARW_in_final_WHLC8357 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_CHARH_in_final_WHLC8359 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_CHARL_in_final_WHLC8361 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_CHARC_in_final_WHLC8363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARW_in_final_WALK8371 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_final_WALK8373 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_CHARL_in_final_WALK8375 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_CHARK_in_final_WALK8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARL_in_final_LL8386 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_CHARL_in_final_LL8388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARA_in_final_AA8396 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_final_AA8398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARH_in_final_HH8406 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_CHARH_in_final_HH8408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARM_in_final_MS8416 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARS_in_final_MS8418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARV_in_final_VS8426 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARS_in_final_VS8428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARN_in_final_Null8436 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_CHARu_in_final_Null8438 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_CHARl_in_final_Null8440 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_CHARl_in_final_Null8442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_SYMBOL_INF_in_final_symbol_inf8450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_SYMBOL_SUP_in_final_symbol_sup8458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_final_symbol_plus8466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOINS_in_final_symbol_moins8474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARH_in_final_version_2_08483 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CHIFFRE2_in_final_version_2_08485 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_POINT_in_final_version_2_08487 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_CHIFFRE0_in_final_version_2_08489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARH_in_final_version_2_18497 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CHIFFRE2_in_final_version_2_18499 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_POINT_in_final_version_2_18501 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CHIFFRE1_in_final_version_2_18503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARH_in_final_version_2_28511 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CHIFFRE2_in_final_version_2_28513 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_POINT_in_final_version_2_28515 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CHIFFRE2_in_final_version_2_28517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARO_in_final_OP8526 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CHARP_in_final_OP8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARI_in_final_IP8536 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CHARP_in_final_IP8538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARE_in_final_ER8546 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_ER8548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARP_in_final_PA8556 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_CHARA_in_final_PA8558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARM_in_final_MP8566 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CHARP_in_final_MP8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHART_in_final_TM8576 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CHARM_in_final_TM8578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHART_in_final_TR8586 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_TR8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARF_in_final_FR8596 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_FR8598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARP_in_final_PF8606 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_CHARF_in_final_PF8608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARS_in_final_SS8616 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARS_in_final_SS8618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARR_in_final_RX8626 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CHARX_in_final_RX8628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARH_in_final_HR8636 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_CHARR_in_final_HR8638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARN_in_final_NS8646 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARS_in_final_NS8648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARA_in_final_charA8657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARB_in_final_charB8665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARC_in_final_charC8673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARD_in_final_charD8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARF_in_final_charF8689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARH_in_final_charH8697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARI_in_final_charI8705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARL_in_final_charL8713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARM_in_final_charM8721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARN_in_final_charN8729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARO_in_final_charO8737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARP_in_final_charP8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARR_in_final_charR8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARS_in_final_charS8761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHART_in_final_charT8769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARU_in_final_charU8777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARW_in_final_charW8785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARX_in_final_charX8793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELIMITERS_in_delimiters8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lettre_in_character8830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chiffre_in_character8834 = new BitSet(new long[]{0x0000000000000002L});

}